
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Registration
 * 
 */
export type Registration = $Result.DefaultSelection<Prisma.$RegistrationPayload>
/**
 * Model College
 * 
 */
export type College = $Result.DefaultSelection<Prisma.$CollegePayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model Course
 * 
 */
export type Course = $Result.DefaultSelection<Prisma.$CoursePayload>
/**
 * Model CoursesAssigned
 * 
 */
export type CoursesAssigned = $Result.DefaultSelection<Prisma.$CoursesAssignedPayload>
/**
 * Model Enrollment
 * 
 */
export type Enrollment = $Result.DefaultSelection<Prisma.$EnrollmentPayload>
/**
 * Model Chapter
 * 
 */
export type Chapter = $Result.DefaultSelection<Prisma.$ChapterPayload>
/**
 * Model ChapterProgress
 * 
 */
export type ChapterProgress = $Result.DefaultSelection<Prisma.$ChapterProgressPayload>
/**
 * Model Assessment
 * 
 */
export type Assessment = $Result.DefaultSelection<Prisma.$AssessmentPayload>
/**
 * Model AssessmentQuestion
 * 
 */
export type AssessmentQuestion = $Result.DefaultSelection<Prisma.$AssessmentQuestionPayload>
/**
 * Model AssessmentAttempt
 * 
 */
export type AssessmentAttempt = $Result.DefaultSelection<Prisma.$AssessmentAttemptPayload>
/**
 * Model Setting
 * 
 */
export type Setting = $Result.DefaultSelection<Prisma.$SettingPayload>
/**
 * Model CourseReview
 * 
 */
export type CourseReview = $Result.DefaultSelection<Prisma.$CourseReviewPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.registration`: Exposes CRUD operations for the **Registration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Registrations
    * const registrations = await prisma.registration.findMany()
    * ```
    */
  get registration(): Prisma.RegistrationDelegate<ExtArgs>;

  /**
   * `prisma.college`: Exposes CRUD operations for the **College** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Colleges
    * const colleges = await prisma.college.findMany()
    * ```
    */
  get college(): Prisma.CollegeDelegate<ExtArgs>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate<ExtArgs>;

  /**
   * `prisma.coursesAssigned`: Exposes CRUD operations for the **CoursesAssigned** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CoursesAssigneds
    * const coursesAssigneds = await prisma.coursesAssigned.findMany()
    * ```
    */
  get coursesAssigned(): Prisma.CoursesAssignedDelegate<ExtArgs>;

  /**
   * `prisma.enrollment`: Exposes CRUD operations for the **Enrollment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Enrollments
    * const enrollments = await prisma.enrollment.findMany()
    * ```
    */
  get enrollment(): Prisma.EnrollmentDelegate<ExtArgs>;

  /**
   * `prisma.chapter`: Exposes CRUD operations for the **Chapter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chapters
    * const chapters = await prisma.chapter.findMany()
    * ```
    */
  get chapter(): Prisma.ChapterDelegate<ExtArgs>;

  /**
   * `prisma.chapterProgress`: Exposes CRUD operations for the **ChapterProgress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChapterProgresses
    * const chapterProgresses = await prisma.chapterProgress.findMany()
    * ```
    */
  get chapterProgress(): Prisma.ChapterProgressDelegate<ExtArgs>;

  /**
   * `prisma.assessment`: Exposes CRUD operations for the **Assessment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assessments
    * const assessments = await prisma.assessment.findMany()
    * ```
    */
  get assessment(): Prisma.AssessmentDelegate<ExtArgs>;

  /**
   * `prisma.assessmentQuestion`: Exposes CRUD operations for the **AssessmentQuestion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AssessmentQuestions
    * const assessmentQuestions = await prisma.assessmentQuestion.findMany()
    * ```
    */
  get assessmentQuestion(): Prisma.AssessmentQuestionDelegate<ExtArgs>;

  /**
   * `prisma.assessmentAttempt`: Exposes CRUD operations for the **AssessmentAttempt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AssessmentAttempts
    * const assessmentAttempts = await prisma.assessmentAttempt.findMany()
    * ```
    */
  get assessmentAttempt(): Prisma.AssessmentAttemptDelegate<ExtArgs>;

  /**
   * `prisma.setting`: Exposes CRUD operations for the **Setting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Settings
    * const settings = await prisma.setting.findMany()
    * ```
    */
  get setting(): Prisma.SettingDelegate<ExtArgs>;

  /**
   * `prisma.courseReview`: Exposes CRUD operations for the **CourseReview** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CourseReviews
    * const courseReviews = await prisma.courseReview.findMany()
    * ```
    */
  get courseReview(): Prisma.CourseReviewDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Registration: 'Registration',
    College: 'College',
    Department: 'Department',
    Course: 'Course',
    CoursesAssigned: 'CoursesAssigned',
    Enrollment: 'Enrollment',
    Chapter: 'Chapter',
    ChapterProgress: 'ChapterProgress',
    Assessment: 'Assessment',
    AssessmentQuestion: 'AssessmentQuestion',
    AssessmentAttempt: 'AssessmentAttempt',
    Setting: 'Setting',
    CourseReview: 'CourseReview'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "registration" | "college" | "department" | "course" | "coursesAssigned" | "enrollment" | "chapter" | "chapterProgress" | "assessment" | "assessmentQuestion" | "assessmentAttempt" | "setting" | "courseReview"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Registration: {
        payload: Prisma.$RegistrationPayload<ExtArgs>
        fields: Prisma.RegistrationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegistrationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegistrationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload>
          }
          findFirst: {
            args: Prisma.RegistrationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegistrationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload>
          }
          findMany: {
            args: Prisma.RegistrationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload>[]
          }
          create: {
            args: Prisma.RegistrationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload>
          }
          createMany: {
            args: Prisma.RegistrationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RegistrationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload>[]
          }
          delete: {
            args: Prisma.RegistrationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload>
          }
          update: {
            args: Prisma.RegistrationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload>
          }
          deleteMany: {
            args: Prisma.RegistrationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RegistrationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RegistrationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegistrationPayload>
          }
          aggregate: {
            args: Prisma.RegistrationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegistration>
          }
          groupBy: {
            args: Prisma.RegistrationGroupByArgs<ExtArgs>
            result: $Utils.Optional<RegistrationGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegistrationCountArgs<ExtArgs>
            result: $Utils.Optional<RegistrationCountAggregateOutputType> | number
          }
        }
      }
      College: {
        payload: Prisma.$CollegePayload<ExtArgs>
        fields: Prisma.CollegeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CollegeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollegePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CollegeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollegePayload>
          }
          findFirst: {
            args: Prisma.CollegeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollegePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CollegeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollegePayload>
          }
          findMany: {
            args: Prisma.CollegeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollegePayload>[]
          }
          create: {
            args: Prisma.CollegeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollegePayload>
          }
          createMany: {
            args: Prisma.CollegeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CollegeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollegePayload>[]
          }
          delete: {
            args: Prisma.CollegeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollegePayload>
          }
          update: {
            args: Prisma.CollegeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollegePayload>
          }
          deleteMany: {
            args: Prisma.CollegeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CollegeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CollegeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CollegePayload>
          }
          aggregate: {
            args: Prisma.CollegeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCollege>
          }
          groupBy: {
            args: Prisma.CollegeGroupByArgs<ExtArgs>
            result: $Utils.Optional<CollegeGroupByOutputType>[]
          }
          count: {
            args: Prisma.CollegeCountArgs<ExtArgs>
            result: $Utils.Optional<CollegeCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      Course: {
        payload: Prisma.$CoursePayload<ExtArgs>
        fields: Prisma.CourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findFirst: {
            args: Prisma.CourseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findMany: {
            args: Prisma.CourseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          create: {
            args: Prisma.CourseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          createMany: {
            args: Prisma.CourseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          delete: {
            args: Prisma.CourseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          update: {
            args: Prisma.CourseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          deleteMany: {
            args: Prisma.CourseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CourseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          aggregate: {
            args: Prisma.CourseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourse>
          }
          groupBy: {
            args: Prisma.CourseGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseCountArgs<ExtArgs>
            result: $Utils.Optional<CourseCountAggregateOutputType> | number
          }
        }
      }
      CoursesAssigned: {
        payload: Prisma.$CoursesAssignedPayload<ExtArgs>
        fields: Prisma.CoursesAssignedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoursesAssignedFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesAssignedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoursesAssignedFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesAssignedPayload>
          }
          findFirst: {
            args: Prisma.CoursesAssignedFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesAssignedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoursesAssignedFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesAssignedPayload>
          }
          findMany: {
            args: Prisma.CoursesAssignedFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesAssignedPayload>[]
          }
          create: {
            args: Prisma.CoursesAssignedCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesAssignedPayload>
          }
          createMany: {
            args: Prisma.CoursesAssignedCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CoursesAssignedCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesAssignedPayload>[]
          }
          delete: {
            args: Prisma.CoursesAssignedDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesAssignedPayload>
          }
          update: {
            args: Prisma.CoursesAssignedUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesAssignedPayload>
          }
          deleteMany: {
            args: Prisma.CoursesAssignedDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CoursesAssignedUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CoursesAssignedUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursesAssignedPayload>
          }
          aggregate: {
            args: Prisma.CoursesAssignedAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCoursesAssigned>
          }
          groupBy: {
            args: Prisma.CoursesAssignedGroupByArgs<ExtArgs>
            result: $Utils.Optional<CoursesAssignedGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoursesAssignedCountArgs<ExtArgs>
            result: $Utils.Optional<CoursesAssignedCountAggregateOutputType> | number
          }
        }
      }
      Enrollment: {
        payload: Prisma.$EnrollmentPayload<ExtArgs>
        fields: Prisma.EnrollmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EnrollmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EnrollmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          findFirst: {
            args: Prisma.EnrollmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EnrollmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          findMany: {
            args: Prisma.EnrollmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>[]
          }
          create: {
            args: Prisma.EnrollmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          createMany: {
            args: Prisma.EnrollmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EnrollmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>[]
          }
          delete: {
            args: Prisma.EnrollmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          update: {
            args: Prisma.EnrollmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          deleteMany: {
            args: Prisma.EnrollmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EnrollmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EnrollmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          aggregate: {
            args: Prisma.EnrollmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEnrollment>
          }
          groupBy: {
            args: Prisma.EnrollmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<EnrollmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.EnrollmentCountArgs<ExtArgs>
            result: $Utils.Optional<EnrollmentCountAggregateOutputType> | number
          }
        }
      }
      Chapter: {
        payload: Prisma.$ChapterPayload<ExtArgs>
        fields: Prisma.ChapterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChapterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChapterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          findFirst: {
            args: Prisma.ChapterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChapterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          findMany: {
            args: Prisma.ChapterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>[]
          }
          create: {
            args: Prisma.ChapterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          createMany: {
            args: Prisma.ChapterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChapterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>[]
          }
          delete: {
            args: Prisma.ChapterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          update: {
            args: Prisma.ChapterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          deleteMany: {
            args: Prisma.ChapterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChapterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChapterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          aggregate: {
            args: Prisma.ChapterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChapter>
          }
          groupBy: {
            args: Prisma.ChapterGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChapterGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChapterCountArgs<ExtArgs>
            result: $Utils.Optional<ChapterCountAggregateOutputType> | number
          }
        }
      }
      ChapterProgress: {
        payload: Prisma.$ChapterProgressPayload<ExtArgs>
        fields: Prisma.ChapterProgressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChapterProgressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterProgressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChapterProgressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterProgressPayload>
          }
          findFirst: {
            args: Prisma.ChapterProgressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterProgressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChapterProgressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterProgressPayload>
          }
          findMany: {
            args: Prisma.ChapterProgressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterProgressPayload>[]
          }
          create: {
            args: Prisma.ChapterProgressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterProgressPayload>
          }
          createMany: {
            args: Prisma.ChapterProgressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChapterProgressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterProgressPayload>[]
          }
          delete: {
            args: Prisma.ChapterProgressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterProgressPayload>
          }
          update: {
            args: Prisma.ChapterProgressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterProgressPayload>
          }
          deleteMany: {
            args: Prisma.ChapterProgressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChapterProgressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChapterProgressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChapterProgressPayload>
          }
          aggregate: {
            args: Prisma.ChapterProgressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChapterProgress>
          }
          groupBy: {
            args: Prisma.ChapterProgressGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChapterProgressGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChapterProgressCountArgs<ExtArgs>
            result: $Utils.Optional<ChapterProgressCountAggregateOutputType> | number
          }
        }
      }
      Assessment: {
        payload: Prisma.$AssessmentPayload<ExtArgs>
        fields: Prisma.AssessmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssessmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssessmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>
          }
          findFirst: {
            args: Prisma.AssessmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssessmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>
          }
          findMany: {
            args: Prisma.AssessmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>[]
          }
          create: {
            args: Prisma.AssessmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>
          }
          createMany: {
            args: Prisma.AssessmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssessmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>[]
          }
          delete: {
            args: Prisma.AssessmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>
          }
          update: {
            args: Prisma.AssessmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>
          }
          deleteMany: {
            args: Prisma.AssessmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssessmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AssessmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentPayload>
          }
          aggregate: {
            args: Prisma.AssessmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssessment>
          }
          groupBy: {
            args: Prisma.AssessmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssessmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssessmentCountArgs<ExtArgs>
            result: $Utils.Optional<AssessmentCountAggregateOutputType> | number
          }
        }
      }
      AssessmentQuestion: {
        payload: Prisma.$AssessmentQuestionPayload<ExtArgs>
        fields: Prisma.AssessmentQuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssessmentQuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentQuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssessmentQuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentQuestionPayload>
          }
          findFirst: {
            args: Prisma.AssessmentQuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentQuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssessmentQuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentQuestionPayload>
          }
          findMany: {
            args: Prisma.AssessmentQuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentQuestionPayload>[]
          }
          create: {
            args: Prisma.AssessmentQuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentQuestionPayload>
          }
          createMany: {
            args: Prisma.AssessmentQuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssessmentQuestionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentQuestionPayload>[]
          }
          delete: {
            args: Prisma.AssessmentQuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentQuestionPayload>
          }
          update: {
            args: Prisma.AssessmentQuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentQuestionPayload>
          }
          deleteMany: {
            args: Prisma.AssessmentQuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssessmentQuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AssessmentQuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentQuestionPayload>
          }
          aggregate: {
            args: Prisma.AssessmentQuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssessmentQuestion>
          }
          groupBy: {
            args: Prisma.AssessmentQuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssessmentQuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssessmentQuestionCountArgs<ExtArgs>
            result: $Utils.Optional<AssessmentQuestionCountAggregateOutputType> | number
          }
        }
      }
      AssessmentAttempt: {
        payload: Prisma.$AssessmentAttemptPayload<ExtArgs>
        fields: Prisma.AssessmentAttemptFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssessmentAttemptFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentAttemptPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssessmentAttemptFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentAttemptPayload>
          }
          findFirst: {
            args: Prisma.AssessmentAttemptFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentAttemptPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssessmentAttemptFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentAttemptPayload>
          }
          findMany: {
            args: Prisma.AssessmentAttemptFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentAttemptPayload>[]
          }
          create: {
            args: Prisma.AssessmentAttemptCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentAttemptPayload>
          }
          createMany: {
            args: Prisma.AssessmentAttemptCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssessmentAttemptCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentAttemptPayload>[]
          }
          delete: {
            args: Prisma.AssessmentAttemptDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentAttemptPayload>
          }
          update: {
            args: Prisma.AssessmentAttemptUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentAttemptPayload>
          }
          deleteMany: {
            args: Prisma.AssessmentAttemptDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssessmentAttemptUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AssessmentAttemptUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssessmentAttemptPayload>
          }
          aggregate: {
            args: Prisma.AssessmentAttemptAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssessmentAttempt>
          }
          groupBy: {
            args: Prisma.AssessmentAttemptGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssessmentAttemptGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssessmentAttemptCountArgs<ExtArgs>
            result: $Utils.Optional<AssessmentAttemptCountAggregateOutputType> | number
          }
        }
      }
      Setting: {
        payload: Prisma.$SettingPayload<ExtArgs>
        fields: Prisma.SettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          findFirst: {
            args: Prisma.SettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          findMany: {
            args: Prisma.SettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>[]
          }
          create: {
            args: Prisma.SettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          createMany: {
            args: Prisma.SettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SettingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>[]
          }
          delete: {
            args: Prisma.SettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          update: {
            args: Prisma.SettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          deleteMany: {
            args: Prisma.SettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          aggregate: {
            args: Prisma.SettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSetting>
          }
          groupBy: {
            args: Prisma.SettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<SettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.SettingCountArgs<ExtArgs>
            result: $Utils.Optional<SettingCountAggregateOutputType> | number
          }
        }
      }
      CourseReview: {
        payload: Prisma.$CourseReviewPayload<ExtArgs>
        fields: Prisma.CourseReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseReviewPayload>
          }
          findFirst: {
            args: Prisma.CourseReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseReviewPayload>
          }
          findMany: {
            args: Prisma.CourseReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseReviewPayload>[]
          }
          create: {
            args: Prisma.CourseReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseReviewPayload>
          }
          createMany: {
            args: Prisma.CourseReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseReviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseReviewPayload>[]
          }
          delete: {
            args: Prisma.CourseReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseReviewPayload>
          }
          update: {
            args: Prisma.CourseReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseReviewPayload>
          }
          deleteMany: {
            args: Prisma.CourseReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CourseReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseReviewPayload>
          }
          aggregate: {
            args: Prisma.CourseReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourseReview>
          }
          groupBy: {
            args: Prisma.CourseReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseReviewCountArgs<ExtArgs>
            result: $Utils.Optional<CourseReviewCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    createdCourses: number
    enrollments: number
    assessmentAttempts: number
    chapterProgress: number
    courseReviews: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdCourses?: boolean | UserCountOutputTypeCountCreatedCoursesArgs
    enrollments?: boolean | UserCountOutputTypeCountEnrollmentsArgs
    assessmentAttempts?: boolean | UserCountOutputTypeCountAssessmentAttemptsArgs
    chapterProgress?: boolean | UserCountOutputTypeCountChapterProgressArgs
    courseReviews?: boolean | UserCountOutputTypeCountCourseReviewsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssessmentAttemptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssessmentAttemptWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChapterProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChapterProgressWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCourseReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseReviewWhereInput
  }


  /**
   * Count Type CollegeCountOutputType
   */

  export type CollegeCountOutputType = {
    departments: number
    Registration: number
    CoursesAssigned: number
    AssessmentAttempt: number
  }

  export type CollegeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    departments?: boolean | CollegeCountOutputTypeCountDepartmentsArgs
    Registration?: boolean | CollegeCountOutputTypeCountRegistrationArgs
    CoursesAssigned?: boolean | CollegeCountOutputTypeCountCoursesAssignedArgs
    AssessmentAttempt?: boolean | CollegeCountOutputTypeCountAssessmentAttemptArgs
  }

  // Custom InputTypes
  /**
   * CollegeCountOutputType without action
   */
  export type CollegeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CollegeCountOutputType
     */
    select?: CollegeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CollegeCountOutputType without action
   */
  export type CollegeCountOutputTypeCountDepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
  }

  /**
   * CollegeCountOutputType without action
   */
  export type CollegeCountOutputTypeCountRegistrationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegistrationWhereInput
  }

  /**
   * CollegeCountOutputType without action
   */
  export type CollegeCountOutputTypeCountCoursesAssignedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoursesAssignedWhereInput
  }

  /**
   * CollegeCountOutputType without action
   */
  export type CollegeCountOutputTypeCountAssessmentAttemptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssessmentAttemptWhereInput
  }


  /**
   * Count Type DepartmentCountOutputType
   */

  export type DepartmentCountOutputType = {
    Registration: number
    CoursesAssigned: number
    Enrollment: number
    AssessmentAttempt: number
  }

  export type DepartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Registration?: boolean | DepartmentCountOutputTypeCountRegistrationArgs
    CoursesAssigned?: boolean | DepartmentCountOutputTypeCountCoursesAssignedArgs
    Enrollment?: boolean | DepartmentCountOutputTypeCountEnrollmentArgs
    AssessmentAttempt?: boolean | DepartmentCountOutputTypeCountAssessmentAttemptArgs
  }

  // Custom InputTypes
  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     */
    select?: DepartmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountRegistrationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegistrationWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountCoursesAssignedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoursesAssignedWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountEnrollmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountAssessmentAttemptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssessmentAttemptWhereInput
  }


  /**
   * Count Type CourseCountOutputType
   */

  export type CourseCountOutputType = {
    enrollments: number
    assessments: number
    chapters: number
    reviews: number
    CoursesAssigned: number
    AssessmentAttempt: number
  }

  export type CourseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    enrollments?: boolean | CourseCountOutputTypeCountEnrollmentsArgs
    assessments?: boolean | CourseCountOutputTypeCountAssessmentsArgs
    chapters?: boolean | CourseCountOutputTypeCountChaptersArgs
    reviews?: boolean | CourseCountOutputTypeCountReviewsArgs
    CoursesAssigned?: boolean | CourseCountOutputTypeCountCoursesAssignedArgs
    AssessmentAttempt?: boolean | CourseCountOutputTypeCountAssessmentAttemptArgs
  }

  // Custom InputTypes
  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCountOutputType
     */
    select?: CourseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountAssessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssessmentWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountChaptersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChapterWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseReviewWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountCoursesAssignedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoursesAssignedWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountAssessmentAttemptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssessmentAttemptWhereInput
  }


  /**
   * Count Type ChapterCountOutputType
   */

  export type ChapterCountOutputType = {
    assessments: number
    progress: number
  }

  export type ChapterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assessments?: boolean | ChapterCountOutputTypeCountAssessmentsArgs
    progress?: boolean | ChapterCountOutputTypeCountProgressArgs
  }

  // Custom InputTypes
  /**
   * ChapterCountOutputType without action
   */
  export type ChapterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterCountOutputType
     */
    select?: ChapterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChapterCountOutputType without action
   */
  export type ChapterCountOutputTypeCountAssessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssessmentWhereInput
  }

  /**
   * ChapterCountOutputType without action
   */
  export type ChapterCountOutputTypeCountProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChapterProgressWhereInput
  }


  /**
   * Count Type AssessmentCountOutputType
   */

  export type AssessmentCountOutputType = {
    questions: number
    attempts: number
  }

  export type AssessmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | AssessmentCountOutputTypeCountQuestionsArgs
    attempts?: boolean | AssessmentCountOutputTypeCountAttemptsArgs
  }

  // Custom InputTypes
  /**
   * AssessmentCountOutputType without action
   */
  export type AssessmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentCountOutputType
     */
    select?: AssessmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AssessmentCountOutputType without action
   */
  export type AssessmentCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssessmentQuestionWhereInput
  }

  /**
   * AssessmentCountOutputType without action
   */
  export type AssessmentCountOutputTypeCountAttemptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssessmentAttemptWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    tokenVersion: number | null
  }

  export type UserSumAggregateOutputType = {
    tokenVersion: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    authProvider: string | null
    role: string | null
    tokenVersion: number | null
    isEmailVerified: boolean | null
    emailVerificationToken: string | null
    emailVerificationExpires: Date | null
    passwordResetToken: string | null
    passwordResetExpires: Date | null
    lastLogin: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    fullName: string | null
    year: string | null
    branch: string | null
    mobile: string | null
    mustChangePassword: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    authProvider: string | null
    role: string | null
    tokenVersion: number | null
    isEmailVerified: boolean | null
    emailVerificationToken: string | null
    emailVerificationExpires: Date | null
    passwordResetToken: string | null
    passwordResetExpires: Date | null
    lastLogin: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    fullName: string | null
    year: string | null
    branch: string | null
    mobile: string | null
    mustChangePassword: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    authProvider: number
    role: number
    tokenVersion: number
    isEmailVerified: number
    emailVerificationToken: number
    emailVerificationExpires: number
    passwordResetToken: number
    passwordResetExpires: number
    lastLogin: number
    isActive: number
    createdAt: number
    updatedAt: number
    fullName: number
    year: number
    branch: number
    mobile: number
    mustChangePassword: number
    permissions: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    tokenVersion?: true
  }

  export type UserSumAggregateInputType = {
    tokenVersion?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    authProvider?: true
    role?: true
    tokenVersion?: true
    isEmailVerified?: true
    emailVerificationToken?: true
    emailVerificationExpires?: true
    passwordResetToken?: true
    passwordResetExpires?: true
    lastLogin?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    fullName?: true
    year?: true
    branch?: true
    mobile?: true
    mustChangePassword?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    authProvider?: true
    role?: true
    tokenVersion?: true
    isEmailVerified?: true
    emailVerificationToken?: true
    emailVerificationExpires?: true
    passwordResetToken?: true
    passwordResetExpires?: true
    lastLogin?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    fullName?: true
    year?: true
    branch?: true
    mobile?: true
    mustChangePassword?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    authProvider?: true
    role?: true
    tokenVersion?: true
    isEmailVerified?: true
    emailVerificationToken?: true
    emailVerificationExpires?: true
    passwordResetToken?: true
    passwordResetExpires?: true
    lastLogin?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    fullName?: true
    year?: true
    branch?: true
    mobile?: true
    mustChangePassword?: true
    permissions?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string | null
    authProvider: string
    role: string
    tokenVersion: number
    isEmailVerified: boolean
    emailVerificationToken: string | null
    emailVerificationExpires: Date | null
    passwordResetToken: string | null
    passwordResetExpires: Date | null
    lastLogin: Date | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    fullName: string
    year: string | null
    branch: string | null
    mobile: string | null
    mustChangePassword: boolean
    permissions: JsonValue
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    authProvider?: boolean
    role?: boolean
    tokenVersion?: boolean
    isEmailVerified?: boolean
    emailVerificationToken?: boolean
    emailVerificationExpires?: boolean
    passwordResetToken?: boolean
    passwordResetExpires?: boolean
    lastLogin?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fullName?: boolean
    year?: boolean
    branch?: boolean
    mobile?: boolean
    mustChangePassword?: boolean
    permissions?: boolean
    createdCourses?: boolean | User$createdCoursesArgs<ExtArgs>
    enrollments?: boolean | User$enrollmentsArgs<ExtArgs>
    assessmentAttempts?: boolean | User$assessmentAttemptsArgs<ExtArgs>
    chapterProgress?: boolean | User$chapterProgressArgs<ExtArgs>
    courseReviews?: boolean | User$courseReviewsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    authProvider?: boolean
    role?: boolean
    tokenVersion?: boolean
    isEmailVerified?: boolean
    emailVerificationToken?: boolean
    emailVerificationExpires?: boolean
    passwordResetToken?: boolean
    passwordResetExpires?: boolean
    lastLogin?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fullName?: boolean
    year?: boolean
    branch?: boolean
    mobile?: boolean
    mustChangePassword?: boolean
    permissions?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    authProvider?: boolean
    role?: boolean
    tokenVersion?: boolean
    isEmailVerified?: boolean
    emailVerificationToken?: boolean
    emailVerificationExpires?: boolean
    passwordResetToken?: boolean
    passwordResetExpires?: boolean
    lastLogin?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fullName?: boolean
    year?: boolean
    branch?: boolean
    mobile?: boolean
    mustChangePassword?: boolean
    permissions?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdCourses?: boolean | User$createdCoursesArgs<ExtArgs>
    enrollments?: boolean | User$enrollmentsArgs<ExtArgs>
    assessmentAttempts?: boolean | User$assessmentAttemptsArgs<ExtArgs>
    chapterProgress?: boolean | User$chapterProgressArgs<ExtArgs>
    courseReviews?: boolean | User$courseReviewsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      createdCourses: Prisma.$CoursePayload<ExtArgs>[]
      enrollments: Prisma.$EnrollmentPayload<ExtArgs>[]
      assessmentAttempts: Prisma.$AssessmentAttemptPayload<ExtArgs>[]
      chapterProgress: Prisma.$ChapterProgressPayload<ExtArgs>[]
      courseReviews: Prisma.$CourseReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string | null
      authProvider: string
      role: string
      tokenVersion: number
      isEmailVerified: boolean
      emailVerificationToken: string | null
      emailVerificationExpires: Date | null
      passwordResetToken: string | null
      passwordResetExpires: Date | null
      lastLogin: Date | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      fullName: string
      year: string | null
      branch: string | null
      mobile: string | null
      mustChangePassword: boolean
      permissions: Prisma.JsonValue
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdCourses<T extends User$createdCoursesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdCoursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany"> | Null>
    enrollments<T extends User$enrollmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$enrollmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findMany"> | Null>
    assessmentAttempts<T extends User$assessmentAttemptsArgs<ExtArgs> = {}>(args?: Subset<T, User$assessmentAttemptsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentAttemptPayload<ExtArgs>, T, "findMany"> | Null>
    chapterProgress<T extends User$chapterProgressArgs<ExtArgs> = {}>(args?: Subset<T, User$chapterProgressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChapterProgressPayload<ExtArgs>, T, "findMany"> | Null>
    courseReviews<T extends User$courseReviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$courseReviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseReviewPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly authProvider: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly tokenVersion: FieldRef<"User", 'Int'>
    readonly isEmailVerified: FieldRef<"User", 'Boolean'>
    readonly emailVerificationToken: FieldRef<"User", 'String'>
    readonly emailVerificationExpires: FieldRef<"User", 'DateTime'>
    readonly passwordResetToken: FieldRef<"User", 'String'>
    readonly passwordResetExpires: FieldRef<"User", 'DateTime'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly fullName: FieldRef<"User", 'String'>
    readonly year: FieldRef<"User", 'String'>
    readonly branch: FieldRef<"User", 'String'>
    readonly mobile: FieldRef<"User", 'String'>
    readonly mustChangePassword: FieldRef<"User", 'Boolean'>
    readonly permissions: FieldRef<"User", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.createdCourses
   */
  export type User$createdCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * User.enrollments
   */
  export type User$enrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    where?: EnrollmentWhereInput
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    cursor?: EnrollmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * User.assessmentAttempts
   */
  export type User$assessmentAttemptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentAttempt
     */
    select?: AssessmentAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentAttemptInclude<ExtArgs> | null
    where?: AssessmentAttemptWhereInput
    orderBy?: AssessmentAttemptOrderByWithRelationInput | AssessmentAttemptOrderByWithRelationInput[]
    cursor?: AssessmentAttemptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssessmentAttemptScalarFieldEnum | AssessmentAttemptScalarFieldEnum[]
  }

  /**
   * User.chapterProgress
   */
  export type User$chapterProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterProgress
     */
    select?: ChapterProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterProgressInclude<ExtArgs> | null
    where?: ChapterProgressWhereInput
    orderBy?: ChapterProgressOrderByWithRelationInput | ChapterProgressOrderByWithRelationInput[]
    cursor?: ChapterProgressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChapterProgressScalarFieldEnum | ChapterProgressScalarFieldEnum[]
  }

  /**
   * User.courseReviews
   */
  export type User$courseReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseReview
     */
    select?: CourseReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseReviewInclude<ExtArgs> | null
    where?: CourseReviewWhereInput
    orderBy?: CourseReviewOrderByWithRelationInput | CourseReviewOrderByWithRelationInput[]
    cursor?: CourseReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseReviewScalarFieldEnum | CourseReviewScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Registration
   */

  export type AggregateRegistration = {
    _count: RegistrationCountAggregateOutputType | null
    _min: RegistrationMinAggregateOutputType | null
    _max: RegistrationMaxAggregateOutputType | null
  }

  export type RegistrationMinAggregateOutputType = {
    id: string | null
    fullName: string | null
    email: string | null
    year: string | null
    branch: string | null
    academicYear: string | null
    rollNumber: string | null
    collegeId: string | null
    departmentId: string | null
    role: string | null
    status: string | null
    otpHash: string | null
    otpExpires: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RegistrationMaxAggregateOutputType = {
    id: string | null
    fullName: string | null
    email: string | null
    year: string | null
    branch: string | null
    academicYear: string | null
    rollNumber: string | null
    collegeId: string | null
    departmentId: string | null
    role: string | null
    status: string | null
    otpHash: string | null
    otpExpires: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RegistrationCountAggregateOutputType = {
    id: number
    fullName: number
    email: number
    year: number
    branch: number
    academicYear: number
    rollNumber: number
    collegeId: number
    departmentId: number
    role: number
    status: number
    otpHash: number
    otpExpires: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RegistrationMinAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    year?: true
    branch?: true
    academicYear?: true
    rollNumber?: true
    collegeId?: true
    departmentId?: true
    role?: true
    status?: true
    otpHash?: true
    otpExpires?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RegistrationMaxAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    year?: true
    branch?: true
    academicYear?: true
    rollNumber?: true
    collegeId?: true
    departmentId?: true
    role?: true
    status?: true
    otpHash?: true
    otpExpires?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RegistrationCountAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    year?: true
    branch?: true
    academicYear?: true
    rollNumber?: true
    collegeId?: true
    departmentId?: true
    role?: true
    status?: true
    otpHash?: true
    otpExpires?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RegistrationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Registration to aggregate.
     */
    where?: RegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Registrations to fetch.
     */
    orderBy?: RegistrationOrderByWithRelationInput | RegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Registrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Registrations
    **/
    _count?: true | RegistrationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegistrationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegistrationMaxAggregateInputType
  }

  export type GetRegistrationAggregateType<T extends RegistrationAggregateArgs> = {
        [P in keyof T & keyof AggregateRegistration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegistration[P]>
      : GetScalarType<T[P], AggregateRegistration[P]>
  }




  export type RegistrationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegistrationWhereInput
    orderBy?: RegistrationOrderByWithAggregationInput | RegistrationOrderByWithAggregationInput[]
    by: RegistrationScalarFieldEnum[] | RegistrationScalarFieldEnum
    having?: RegistrationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegistrationCountAggregateInputType | true
    _min?: RegistrationMinAggregateInputType
    _max?: RegistrationMaxAggregateInputType
  }

  export type RegistrationGroupByOutputType = {
    id: string
    fullName: string
    email: string
    year: string | null
    branch: string | null
    academicYear: string | null
    rollNumber: string | null
    collegeId: string
    departmentId: string | null
    role: string
    status: string
    otpHash: string | null
    otpExpires: Date | null
    createdAt: Date
    updatedAt: Date
    _count: RegistrationCountAggregateOutputType | null
    _min: RegistrationMinAggregateOutputType | null
    _max: RegistrationMaxAggregateOutputType | null
  }

  type GetRegistrationGroupByPayload<T extends RegistrationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegistrationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegistrationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegistrationGroupByOutputType[P]>
            : GetScalarType<T[P], RegistrationGroupByOutputType[P]>
        }
      >
    >


  export type RegistrationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    email?: boolean
    year?: boolean
    branch?: boolean
    academicYear?: boolean
    rollNumber?: boolean
    collegeId?: boolean
    departmentId?: boolean
    role?: boolean
    status?: boolean
    otpHash?: boolean
    otpExpires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    college?: boolean | CollegeDefaultArgs<ExtArgs>
    department?: boolean | Registration$departmentArgs<ExtArgs>
  }, ExtArgs["result"]["registration"]>

  export type RegistrationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    email?: boolean
    year?: boolean
    branch?: boolean
    academicYear?: boolean
    rollNumber?: boolean
    collegeId?: boolean
    departmentId?: boolean
    role?: boolean
    status?: boolean
    otpHash?: boolean
    otpExpires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    college?: boolean | CollegeDefaultArgs<ExtArgs>
    department?: boolean | Registration$departmentArgs<ExtArgs>
  }, ExtArgs["result"]["registration"]>

  export type RegistrationSelectScalar = {
    id?: boolean
    fullName?: boolean
    email?: boolean
    year?: boolean
    branch?: boolean
    academicYear?: boolean
    rollNumber?: boolean
    collegeId?: boolean
    departmentId?: boolean
    role?: boolean
    status?: boolean
    otpHash?: boolean
    otpExpires?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RegistrationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    college?: boolean | CollegeDefaultArgs<ExtArgs>
    department?: boolean | Registration$departmentArgs<ExtArgs>
  }
  export type RegistrationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    college?: boolean | CollegeDefaultArgs<ExtArgs>
    department?: boolean | Registration$departmentArgs<ExtArgs>
  }

  export type $RegistrationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Registration"
    objects: {
      college: Prisma.$CollegePayload<ExtArgs>
      department: Prisma.$DepartmentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullName: string
      email: string
      year: string | null
      branch: string | null
      academicYear: string | null
      rollNumber: string | null
      collegeId: string
      departmentId: string | null
      role: string
      status: string
      otpHash: string | null
      otpExpires: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["registration"]>
    composites: {}
  }

  type RegistrationGetPayload<S extends boolean | null | undefined | RegistrationDefaultArgs> = $Result.GetResult<Prisma.$RegistrationPayload, S>

  type RegistrationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RegistrationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RegistrationCountAggregateInputType | true
    }

  export interface RegistrationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Registration'], meta: { name: 'Registration' } }
    /**
     * Find zero or one Registration that matches the filter.
     * @param {RegistrationFindUniqueArgs} args - Arguments to find a Registration
     * @example
     * // Get one Registration
     * const registration = await prisma.registration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RegistrationFindUniqueArgs>(args: SelectSubset<T, RegistrationFindUniqueArgs<ExtArgs>>): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Registration that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RegistrationFindUniqueOrThrowArgs} args - Arguments to find a Registration
     * @example
     * // Get one Registration
     * const registration = await prisma.registration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RegistrationFindUniqueOrThrowArgs>(args: SelectSubset<T, RegistrationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Registration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationFindFirstArgs} args - Arguments to find a Registration
     * @example
     * // Get one Registration
     * const registration = await prisma.registration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RegistrationFindFirstArgs>(args?: SelectSubset<T, RegistrationFindFirstArgs<ExtArgs>>): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Registration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationFindFirstOrThrowArgs} args - Arguments to find a Registration
     * @example
     * // Get one Registration
     * const registration = await prisma.registration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RegistrationFindFirstOrThrowArgs>(args?: SelectSubset<T, RegistrationFindFirstOrThrowArgs<ExtArgs>>): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Registrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Registrations
     * const registrations = await prisma.registration.findMany()
     * 
     * // Get first 10 Registrations
     * const registrations = await prisma.registration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const registrationWithIdOnly = await prisma.registration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RegistrationFindManyArgs>(args?: SelectSubset<T, RegistrationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Registration.
     * @param {RegistrationCreateArgs} args - Arguments to create a Registration.
     * @example
     * // Create one Registration
     * const Registration = await prisma.registration.create({
     *   data: {
     *     // ... data to create a Registration
     *   }
     * })
     * 
     */
    create<T extends RegistrationCreateArgs>(args: SelectSubset<T, RegistrationCreateArgs<ExtArgs>>): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Registrations.
     * @param {RegistrationCreateManyArgs} args - Arguments to create many Registrations.
     * @example
     * // Create many Registrations
     * const registration = await prisma.registration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RegistrationCreateManyArgs>(args?: SelectSubset<T, RegistrationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Registrations and returns the data saved in the database.
     * @param {RegistrationCreateManyAndReturnArgs} args - Arguments to create many Registrations.
     * @example
     * // Create many Registrations
     * const registration = await prisma.registration.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Registrations and only return the `id`
     * const registrationWithIdOnly = await prisma.registration.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RegistrationCreateManyAndReturnArgs>(args?: SelectSubset<T, RegistrationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Registration.
     * @param {RegistrationDeleteArgs} args - Arguments to delete one Registration.
     * @example
     * // Delete one Registration
     * const Registration = await prisma.registration.delete({
     *   where: {
     *     // ... filter to delete one Registration
     *   }
     * })
     * 
     */
    delete<T extends RegistrationDeleteArgs>(args: SelectSubset<T, RegistrationDeleteArgs<ExtArgs>>): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Registration.
     * @param {RegistrationUpdateArgs} args - Arguments to update one Registration.
     * @example
     * // Update one Registration
     * const registration = await prisma.registration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RegistrationUpdateArgs>(args: SelectSubset<T, RegistrationUpdateArgs<ExtArgs>>): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Registrations.
     * @param {RegistrationDeleteManyArgs} args - Arguments to filter Registrations to delete.
     * @example
     * // Delete a few Registrations
     * const { count } = await prisma.registration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RegistrationDeleteManyArgs>(args?: SelectSubset<T, RegistrationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Registrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Registrations
     * const registration = await prisma.registration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RegistrationUpdateManyArgs>(args: SelectSubset<T, RegistrationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Registration.
     * @param {RegistrationUpsertArgs} args - Arguments to update or create a Registration.
     * @example
     * // Update or create a Registration
     * const registration = await prisma.registration.upsert({
     *   create: {
     *     // ... data to create a Registration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Registration we want to update
     *   }
     * })
     */
    upsert<T extends RegistrationUpsertArgs>(args: SelectSubset<T, RegistrationUpsertArgs<ExtArgs>>): Prisma__RegistrationClient<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Registrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationCountArgs} args - Arguments to filter Registrations to count.
     * @example
     * // Count the number of Registrations
     * const count = await prisma.registration.count({
     *   where: {
     *     // ... the filter for the Registrations we want to count
     *   }
     * })
    **/
    count<T extends RegistrationCountArgs>(
      args?: Subset<T, RegistrationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegistrationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Registration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegistrationAggregateArgs>(args: Subset<T, RegistrationAggregateArgs>): Prisma.PrismaPromise<GetRegistrationAggregateType<T>>

    /**
     * Group by Registration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegistrationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegistrationGroupByArgs['orderBy'] }
        : { orderBy?: RegistrationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegistrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegistrationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Registration model
   */
  readonly fields: RegistrationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Registration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegistrationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    college<T extends CollegeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CollegeDefaultArgs<ExtArgs>>): Prisma__CollegeClient<$Result.GetResult<Prisma.$CollegePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    department<T extends Registration$departmentArgs<ExtArgs> = {}>(args?: Subset<T, Registration$departmentArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Registration model
   */ 
  interface RegistrationFieldRefs {
    readonly id: FieldRef<"Registration", 'String'>
    readonly fullName: FieldRef<"Registration", 'String'>
    readonly email: FieldRef<"Registration", 'String'>
    readonly year: FieldRef<"Registration", 'String'>
    readonly branch: FieldRef<"Registration", 'String'>
    readonly academicYear: FieldRef<"Registration", 'String'>
    readonly rollNumber: FieldRef<"Registration", 'String'>
    readonly collegeId: FieldRef<"Registration", 'String'>
    readonly departmentId: FieldRef<"Registration", 'String'>
    readonly role: FieldRef<"Registration", 'String'>
    readonly status: FieldRef<"Registration", 'String'>
    readonly otpHash: FieldRef<"Registration", 'String'>
    readonly otpExpires: FieldRef<"Registration", 'DateTime'>
    readonly createdAt: FieldRef<"Registration", 'DateTime'>
    readonly updatedAt: FieldRef<"Registration", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Registration findUnique
   */
  export type RegistrationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationInclude<ExtArgs> | null
    /**
     * Filter, which Registration to fetch.
     */
    where: RegistrationWhereUniqueInput
  }

  /**
   * Registration findUniqueOrThrow
   */
  export type RegistrationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationInclude<ExtArgs> | null
    /**
     * Filter, which Registration to fetch.
     */
    where: RegistrationWhereUniqueInput
  }

  /**
   * Registration findFirst
   */
  export type RegistrationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationInclude<ExtArgs> | null
    /**
     * Filter, which Registration to fetch.
     */
    where?: RegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Registrations to fetch.
     */
    orderBy?: RegistrationOrderByWithRelationInput | RegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Registrations.
     */
    cursor?: RegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Registrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Registrations.
     */
    distinct?: RegistrationScalarFieldEnum | RegistrationScalarFieldEnum[]
  }

  /**
   * Registration findFirstOrThrow
   */
  export type RegistrationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationInclude<ExtArgs> | null
    /**
     * Filter, which Registration to fetch.
     */
    where?: RegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Registrations to fetch.
     */
    orderBy?: RegistrationOrderByWithRelationInput | RegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Registrations.
     */
    cursor?: RegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Registrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Registrations.
     */
    distinct?: RegistrationScalarFieldEnum | RegistrationScalarFieldEnum[]
  }

  /**
   * Registration findMany
   */
  export type RegistrationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationInclude<ExtArgs> | null
    /**
     * Filter, which Registrations to fetch.
     */
    where?: RegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Registrations to fetch.
     */
    orderBy?: RegistrationOrderByWithRelationInput | RegistrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Registrations.
     */
    cursor?: RegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Registrations.
     */
    skip?: number
    distinct?: RegistrationScalarFieldEnum | RegistrationScalarFieldEnum[]
  }

  /**
   * Registration create
   */
  export type RegistrationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationInclude<ExtArgs> | null
    /**
     * The data needed to create a Registration.
     */
    data: XOR<RegistrationCreateInput, RegistrationUncheckedCreateInput>
  }

  /**
   * Registration createMany
   */
  export type RegistrationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Registrations.
     */
    data: RegistrationCreateManyInput | RegistrationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Registration createManyAndReturn
   */
  export type RegistrationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Registrations.
     */
    data: RegistrationCreateManyInput | RegistrationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Registration update
   */
  export type RegistrationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationInclude<ExtArgs> | null
    /**
     * The data needed to update a Registration.
     */
    data: XOR<RegistrationUpdateInput, RegistrationUncheckedUpdateInput>
    /**
     * Choose, which Registration to update.
     */
    where: RegistrationWhereUniqueInput
  }

  /**
   * Registration updateMany
   */
  export type RegistrationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Registrations.
     */
    data: XOR<RegistrationUpdateManyMutationInput, RegistrationUncheckedUpdateManyInput>
    /**
     * Filter which Registrations to update
     */
    where?: RegistrationWhereInput
  }

  /**
   * Registration upsert
   */
  export type RegistrationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationInclude<ExtArgs> | null
    /**
     * The filter to search for the Registration to update in case it exists.
     */
    where: RegistrationWhereUniqueInput
    /**
     * In case the Registration found by the `where` argument doesn't exist, create a new Registration with this data.
     */
    create: XOR<RegistrationCreateInput, RegistrationUncheckedCreateInput>
    /**
     * In case the Registration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegistrationUpdateInput, RegistrationUncheckedUpdateInput>
  }

  /**
   * Registration delete
   */
  export type RegistrationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationInclude<ExtArgs> | null
    /**
     * Filter which Registration to delete.
     */
    where: RegistrationWhereUniqueInput
  }

  /**
   * Registration deleteMany
   */
  export type RegistrationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Registrations to delete
     */
    where?: RegistrationWhereInput
  }

  /**
   * Registration.department
   */
  export type Registration$departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * Registration without action
   */
  export type RegistrationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationInclude<ExtArgs> | null
  }


  /**
   * Model College
   */

  export type AggregateCollege = {
    _count: CollegeCountAggregateOutputType | null
    _avg: CollegeAvgAggregateOutputType | null
    _sum: CollegeSumAggregateOutputType | null
    _min: CollegeMinAggregateOutputType | null
    _max: CollegeMaxAggregateOutputType | null
  }

  export type CollegeAvgAggregateOutputType = {
    studentLimit: number | null
    adminLimit: number | null
    instructorLimit: number | null
  }

  export type CollegeSumAggregateOutputType = {
    studentLimit: number | null
    adminLimit: number | null
    instructorLimit: number | null
  }

  export type CollegeMinAggregateOutputType = {
    id: string | null
    contactPerson: string | null
    name: string | null
    mobileNumber: string | null
    studentLimit: number | null
    validity: Date | null
    email: string | null
    createdAt: Date | null
    updatedAt: Date | null
    adminLimit: number | null
    instructorLimit: number | null
  }

  export type CollegeMaxAggregateOutputType = {
    id: string | null
    contactPerson: string | null
    name: string | null
    mobileNumber: string | null
    studentLimit: number | null
    validity: Date | null
    email: string | null
    createdAt: Date | null
    updatedAt: Date | null
    adminLimit: number | null
    instructorLimit: number | null
  }

  export type CollegeCountAggregateOutputType = {
    id: number
    contactPerson: number
    name: number
    mobileNumber: number
    studentLimit: number
    validity: number
    email: number
    createdAt: number
    updatedAt: number
    adminLimit: number
    instructorLimit: number
    _all: number
  }


  export type CollegeAvgAggregateInputType = {
    studentLimit?: true
    adminLimit?: true
    instructorLimit?: true
  }

  export type CollegeSumAggregateInputType = {
    studentLimit?: true
    adminLimit?: true
    instructorLimit?: true
  }

  export type CollegeMinAggregateInputType = {
    id?: true
    contactPerson?: true
    name?: true
    mobileNumber?: true
    studentLimit?: true
    validity?: true
    email?: true
    createdAt?: true
    updatedAt?: true
    adminLimit?: true
    instructorLimit?: true
  }

  export type CollegeMaxAggregateInputType = {
    id?: true
    contactPerson?: true
    name?: true
    mobileNumber?: true
    studentLimit?: true
    validity?: true
    email?: true
    createdAt?: true
    updatedAt?: true
    adminLimit?: true
    instructorLimit?: true
  }

  export type CollegeCountAggregateInputType = {
    id?: true
    contactPerson?: true
    name?: true
    mobileNumber?: true
    studentLimit?: true
    validity?: true
    email?: true
    createdAt?: true
    updatedAt?: true
    adminLimit?: true
    instructorLimit?: true
    _all?: true
  }

  export type CollegeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which College to aggregate.
     */
    where?: CollegeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colleges to fetch.
     */
    orderBy?: CollegeOrderByWithRelationInput | CollegeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CollegeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colleges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colleges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Colleges
    **/
    _count?: true | CollegeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CollegeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CollegeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CollegeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CollegeMaxAggregateInputType
  }

  export type GetCollegeAggregateType<T extends CollegeAggregateArgs> = {
        [P in keyof T & keyof AggregateCollege]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCollege[P]>
      : GetScalarType<T[P], AggregateCollege[P]>
  }




  export type CollegeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CollegeWhereInput
    orderBy?: CollegeOrderByWithAggregationInput | CollegeOrderByWithAggregationInput[]
    by: CollegeScalarFieldEnum[] | CollegeScalarFieldEnum
    having?: CollegeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CollegeCountAggregateInputType | true
    _avg?: CollegeAvgAggregateInputType
    _sum?: CollegeSumAggregateInputType
    _min?: CollegeMinAggregateInputType
    _max?: CollegeMaxAggregateInputType
  }

  export type CollegeGroupByOutputType = {
    id: string
    contactPerson: string
    name: string
    mobileNumber: string
    studentLimit: number
    validity: Date
    email: string
    createdAt: Date
    updatedAt: Date
    adminLimit: number
    instructorLimit: number
    _count: CollegeCountAggregateOutputType | null
    _avg: CollegeAvgAggregateOutputType | null
    _sum: CollegeSumAggregateOutputType | null
    _min: CollegeMinAggregateOutputType | null
    _max: CollegeMaxAggregateOutputType | null
  }

  type GetCollegeGroupByPayload<T extends CollegeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CollegeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CollegeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CollegeGroupByOutputType[P]>
            : GetScalarType<T[P], CollegeGroupByOutputType[P]>
        }
      >
    >


  export type CollegeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contactPerson?: boolean
    name?: boolean
    mobileNumber?: boolean
    studentLimit?: boolean
    validity?: boolean
    email?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminLimit?: boolean
    instructorLimit?: boolean
    departments?: boolean | College$departmentsArgs<ExtArgs>
    Registration?: boolean | College$RegistrationArgs<ExtArgs>
    CoursesAssigned?: boolean | College$CoursesAssignedArgs<ExtArgs>
    AssessmentAttempt?: boolean | College$AssessmentAttemptArgs<ExtArgs>
    _count?: boolean | CollegeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["college"]>

  export type CollegeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    contactPerson?: boolean
    name?: boolean
    mobileNumber?: boolean
    studentLimit?: boolean
    validity?: boolean
    email?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminLimit?: boolean
    instructorLimit?: boolean
  }, ExtArgs["result"]["college"]>

  export type CollegeSelectScalar = {
    id?: boolean
    contactPerson?: boolean
    name?: boolean
    mobileNumber?: boolean
    studentLimit?: boolean
    validity?: boolean
    email?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    adminLimit?: boolean
    instructorLimit?: boolean
  }

  export type CollegeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    departments?: boolean | College$departmentsArgs<ExtArgs>
    Registration?: boolean | College$RegistrationArgs<ExtArgs>
    CoursesAssigned?: boolean | College$CoursesAssignedArgs<ExtArgs>
    AssessmentAttempt?: boolean | College$AssessmentAttemptArgs<ExtArgs>
    _count?: boolean | CollegeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CollegeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CollegePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "College"
    objects: {
      departments: Prisma.$DepartmentPayload<ExtArgs>[]
      Registration: Prisma.$RegistrationPayload<ExtArgs>[]
      CoursesAssigned: Prisma.$CoursesAssignedPayload<ExtArgs>[]
      AssessmentAttempt: Prisma.$AssessmentAttemptPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      contactPerson: string
      name: string
      mobileNumber: string
      studentLimit: number
      validity: Date
      email: string
      createdAt: Date
      updatedAt: Date
      adminLimit: number
      instructorLimit: number
    }, ExtArgs["result"]["college"]>
    composites: {}
  }

  type CollegeGetPayload<S extends boolean | null | undefined | CollegeDefaultArgs> = $Result.GetResult<Prisma.$CollegePayload, S>

  type CollegeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CollegeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CollegeCountAggregateInputType | true
    }

  export interface CollegeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['College'], meta: { name: 'College' } }
    /**
     * Find zero or one College that matches the filter.
     * @param {CollegeFindUniqueArgs} args - Arguments to find a College
     * @example
     * // Get one College
     * const college = await prisma.college.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CollegeFindUniqueArgs>(args: SelectSubset<T, CollegeFindUniqueArgs<ExtArgs>>): Prisma__CollegeClient<$Result.GetResult<Prisma.$CollegePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one College that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CollegeFindUniqueOrThrowArgs} args - Arguments to find a College
     * @example
     * // Get one College
     * const college = await prisma.college.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CollegeFindUniqueOrThrowArgs>(args: SelectSubset<T, CollegeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CollegeClient<$Result.GetResult<Prisma.$CollegePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first College that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollegeFindFirstArgs} args - Arguments to find a College
     * @example
     * // Get one College
     * const college = await prisma.college.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CollegeFindFirstArgs>(args?: SelectSubset<T, CollegeFindFirstArgs<ExtArgs>>): Prisma__CollegeClient<$Result.GetResult<Prisma.$CollegePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first College that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollegeFindFirstOrThrowArgs} args - Arguments to find a College
     * @example
     * // Get one College
     * const college = await prisma.college.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CollegeFindFirstOrThrowArgs>(args?: SelectSubset<T, CollegeFindFirstOrThrowArgs<ExtArgs>>): Prisma__CollegeClient<$Result.GetResult<Prisma.$CollegePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Colleges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollegeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Colleges
     * const colleges = await prisma.college.findMany()
     * 
     * // Get first 10 Colleges
     * const colleges = await prisma.college.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const collegeWithIdOnly = await prisma.college.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CollegeFindManyArgs>(args?: SelectSubset<T, CollegeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollegePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a College.
     * @param {CollegeCreateArgs} args - Arguments to create a College.
     * @example
     * // Create one College
     * const College = await prisma.college.create({
     *   data: {
     *     // ... data to create a College
     *   }
     * })
     * 
     */
    create<T extends CollegeCreateArgs>(args: SelectSubset<T, CollegeCreateArgs<ExtArgs>>): Prisma__CollegeClient<$Result.GetResult<Prisma.$CollegePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Colleges.
     * @param {CollegeCreateManyArgs} args - Arguments to create many Colleges.
     * @example
     * // Create many Colleges
     * const college = await prisma.college.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CollegeCreateManyArgs>(args?: SelectSubset<T, CollegeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Colleges and returns the data saved in the database.
     * @param {CollegeCreateManyAndReturnArgs} args - Arguments to create many Colleges.
     * @example
     * // Create many Colleges
     * const college = await prisma.college.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Colleges and only return the `id`
     * const collegeWithIdOnly = await prisma.college.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CollegeCreateManyAndReturnArgs>(args?: SelectSubset<T, CollegeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CollegePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a College.
     * @param {CollegeDeleteArgs} args - Arguments to delete one College.
     * @example
     * // Delete one College
     * const College = await prisma.college.delete({
     *   where: {
     *     // ... filter to delete one College
     *   }
     * })
     * 
     */
    delete<T extends CollegeDeleteArgs>(args: SelectSubset<T, CollegeDeleteArgs<ExtArgs>>): Prisma__CollegeClient<$Result.GetResult<Prisma.$CollegePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one College.
     * @param {CollegeUpdateArgs} args - Arguments to update one College.
     * @example
     * // Update one College
     * const college = await prisma.college.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CollegeUpdateArgs>(args: SelectSubset<T, CollegeUpdateArgs<ExtArgs>>): Prisma__CollegeClient<$Result.GetResult<Prisma.$CollegePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Colleges.
     * @param {CollegeDeleteManyArgs} args - Arguments to filter Colleges to delete.
     * @example
     * // Delete a few Colleges
     * const { count } = await prisma.college.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CollegeDeleteManyArgs>(args?: SelectSubset<T, CollegeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Colleges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollegeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Colleges
     * const college = await prisma.college.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CollegeUpdateManyArgs>(args: SelectSubset<T, CollegeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one College.
     * @param {CollegeUpsertArgs} args - Arguments to update or create a College.
     * @example
     * // Update or create a College
     * const college = await prisma.college.upsert({
     *   create: {
     *     // ... data to create a College
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the College we want to update
     *   }
     * })
     */
    upsert<T extends CollegeUpsertArgs>(args: SelectSubset<T, CollegeUpsertArgs<ExtArgs>>): Prisma__CollegeClient<$Result.GetResult<Prisma.$CollegePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Colleges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollegeCountArgs} args - Arguments to filter Colleges to count.
     * @example
     * // Count the number of Colleges
     * const count = await prisma.college.count({
     *   where: {
     *     // ... the filter for the Colleges we want to count
     *   }
     * })
    **/
    count<T extends CollegeCountArgs>(
      args?: Subset<T, CollegeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CollegeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a College.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollegeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CollegeAggregateArgs>(args: Subset<T, CollegeAggregateArgs>): Prisma.PrismaPromise<GetCollegeAggregateType<T>>

    /**
     * Group by College.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CollegeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CollegeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CollegeGroupByArgs['orderBy'] }
        : { orderBy?: CollegeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CollegeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCollegeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the College model
   */
  readonly fields: CollegeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for College.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CollegeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    departments<T extends College$departmentsArgs<ExtArgs> = {}>(args?: Subset<T, College$departmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany"> | Null>
    Registration<T extends College$RegistrationArgs<ExtArgs> = {}>(args?: Subset<T, College$RegistrationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "findMany"> | Null>
    CoursesAssigned<T extends College$CoursesAssignedArgs<ExtArgs> = {}>(args?: Subset<T, College$CoursesAssignedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursesAssignedPayload<ExtArgs>, T, "findMany"> | Null>
    AssessmentAttempt<T extends College$AssessmentAttemptArgs<ExtArgs> = {}>(args?: Subset<T, College$AssessmentAttemptArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentAttemptPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the College model
   */ 
  interface CollegeFieldRefs {
    readonly id: FieldRef<"College", 'String'>
    readonly contactPerson: FieldRef<"College", 'String'>
    readonly name: FieldRef<"College", 'String'>
    readonly mobileNumber: FieldRef<"College", 'String'>
    readonly studentLimit: FieldRef<"College", 'Int'>
    readonly validity: FieldRef<"College", 'DateTime'>
    readonly email: FieldRef<"College", 'String'>
    readonly createdAt: FieldRef<"College", 'DateTime'>
    readonly updatedAt: FieldRef<"College", 'DateTime'>
    readonly adminLimit: FieldRef<"College", 'Int'>
    readonly instructorLimit: FieldRef<"College", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * College findUnique
   */
  export type CollegeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the College
     */
    select?: CollegeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollegeInclude<ExtArgs> | null
    /**
     * Filter, which College to fetch.
     */
    where: CollegeWhereUniqueInput
  }

  /**
   * College findUniqueOrThrow
   */
  export type CollegeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the College
     */
    select?: CollegeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollegeInclude<ExtArgs> | null
    /**
     * Filter, which College to fetch.
     */
    where: CollegeWhereUniqueInput
  }

  /**
   * College findFirst
   */
  export type CollegeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the College
     */
    select?: CollegeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollegeInclude<ExtArgs> | null
    /**
     * Filter, which College to fetch.
     */
    where?: CollegeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colleges to fetch.
     */
    orderBy?: CollegeOrderByWithRelationInput | CollegeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Colleges.
     */
    cursor?: CollegeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colleges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colleges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Colleges.
     */
    distinct?: CollegeScalarFieldEnum | CollegeScalarFieldEnum[]
  }

  /**
   * College findFirstOrThrow
   */
  export type CollegeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the College
     */
    select?: CollegeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollegeInclude<ExtArgs> | null
    /**
     * Filter, which College to fetch.
     */
    where?: CollegeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colleges to fetch.
     */
    orderBy?: CollegeOrderByWithRelationInput | CollegeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Colleges.
     */
    cursor?: CollegeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colleges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colleges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Colleges.
     */
    distinct?: CollegeScalarFieldEnum | CollegeScalarFieldEnum[]
  }

  /**
   * College findMany
   */
  export type CollegeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the College
     */
    select?: CollegeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollegeInclude<ExtArgs> | null
    /**
     * Filter, which Colleges to fetch.
     */
    where?: CollegeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colleges to fetch.
     */
    orderBy?: CollegeOrderByWithRelationInput | CollegeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Colleges.
     */
    cursor?: CollegeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colleges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colleges.
     */
    skip?: number
    distinct?: CollegeScalarFieldEnum | CollegeScalarFieldEnum[]
  }

  /**
   * College create
   */
  export type CollegeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the College
     */
    select?: CollegeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollegeInclude<ExtArgs> | null
    /**
     * The data needed to create a College.
     */
    data: XOR<CollegeCreateInput, CollegeUncheckedCreateInput>
  }

  /**
   * College createMany
   */
  export type CollegeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Colleges.
     */
    data: CollegeCreateManyInput | CollegeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * College createManyAndReturn
   */
  export type CollegeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the College
     */
    select?: CollegeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Colleges.
     */
    data: CollegeCreateManyInput | CollegeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * College update
   */
  export type CollegeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the College
     */
    select?: CollegeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollegeInclude<ExtArgs> | null
    /**
     * The data needed to update a College.
     */
    data: XOR<CollegeUpdateInput, CollegeUncheckedUpdateInput>
    /**
     * Choose, which College to update.
     */
    where: CollegeWhereUniqueInput
  }

  /**
   * College updateMany
   */
  export type CollegeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Colleges.
     */
    data: XOR<CollegeUpdateManyMutationInput, CollegeUncheckedUpdateManyInput>
    /**
     * Filter which Colleges to update
     */
    where?: CollegeWhereInput
  }

  /**
   * College upsert
   */
  export type CollegeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the College
     */
    select?: CollegeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollegeInclude<ExtArgs> | null
    /**
     * The filter to search for the College to update in case it exists.
     */
    where: CollegeWhereUniqueInput
    /**
     * In case the College found by the `where` argument doesn't exist, create a new College with this data.
     */
    create: XOR<CollegeCreateInput, CollegeUncheckedCreateInput>
    /**
     * In case the College was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CollegeUpdateInput, CollegeUncheckedUpdateInput>
  }

  /**
   * College delete
   */
  export type CollegeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the College
     */
    select?: CollegeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollegeInclude<ExtArgs> | null
    /**
     * Filter which College to delete.
     */
    where: CollegeWhereUniqueInput
  }

  /**
   * College deleteMany
   */
  export type CollegeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Colleges to delete
     */
    where?: CollegeWhereInput
  }

  /**
   * College.departments
   */
  export type College$departmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    cursor?: DepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * College.Registration
   */
  export type College$RegistrationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationInclude<ExtArgs> | null
    where?: RegistrationWhereInput
    orderBy?: RegistrationOrderByWithRelationInput | RegistrationOrderByWithRelationInput[]
    cursor?: RegistrationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegistrationScalarFieldEnum | RegistrationScalarFieldEnum[]
  }

  /**
   * College.CoursesAssigned
   */
  export type College$CoursesAssignedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursesAssigned
     */
    select?: CoursesAssignedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesAssignedInclude<ExtArgs> | null
    where?: CoursesAssignedWhereInput
    orderBy?: CoursesAssignedOrderByWithRelationInput | CoursesAssignedOrderByWithRelationInput[]
    cursor?: CoursesAssignedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CoursesAssignedScalarFieldEnum | CoursesAssignedScalarFieldEnum[]
  }

  /**
   * College.AssessmentAttempt
   */
  export type College$AssessmentAttemptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentAttempt
     */
    select?: AssessmentAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentAttemptInclude<ExtArgs> | null
    where?: AssessmentAttemptWhereInput
    orderBy?: AssessmentAttemptOrderByWithRelationInput | AssessmentAttemptOrderByWithRelationInput[]
    cursor?: AssessmentAttemptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssessmentAttemptScalarFieldEnum | AssessmentAttemptScalarFieldEnum[]
  }

  /**
   * College without action
   */
  export type CollegeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the College
     */
    select?: CollegeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollegeInclude<ExtArgs> | null
  }


  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: string | null
    name: string | null
    collegeId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    collegeId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    name: number
    collegeId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DepartmentMinAggregateInputType = {
    id?: true
    name?: true
    collegeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    name?: true
    collegeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    name?: true
    collegeId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    id: string
    name: string
    collegeId: string
    createdAt: Date
    updatedAt: Date
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    collegeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    college?: boolean | CollegeDefaultArgs<ExtArgs>
    Registration?: boolean | Department$RegistrationArgs<ExtArgs>
    CoursesAssigned?: boolean | Department$CoursesAssignedArgs<ExtArgs>
    Enrollment?: boolean | Department$EnrollmentArgs<ExtArgs>
    AssessmentAttempt?: boolean | Department$AssessmentAttemptArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    collegeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    college?: boolean | CollegeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectScalar = {
    id?: boolean
    name?: boolean
    collegeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    college?: boolean | CollegeDefaultArgs<ExtArgs>
    Registration?: boolean | Department$RegistrationArgs<ExtArgs>
    CoursesAssigned?: boolean | Department$CoursesAssignedArgs<ExtArgs>
    Enrollment?: boolean | Department$EnrollmentArgs<ExtArgs>
    AssessmentAttempt?: boolean | Department$AssessmentAttemptArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    college?: boolean | CollegeDefaultArgs<ExtArgs>
  }

  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      college: Prisma.$CollegePayload<ExtArgs>
      Registration: Prisma.$RegistrationPayload<ExtArgs>[]
      CoursesAssigned: Prisma.$CoursesAssignedPayload<ExtArgs>[]
      Enrollment: Prisma.$EnrollmentPayload<ExtArgs>[]
      AssessmentAttempt: Prisma.$AssessmentAttemptPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      collegeId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["department"]>
    composites: {}
  }

  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentFindUniqueArgs>(args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Department that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentFindFirstArgs>(args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentFindManyArgs>(args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
     */
    create<T extends DepartmentCreateArgs>(args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Departments.
     * @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentCreateManyArgs>(args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Departments and returns the data saved in the database.
     * @param {DepartmentCreateManyAndReturnArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
     */
    delete<T extends DepartmentDeleteArgs>(args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentUpdateArgs>(args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentDeleteManyArgs>(args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentUpdateManyArgs>(args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentUpsertArgs>(args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    college<T extends CollegeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CollegeDefaultArgs<ExtArgs>>): Prisma__CollegeClient<$Result.GetResult<Prisma.$CollegePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Registration<T extends Department$RegistrationArgs<ExtArgs> = {}>(args?: Subset<T, Department$RegistrationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegistrationPayload<ExtArgs>, T, "findMany"> | Null>
    CoursesAssigned<T extends Department$CoursesAssignedArgs<ExtArgs> = {}>(args?: Subset<T, Department$CoursesAssignedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursesAssignedPayload<ExtArgs>, T, "findMany"> | Null>
    Enrollment<T extends Department$EnrollmentArgs<ExtArgs> = {}>(args?: Subset<T, Department$EnrollmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findMany"> | Null>
    AssessmentAttempt<T extends Department$AssessmentAttemptArgs<ExtArgs> = {}>(args?: Subset<T, Department$AssessmentAttemptArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentAttemptPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Department model
   */ 
  interface DepartmentFieldRefs {
    readonly id: FieldRef<"Department", 'String'>
    readonly name: FieldRef<"Department", 'String'>
    readonly collegeId: FieldRef<"Department", 'String'>
    readonly createdAt: FieldRef<"Department", 'DateTime'>
    readonly updatedAt: FieldRef<"Department", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }

  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Department createManyAndReturn
   */
  export type DepartmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
  }

  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }

  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
  }

  /**
   * Department.Registration
   */
  export type Department$RegistrationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Registration
     */
    select?: RegistrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegistrationInclude<ExtArgs> | null
    where?: RegistrationWhereInput
    orderBy?: RegistrationOrderByWithRelationInput | RegistrationOrderByWithRelationInput[]
    cursor?: RegistrationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegistrationScalarFieldEnum | RegistrationScalarFieldEnum[]
  }

  /**
   * Department.CoursesAssigned
   */
  export type Department$CoursesAssignedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursesAssigned
     */
    select?: CoursesAssignedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesAssignedInclude<ExtArgs> | null
    where?: CoursesAssignedWhereInput
    orderBy?: CoursesAssignedOrderByWithRelationInput | CoursesAssignedOrderByWithRelationInput[]
    cursor?: CoursesAssignedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CoursesAssignedScalarFieldEnum | CoursesAssignedScalarFieldEnum[]
  }

  /**
   * Department.Enrollment
   */
  export type Department$EnrollmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    where?: EnrollmentWhereInput
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    cursor?: EnrollmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * Department.AssessmentAttempt
   */
  export type Department$AssessmentAttemptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentAttempt
     */
    select?: AssessmentAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentAttemptInclude<ExtArgs> | null
    where?: AssessmentAttemptWhereInput
    orderBy?: AssessmentAttemptOrderByWithRelationInput | AssessmentAttemptOrderByWithRelationInput[]
    cursor?: AssessmentAttemptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssessmentAttemptScalarFieldEnum | AssessmentAttemptScalarFieldEnum[]
  }

  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
  }


  /**
   * Model Course
   */

  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseMinAggregateOutputType = {
    id: string | null
    title: string | null
    thumbnail: string | null
    status: string | null
    creatorId: string | null
    category: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    madeBySuperAdmin: boolean | null
  }

  export type CourseMaxAggregateOutputType = {
    id: string | null
    title: string | null
    thumbnail: string | null
    status: string | null
    creatorId: string | null
    category: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    madeBySuperAdmin: boolean | null
  }

  export type CourseCountAggregateOutputType = {
    id: number
    title: number
    thumbnail: number
    status: number
    creatorId: number
    category: number
    description: number
    createdAt: number
    updatedAt: number
    madeBySuperAdmin: number
    _all: number
  }


  export type CourseMinAggregateInputType = {
    id?: true
    title?: true
    thumbnail?: true
    status?: true
    creatorId?: true
    category?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    madeBySuperAdmin?: true
  }

  export type CourseMaxAggregateInputType = {
    id?: true
    title?: true
    thumbnail?: true
    status?: true
    creatorId?: true
    category?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    madeBySuperAdmin?: true
  }

  export type CourseCountAggregateInputType = {
    id?: true
    title?: true
    thumbnail?: true
    status?: true
    creatorId?: true
    category?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    madeBySuperAdmin?: true
    _all?: true
  }

  export type CourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Course to aggregate.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type CourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithAggregationInput | CourseOrderByWithAggregationInput[]
    by: CourseScalarFieldEnum[] | CourseScalarFieldEnum
    having?: CourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }

  export type CourseGroupByOutputType = {
    id: string
    title: string
    thumbnail: string | null
    status: string
    creatorId: string
    category: string | null
    description: string | null
    createdAt: Date
    updatedAt: Date
    madeBySuperAdmin: boolean
    _count: CourseCountAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends CourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type CourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    thumbnail?: boolean
    status?: boolean
    creatorId?: boolean
    category?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    madeBySuperAdmin?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    enrollments?: boolean | Course$enrollmentsArgs<ExtArgs>
    assessments?: boolean | Course$assessmentsArgs<ExtArgs>
    chapters?: boolean | Course$chaptersArgs<ExtArgs>
    reviews?: boolean | Course$reviewsArgs<ExtArgs>
    CoursesAssigned?: boolean | Course$CoursesAssignedArgs<ExtArgs>
    AssessmentAttempt?: boolean | Course$AssessmentAttemptArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    thumbnail?: boolean
    status?: boolean
    creatorId?: boolean
    category?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    madeBySuperAdmin?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectScalar = {
    id?: boolean
    title?: boolean
    thumbnail?: boolean
    status?: boolean
    creatorId?: boolean
    category?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    madeBySuperAdmin?: boolean
  }

  export type CourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    enrollments?: boolean | Course$enrollmentsArgs<ExtArgs>
    assessments?: boolean | Course$assessmentsArgs<ExtArgs>
    chapters?: boolean | Course$chaptersArgs<ExtArgs>
    reviews?: boolean | Course$reviewsArgs<ExtArgs>
    CoursesAssigned?: boolean | Course$CoursesAssignedArgs<ExtArgs>
    AssessmentAttempt?: boolean | Course$AssessmentAttemptArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CourseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Course"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs>
      enrollments: Prisma.$EnrollmentPayload<ExtArgs>[]
      assessments: Prisma.$AssessmentPayload<ExtArgs>[]
      chapters: Prisma.$ChapterPayload<ExtArgs>[]
      reviews: Prisma.$CourseReviewPayload<ExtArgs>[]
      CoursesAssigned: Prisma.$CoursesAssignedPayload<ExtArgs>[]
      AssessmentAttempt: Prisma.$AssessmentAttemptPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      thumbnail: string | null
      status: string
      creatorId: string
      category: string | null
      description: string | null
      createdAt: Date
      updatedAt: Date
      madeBySuperAdmin: boolean
    }, ExtArgs["result"]["course"]>
    composites: {}
  }

  type CourseGetPayload<S extends boolean | null | undefined | CourseDefaultArgs> = $Result.GetResult<Prisma.$CoursePayload, S>

  type CourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CourseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CourseCountAggregateInputType | true
    }

  export interface CourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Course'], meta: { name: 'Course' } }
    /**
     * Find zero or one Course that matches the filter.
     * @param {CourseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseFindUniqueArgs>(args: SelectSubset<T, CourseFindUniqueArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Course that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CourseFindUniqueOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseFindFirstArgs>(args?: SelectSubset<T, CourseFindFirstArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Course that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseWithIdOnly = await prisma.course.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourseFindManyArgs>(args?: SelectSubset<T, CourseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Course.
     * @param {CourseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
     */
    create<T extends CourseCreateArgs>(args: SelectSubset<T, CourseCreateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Courses.
     * @param {CourseCreateManyArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseCreateManyArgs>(args?: SelectSubset<T, CourseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Courses and returns the data saved in the database.
     * @param {CourseCreateManyAndReturnArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Courses and only return the `id`
     * const courseWithIdOnly = await prisma.course.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Course.
     * @param {CourseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
     */
    delete<T extends CourseDeleteArgs>(args: SelectSubset<T, CourseDeleteArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Course.
     * @param {CourseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseUpdateArgs>(args: SelectSubset<T, CourseUpdateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Courses.
     * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseDeleteManyArgs>(args?: SelectSubset<T, CourseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseUpdateManyArgs>(args: SelectSubset<T, CourseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Course.
     * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
     */
    upsert<T extends CourseUpsertArgs>(args: SelectSubset<T, CourseUpsertArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CourseCountArgs>(
      args?: Subset<T, CourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): Prisma.PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseGroupByArgs['orderBy'] }
        : { orderBy?: CourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Course model
   */
  readonly fields: CourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    enrollments<T extends Course$enrollmentsArgs<ExtArgs> = {}>(args?: Subset<T, Course$enrollmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findMany"> | Null>
    assessments<T extends Course$assessmentsArgs<ExtArgs> = {}>(args?: Subset<T, Course$assessmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findMany"> | Null>
    chapters<T extends Course$chaptersArgs<ExtArgs> = {}>(args?: Subset<T, Course$chaptersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findMany"> | Null>
    reviews<T extends Course$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, Course$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseReviewPayload<ExtArgs>, T, "findMany"> | Null>
    CoursesAssigned<T extends Course$CoursesAssignedArgs<ExtArgs> = {}>(args?: Subset<T, Course$CoursesAssignedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursesAssignedPayload<ExtArgs>, T, "findMany"> | Null>
    AssessmentAttempt<T extends Course$AssessmentAttemptArgs<ExtArgs> = {}>(args?: Subset<T, Course$AssessmentAttemptArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentAttemptPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Course model
   */ 
  interface CourseFieldRefs {
    readonly id: FieldRef<"Course", 'String'>
    readonly title: FieldRef<"Course", 'String'>
    readonly thumbnail: FieldRef<"Course", 'String'>
    readonly status: FieldRef<"Course", 'String'>
    readonly creatorId: FieldRef<"Course", 'String'>
    readonly category: FieldRef<"Course", 'String'>
    readonly description: FieldRef<"Course", 'String'>
    readonly createdAt: FieldRef<"Course", 'DateTime'>
    readonly updatedAt: FieldRef<"Course", 'DateTime'>
    readonly madeBySuperAdmin: FieldRef<"Course", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Course findUnique
   */
  export type CourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findUniqueOrThrow
   */
  export type CourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findFirst
   */
  export type CourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findFirstOrThrow
   */
  export type CourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findMany
   */
  export type CourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course create
   */
  export type CourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to create a Course.
     */
    data: XOR<CourseCreateInput, CourseUncheckedCreateInput>
  }

  /**
   * Course createMany
   */
  export type CourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Course createManyAndReturn
   */
  export type CourseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Course update
   */
  export type CourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to update a Course.
     */
    data: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
    /**
     * Choose, which Course to update.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course updateMany
   */
  export type CourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
  }

  /**
   * Course upsert
   */
  export type CourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The filter to search for the Course to update in case it exists.
     */
    where: CourseWhereUniqueInput
    /**
     * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
     */
    create: XOR<CourseCreateInput, CourseUncheckedCreateInput>
    /**
     * In case the Course was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
  }

  /**
   * Course delete
   */
  export type CourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter which Course to delete.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course deleteMany
   */
  export type CourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to delete
     */
    where?: CourseWhereInput
  }

  /**
   * Course.enrollments
   */
  export type Course$enrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    where?: EnrollmentWhereInput
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    cursor?: EnrollmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * Course.assessments
   */
  export type Course$assessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    where?: AssessmentWhereInput
    orderBy?: AssessmentOrderByWithRelationInput | AssessmentOrderByWithRelationInput[]
    cursor?: AssessmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssessmentScalarFieldEnum | AssessmentScalarFieldEnum[]
  }

  /**
   * Course.chapters
   */
  export type Course$chaptersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    where?: ChapterWhereInput
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    cursor?: ChapterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChapterScalarFieldEnum | ChapterScalarFieldEnum[]
  }

  /**
   * Course.reviews
   */
  export type Course$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseReview
     */
    select?: CourseReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseReviewInclude<ExtArgs> | null
    where?: CourseReviewWhereInput
    orderBy?: CourseReviewOrderByWithRelationInput | CourseReviewOrderByWithRelationInput[]
    cursor?: CourseReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseReviewScalarFieldEnum | CourseReviewScalarFieldEnum[]
  }

  /**
   * Course.CoursesAssigned
   */
  export type Course$CoursesAssignedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursesAssigned
     */
    select?: CoursesAssignedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesAssignedInclude<ExtArgs> | null
    where?: CoursesAssignedWhereInput
    orderBy?: CoursesAssignedOrderByWithRelationInput | CoursesAssignedOrderByWithRelationInput[]
    cursor?: CoursesAssignedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CoursesAssignedScalarFieldEnum | CoursesAssignedScalarFieldEnum[]
  }

  /**
   * Course.AssessmentAttempt
   */
  export type Course$AssessmentAttemptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentAttempt
     */
    select?: AssessmentAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentAttemptInclude<ExtArgs> | null
    where?: AssessmentAttemptWhereInput
    orderBy?: AssessmentAttemptOrderByWithRelationInput | AssessmentAttemptOrderByWithRelationInput[]
    cursor?: AssessmentAttemptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssessmentAttemptScalarFieldEnum | AssessmentAttemptScalarFieldEnum[]
  }

  /**
   * Course without action
   */
  export type CourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
  }


  /**
   * Model CoursesAssigned
   */

  export type AggregateCoursesAssigned = {
    _count: CoursesAssignedCountAggregateOutputType | null
    _avg: CoursesAssignedAvgAggregateOutputType | null
    _sum: CoursesAssignedSumAggregateOutputType | null
    _min: CoursesAssignedMinAggregateOutputType | null
    _max: CoursesAssignedMaxAggregateOutputType | null
  }

  export type CoursesAssignedAvgAggregateOutputType = {
    capacity: number | null
  }

  export type CoursesAssignedSumAggregateOutputType = {
    capacity: number | null
  }

  export type CoursesAssignedMinAggregateOutputType = {
    id: string | null
    courseId: string | null
    collegeId: string | null
    departmentId: string | null
    capacity: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CoursesAssignedMaxAggregateOutputType = {
    id: string | null
    courseId: string | null
    collegeId: string | null
    departmentId: string | null
    capacity: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CoursesAssignedCountAggregateOutputType = {
    id: number
    courseId: number
    collegeId: number
    departmentId: number
    capacity: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CoursesAssignedAvgAggregateInputType = {
    capacity?: true
  }

  export type CoursesAssignedSumAggregateInputType = {
    capacity?: true
  }

  export type CoursesAssignedMinAggregateInputType = {
    id?: true
    courseId?: true
    collegeId?: true
    departmentId?: true
    capacity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CoursesAssignedMaxAggregateInputType = {
    id?: true
    courseId?: true
    collegeId?: true
    departmentId?: true
    capacity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CoursesAssignedCountAggregateInputType = {
    id?: true
    courseId?: true
    collegeId?: true
    departmentId?: true
    capacity?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CoursesAssignedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoursesAssigned to aggregate.
     */
    where?: CoursesAssignedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoursesAssigneds to fetch.
     */
    orderBy?: CoursesAssignedOrderByWithRelationInput | CoursesAssignedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoursesAssignedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoursesAssigneds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoursesAssigneds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CoursesAssigneds
    **/
    _count?: true | CoursesAssignedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoursesAssignedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoursesAssignedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoursesAssignedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoursesAssignedMaxAggregateInputType
  }

  export type GetCoursesAssignedAggregateType<T extends CoursesAssignedAggregateArgs> = {
        [P in keyof T & keyof AggregateCoursesAssigned]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoursesAssigned[P]>
      : GetScalarType<T[P], AggregateCoursesAssigned[P]>
  }




  export type CoursesAssignedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoursesAssignedWhereInput
    orderBy?: CoursesAssignedOrderByWithAggregationInput | CoursesAssignedOrderByWithAggregationInput[]
    by: CoursesAssignedScalarFieldEnum[] | CoursesAssignedScalarFieldEnum
    having?: CoursesAssignedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoursesAssignedCountAggregateInputType | true
    _avg?: CoursesAssignedAvgAggregateInputType
    _sum?: CoursesAssignedSumAggregateInputType
    _min?: CoursesAssignedMinAggregateInputType
    _max?: CoursesAssignedMaxAggregateInputType
  }

  export type CoursesAssignedGroupByOutputType = {
    id: string
    courseId: string
    collegeId: string
    departmentId: string | null
    capacity: number | null
    createdAt: Date
    updatedAt: Date
    _count: CoursesAssignedCountAggregateOutputType | null
    _avg: CoursesAssignedAvgAggregateOutputType | null
    _sum: CoursesAssignedSumAggregateOutputType | null
    _min: CoursesAssignedMinAggregateOutputType | null
    _max: CoursesAssignedMaxAggregateOutputType | null
  }

  type GetCoursesAssignedGroupByPayload<T extends CoursesAssignedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoursesAssignedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoursesAssignedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoursesAssignedGroupByOutputType[P]>
            : GetScalarType<T[P], CoursesAssignedGroupByOutputType[P]>
        }
      >
    >


  export type CoursesAssignedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    collegeId?: boolean
    departmentId?: boolean
    capacity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    college?: boolean | CollegeDefaultArgs<ExtArgs>
    department?: boolean | CoursesAssigned$departmentArgs<ExtArgs>
  }, ExtArgs["result"]["coursesAssigned"]>

  export type CoursesAssignedSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    collegeId?: boolean
    departmentId?: boolean
    capacity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    college?: boolean | CollegeDefaultArgs<ExtArgs>
    department?: boolean | CoursesAssigned$departmentArgs<ExtArgs>
  }, ExtArgs["result"]["coursesAssigned"]>

  export type CoursesAssignedSelectScalar = {
    id?: boolean
    courseId?: boolean
    collegeId?: boolean
    departmentId?: boolean
    capacity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CoursesAssignedInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    college?: boolean | CollegeDefaultArgs<ExtArgs>
    department?: boolean | CoursesAssigned$departmentArgs<ExtArgs>
  }
  export type CoursesAssignedIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    college?: boolean | CollegeDefaultArgs<ExtArgs>
    department?: boolean | CoursesAssigned$departmentArgs<ExtArgs>
  }

  export type $CoursesAssignedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CoursesAssigned"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
      college: Prisma.$CollegePayload<ExtArgs>
      department: Prisma.$DepartmentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      courseId: string
      collegeId: string
      departmentId: string | null
      capacity: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["coursesAssigned"]>
    composites: {}
  }

  type CoursesAssignedGetPayload<S extends boolean | null | undefined | CoursesAssignedDefaultArgs> = $Result.GetResult<Prisma.$CoursesAssignedPayload, S>

  type CoursesAssignedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CoursesAssignedFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CoursesAssignedCountAggregateInputType | true
    }

  export interface CoursesAssignedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CoursesAssigned'], meta: { name: 'CoursesAssigned' } }
    /**
     * Find zero or one CoursesAssigned that matches the filter.
     * @param {CoursesAssignedFindUniqueArgs} args - Arguments to find a CoursesAssigned
     * @example
     * // Get one CoursesAssigned
     * const coursesAssigned = await prisma.coursesAssigned.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CoursesAssignedFindUniqueArgs>(args: SelectSubset<T, CoursesAssignedFindUniqueArgs<ExtArgs>>): Prisma__CoursesAssignedClient<$Result.GetResult<Prisma.$CoursesAssignedPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CoursesAssigned that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CoursesAssignedFindUniqueOrThrowArgs} args - Arguments to find a CoursesAssigned
     * @example
     * // Get one CoursesAssigned
     * const coursesAssigned = await prisma.coursesAssigned.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CoursesAssignedFindUniqueOrThrowArgs>(args: SelectSubset<T, CoursesAssignedFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CoursesAssignedClient<$Result.GetResult<Prisma.$CoursesAssignedPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CoursesAssigned that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesAssignedFindFirstArgs} args - Arguments to find a CoursesAssigned
     * @example
     * // Get one CoursesAssigned
     * const coursesAssigned = await prisma.coursesAssigned.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CoursesAssignedFindFirstArgs>(args?: SelectSubset<T, CoursesAssignedFindFirstArgs<ExtArgs>>): Prisma__CoursesAssignedClient<$Result.GetResult<Prisma.$CoursesAssignedPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CoursesAssigned that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesAssignedFindFirstOrThrowArgs} args - Arguments to find a CoursesAssigned
     * @example
     * // Get one CoursesAssigned
     * const coursesAssigned = await prisma.coursesAssigned.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CoursesAssignedFindFirstOrThrowArgs>(args?: SelectSubset<T, CoursesAssignedFindFirstOrThrowArgs<ExtArgs>>): Prisma__CoursesAssignedClient<$Result.GetResult<Prisma.$CoursesAssignedPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CoursesAssigneds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesAssignedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CoursesAssigneds
     * const coursesAssigneds = await prisma.coursesAssigned.findMany()
     * 
     * // Get first 10 CoursesAssigneds
     * const coursesAssigneds = await prisma.coursesAssigned.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coursesAssignedWithIdOnly = await prisma.coursesAssigned.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CoursesAssignedFindManyArgs>(args?: SelectSubset<T, CoursesAssignedFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursesAssignedPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CoursesAssigned.
     * @param {CoursesAssignedCreateArgs} args - Arguments to create a CoursesAssigned.
     * @example
     * // Create one CoursesAssigned
     * const CoursesAssigned = await prisma.coursesAssigned.create({
     *   data: {
     *     // ... data to create a CoursesAssigned
     *   }
     * })
     * 
     */
    create<T extends CoursesAssignedCreateArgs>(args: SelectSubset<T, CoursesAssignedCreateArgs<ExtArgs>>): Prisma__CoursesAssignedClient<$Result.GetResult<Prisma.$CoursesAssignedPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CoursesAssigneds.
     * @param {CoursesAssignedCreateManyArgs} args - Arguments to create many CoursesAssigneds.
     * @example
     * // Create many CoursesAssigneds
     * const coursesAssigned = await prisma.coursesAssigned.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CoursesAssignedCreateManyArgs>(args?: SelectSubset<T, CoursesAssignedCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CoursesAssigneds and returns the data saved in the database.
     * @param {CoursesAssignedCreateManyAndReturnArgs} args - Arguments to create many CoursesAssigneds.
     * @example
     * // Create many CoursesAssigneds
     * const coursesAssigned = await prisma.coursesAssigned.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CoursesAssigneds and only return the `id`
     * const coursesAssignedWithIdOnly = await prisma.coursesAssigned.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CoursesAssignedCreateManyAndReturnArgs>(args?: SelectSubset<T, CoursesAssignedCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursesAssignedPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CoursesAssigned.
     * @param {CoursesAssignedDeleteArgs} args - Arguments to delete one CoursesAssigned.
     * @example
     * // Delete one CoursesAssigned
     * const CoursesAssigned = await prisma.coursesAssigned.delete({
     *   where: {
     *     // ... filter to delete one CoursesAssigned
     *   }
     * })
     * 
     */
    delete<T extends CoursesAssignedDeleteArgs>(args: SelectSubset<T, CoursesAssignedDeleteArgs<ExtArgs>>): Prisma__CoursesAssignedClient<$Result.GetResult<Prisma.$CoursesAssignedPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CoursesAssigned.
     * @param {CoursesAssignedUpdateArgs} args - Arguments to update one CoursesAssigned.
     * @example
     * // Update one CoursesAssigned
     * const coursesAssigned = await prisma.coursesAssigned.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CoursesAssignedUpdateArgs>(args: SelectSubset<T, CoursesAssignedUpdateArgs<ExtArgs>>): Prisma__CoursesAssignedClient<$Result.GetResult<Prisma.$CoursesAssignedPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CoursesAssigneds.
     * @param {CoursesAssignedDeleteManyArgs} args - Arguments to filter CoursesAssigneds to delete.
     * @example
     * // Delete a few CoursesAssigneds
     * const { count } = await prisma.coursesAssigned.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CoursesAssignedDeleteManyArgs>(args?: SelectSubset<T, CoursesAssignedDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoursesAssigneds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesAssignedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CoursesAssigneds
     * const coursesAssigned = await prisma.coursesAssigned.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CoursesAssignedUpdateManyArgs>(args: SelectSubset<T, CoursesAssignedUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CoursesAssigned.
     * @param {CoursesAssignedUpsertArgs} args - Arguments to update or create a CoursesAssigned.
     * @example
     * // Update or create a CoursesAssigned
     * const coursesAssigned = await prisma.coursesAssigned.upsert({
     *   create: {
     *     // ... data to create a CoursesAssigned
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CoursesAssigned we want to update
     *   }
     * })
     */
    upsert<T extends CoursesAssignedUpsertArgs>(args: SelectSubset<T, CoursesAssignedUpsertArgs<ExtArgs>>): Prisma__CoursesAssignedClient<$Result.GetResult<Prisma.$CoursesAssignedPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CoursesAssigneds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesAssignedCountArgs} args - Arguments to filter CoursesAssigneds to count.
     * @example
     * // Count the number of CoursesAssigneds
     * const count = await prisma.coursesAssigned.count({
     *   where: {
     *     // ... the filter for the CoursesAssigneds we want to count
     *   }
     * })
    **/
    count<T extends CoursesAssignedCountArgs>(
      args?: Subset<T, CoursesAssignedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoursesAssignedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CoursesAssigned.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesAssignedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoursesAssignedAggregateArgs>(args: Subset<T, CoursesAssignedAggregateArgs>): Prisma.PrismaPromise<GetCoursesAssignedAggregateType<T>>

    /**
     * Group by CoursesAssigned.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesAssignedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoursesAssignedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoursesAssignedGroupByArgs['orderBy'] }
        : { orderBy?: CoursesAssignedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoursesAssignedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoursesAssignedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CoursesAssigned model
   */
  readonly fields: CoursesAssignedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CoursesAssigned.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoursesAssignedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    college<T extends CollegeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CollegeDefaultArgs<ExtArgs>>): Prisma__CollegeClient<$Result.GetResult<Prisma.$CollegePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    department<T extends CoursesAssigned$departmentArgs<ExtArgs> = {}>(args?: Subset<T, CoursesAssigned$departmentArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CoursesAssigned model
   */ 
  interface CoursesAssignedFieldRefs {
    readonly id: FieldRef<"CoursesAssigned", 'String'>
    readonly courseId: FieldRef<"CoursesAssigned", 'String'>
    readonly collegeId: FieldRef<"CoursesAssigned", 'String'>
    readonly departmentId: FieldRef<"CoursesAssigned", 'String'>
    readonly capacity: FieldRef<"CoursesAssigned", 'Int'>
    readonly createdAt: FieldRef<"CoursesAssigned", 'DateTime'>
    readonly updatedAt: FieldRef<"CoursesAssigned", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CoursesAssigned findUnique
   */
  export type CoursesAssignedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursesAssigned
     */
    select?: CoursesAssignedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesAssignedInclude<ExtArgs> | null
    /**
     * Filter, which CoursesAssigned to fetch.
     */
    where: CoursesAssignedWhereUniqueInput
  }

  /**
   * CoursesAssigned findUniqueOrThrow
   */
  export type CoursesAssignedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursesAssigned
     */
    select?: CoursesAssignedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesAssignedInclude<ExtArgs> | null
    /**
     * Filter, which CoursesAssigned to fetch.
     */
    where: CoursesAssignedWhereUniqueInput
  }

  /**
   * CoursesAssigned findFirst
   */
  export type CoursesAssignedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursesAssigned
     */
    select?: CoursesAssignedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesAssignedInclude<ExtArgs> | null
    /**
     * Filter, which CoursesAssigned to fetch.
     */
    where?: CoursesAssignedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoursesAssigneds to fetch.
     */
    orderBy?: CoursesAssignedOrderByWithRelationInput | CoursesAssignedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoursesAssigneds.
     */
    cursor?: CoursesAssignedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoursesAssigneds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoursesAssigneds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoursesAssigneds.
     */
    distinct?: CoursesAssignedScalarFieldEnum | CoursesAssignedScalarFieldEnum[]
  }

  /**
   * CoursesAssigned findFirstOrThrow
   */
  export type CoursesAssignedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursesAssigned
     */
    select?: CoursesAssignedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesAssignedInclude<ExtArgs> | null
    /**
     * Filter, which CoursesAssigned to fetch.
     */
    where?: CoursesAssignedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoursesAssigneds to fetch.
     */
    orderBy?: CoursesAssignedOrderByWithRelationInput | CoursesAssignedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoursesAssigneds.
     */
    cursor?: CoursesAssignedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoursesAssigneds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoursesAssigneds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoursesAssigneds.
     */
    distinct?: CoursesAssignedScalarFieldEnum | CoursesAssignedScalarFieldEnum[]
  }

  /**
   * CoursesAssigned findMany
   */
  export type CoursesAssignedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursesAssigned
     */
    select?: CoursesAssignedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesAssignedInclude<ExtArgs> | null
    /**
     * Filter, which CoursesAssigneds to fetch.
     */
    where?: CoursesAssignedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoursesAssigneds to fetch.
     */
    orderBy?: CoursesAssignedOrderByWithRelationInput | CoursesAssignedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CoursesAssigneds.
     */
    cursor?: CoursesAssignedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoursesAssigneds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoursesAssigneds.
     */
    skip?: number
    distinct?: CoursesAssignedScalarFieldEnum | CoursesAssignedScalarFieldEnum[]
  }

  /**
   * CoursesAssigned create
   */
  export type CoursesAssignedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursesAssigned
     */
    select?: CoursesAssignedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesAssignedInclude<ExtArgs> | null
    /**
     * The data needed to create a CoursesAssigned.
     */
    data: XOR<CoursesAssignedCreateInput, CoursesAssignedUncheckedCreateInput>
  }

  /**
   * CoursesAssigned createMany
   */
  export type CoursesAssignedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CoursesAssigneds.
     */
    data: CoursesAssignedCreateManyInput | CoursesAssignedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CoursesAssigned createManyAndReturn
   */
  export type CoursesAssignedCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursesAssigned
     */
    select?: CoursesAssignedSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CoursesAssigneds.
     */
    data: CoursesAssignedCreateManyInput | CoursesAssignedCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesAssignedIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CoursesAssigned update
   */
  export type CoursesAssignedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursesAssigned
     */
    select?: CoursesAssignedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesAssignedInclude<ExtArgs> | null
    /**
     * The data needed to update a CoursesAssigned.
     */
    data: XOR<CoursesAssignedUpdateInput, CoursesAssignedUncheckedUpdateInput>
    /**
     * Choose, which CoursesAssigned to update.
     */
    where: CoursesAssignedWhereUniqueInput
  }

  /**
   * CoursesAssigned updateMany
   */
  export type CoursesAssignedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CoursesAssigneds.
     */
    data: XOR<CoursesAssignedUpdateManyMutationInput, CoursesAssignedUncheckedUpdateManyInput>
    /**
     * Filter which CoursesAssigneds to update
     */
    where?: CoursesAssignedWhereInput
  }

  /**
   * CoursesAssigned upsert
   */
  export type CoursesAssignedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursesAssigned
     */
    select?: CoursesAssignedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesAssignedInclude<ExtArgs> | null
    /**
     * The filter to search for the CoursesAssigned to update in case it exists.
     */
    where: CoursesAssignedWhereUniqueInput
    /**
     * In case the CoursesAssigned found by the `where` argument doesn't exist, create a new CoursesAssigned with this data.
     */
    create: XOR<CoursesAssignedCreateInput, CoursesAssignedUncheckedCreateInput>
    /**
     * In case the CoursesAssigned was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoursesAssignedUpdateInput, CoursesAssignedUncheckedUpdateInput>
  }

  /**
   * CoursesAssigned delete
   */
  export type CoursesAssignedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursesAssigned
     */
    select?: CoursesAssignedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesAssignedInclude<ExtArgs> | null
    /**
     * Filter which CoursesAssigned to delete.
     */
    where: CoursesAssignedWhereUniqueInput
  }

  /**
   * CoursesAssigned deleteMany
   */
  export type CoursesAssignedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoursesAssigneds to delete
     */
    where?: CoursesAssignedWhereInput
  }

  /**
   * CoursesAssigned.department
   */
  export type CoursesAssigned$departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * CoursesAssigned without action
   */
  export type CoursesAssignedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursesAssigned
     */
    select?: CoursesAssignedSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursesAssignedInclude<ExtArgs> | null
  }


  /**
   * Model Enrollment
   */

  export type AggregateEnrollment = {
    _count: EnrollmentCountAggregateOutputType | null
    _avg: EnrollmentAvgAggregateOutputType | null
    _sum: EnrollmentSumAggregateOutputType | null
    _min: EnrollmentMinAggregateOutputType | null
    _max: EnrollmentMaxAggregateOutputType | null
  }

  export type EnrollmentAvgAggregateOutputType = {
    progress: number | null
    duration: number | null
  }

  export type EnrollmentSumAggregateOutputType = {
    progress: number | null
    duration: number | null
  }

  export type EnrollmentMinAggregateOutputType = {
    id: string | null
    studentId: string | null
    courseId: string | null
    status: string | null
    progress: number | null
    startedAt: Date | null
    completedAt: Date | null
    duration: number | null
    createdAt: Date | null
    updatedAt: Date | null
    departmentId: string | null
  }

  export type EnrollmentMaxAggregateOutputType = {
    id: string | null
    studentId: string | null
    courseId: string | null
    status: string | null
    progress: number | null
    startedAt: Date | null
    completedAt: Date | null
    duration: number | null
    createdAt: Date | null
    updatedAt: Date | null
    departmentId: string | null
  }

  export type EnrollmentCountAggregateOutputType = {
    id: number
    studentId: number
    courseId: number
    status: number
    progress: number
    startedAt: number
    completedAt: number
    duration: number
    createdAt: number
    updatedAt: number
    departmentId: number
    _all: number
  }


  export type EnrollmentAvgAggregateInputType = {
    progress?: true
    duration?: true
  }

  export type EnrollmentSumAggregateInputType = {
    progress?: true
    duration?: true
  }

  export type EnrollmentMinAggregateInputType = {
    id?: true
    studentId?: true
    courseId?: true
    status?: true
    progress?: true
    startedAt?: true
    completedAt?: true
    duration?: true
    createdAt?: true
    updatedAt?: true
    departmentId?: true
  }

  export type EnrollmentMaxAggregateInputType = {
    id?: true
    studentId?: true
    courseId?: true
    status?: true
    progress?: true
    startedAt?: true
    completedAt?: true
    duration?: true
    createdAt?: true
    updatedAt?: true
    departmentId?: true
  }

  export type EnrollmentCountAggregateInputType = {
    id?: true
    studentId?: true
    courseId?: true
    status?: true
    progress?: true
    startedAt?: true
    completedAt?: true
    duration?: true
    createdAt?: true
    updatedAt?: true
    departmentId?: true
    _all?: true
  }

  export type EnrollmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Enrollment to aggregate.
     */
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Enrollments
    **/
    _count?: true | EnrollmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EnrollmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EnrollmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EnrollmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EnrollmentMaxAggregateInputType
  }

  export type GetEnrollmentAggregateType<T extends EnrollmentAggregateArgs> = {
        [P in keyof T & keyof AggregateEnrollment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEnrollment[P]>
      : GetScalarType<T[P], AggregateEnrollment[P]>
  }




  export type EnrollmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentWhereInput
    orderBy?: EnrollmentOrderByWithAggregationInput | EnrollmentOrderByWithAggregationInput[]
    by: EnrollmentScalarFieldEnum[] | EnrollmentScalarFieldEnum
    having?: EnrollmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EnrollmentCountAggregateInputType | true
    _avg?: EnrollmentAvgAggregateInputType
    _sum?: EnrollmentSumAggregateInputType
    _min?: EnrollmentMinAggregateInputType
    _max?: EnrollmentMaxAggregateInputType
  }

  export type EnrollmentGroupByOutputType = {
    id: string
    studentId: string
    courseId: string
    status: string
    progress: number
    startedAt: Date | null
    completedAt: Date | null
    duration: number | null
    createdAt: Date
    updatedAt: Date
    departmentId: string | null
    _count: EnrollmentCountAggregateOutputType | null
    _avg: EnrollmentAvgAggregateOutputType | null
    _sum: EnrollmentSumAggregateOutputType | null
    _min: EnrollmentMinAggregateOutputType | null
    _max: EnrollmentMaxAggregateOutputType | null
  }

  type GetEnrollmentGroupByPayload<T extends EnrollmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EnrollmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EnrollmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EnrollmentGroupByOutputType[P]>
            : GetScalarType<T[P], EnrollmentGroupByOutputType[P]>
        }
      >
    >


  export type EnrollmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    courseId?: boolean
    status?: boolean
    progress?: boolean
    startedAt?: boolean
    completedAt?: boolean
    duration?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    departmentId?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
    department?: boolean | Enrollment$departmentArgs<ExtArgs>
  }, ExtArgs["result"]["enrollment"]>

  export type EnrollmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    courseId?: boolean
    status?: boolean
    progress?: boolean
    startedAt?: boolean
    completedAt?: boolean
    duration?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    departmentId?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
    department?: boolean | Enrollment$departmentArgs<ExtArgs>
  }, ExtArgs["result"]["enrollment"]>

  export type EnrollmentSelectScalar = {
    id?: boolean
    studentId?: boolean
    courseId?: boolean
    status?: boolean
    progress?: boolean
    startedAt?: boolean
    completedAt?: boolean
    duration?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    departmentId?: boolean
  }

  export type EnrollmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
    department?: boolean | Enrollment$departmentArgs<ExtArgs>
  }
  export type EnrollmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
    department?: boolean | Enrollment$departmentArgs<ExtArgs>
  }

  export type $EnrollmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Enrollment"
    objects: {
      student: Prisma.$UserPayload<ExtArgs>
      course: Prisma.$CoursePayload<ExtArgs>
      department: Prisma.$DepartmentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      studentId: string
      courseId: string
      status: string
      progress: number
      startedAt: Date | null
      completedAt: Date | null
      duration: number | null
      createdAt: Date
      updatedAt: Date
      departmentId: string | null
    }, ExtArgs["result"]["enrollment"]>
    composites: {}
  }

  type EnrollmentGetPayload<S extends boolean | null | undefined | EnrollmentDefaultArgs> = $Result.GetResult<Prisma.$EnrollmentPayload, S>

  type EnrollmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EnrollmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EnrollmentCountAggregateInputType | true
    }

  export interface EnrollmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Enrollment'], meta: { name: 'Enrollment' } }
    /**
     * Find zero or one Enrollment that matches the filter.
     * @param {EnrollmentFindUniqueArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EnrollmentFindUniqueArgs>(args: SelectSubset<T, EnrollmentFindUniqueArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Enrollment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EnrollmentFindUniqueOrThrowArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EnrollmentFindUniqueOrThrowArgs>(args: SelectSubset<T, EnrollmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Enrollment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentFindFirstArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EnrollmentFindFirstArgs>(args?: SelectSubset<T, EnrollmentFindFirstArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Enrollment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentFindFirstOrThrowArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EnrollmentFindFirstOrThrowArgs>(args?: SelectSubset<T, EnrollmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Enrollments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Enrollments
     * const enrollments = await prisma.enrollment.findMany()
     * 
     * // Get first 10 Enrollments
     * const enrollments = await prisma.enrollment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const enrollmentWithIdOnly = await prisma.enrollment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EnrollmentFindManyArgs>(args?: SelectSubset<T, EnrollmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Enrollment.
     * @param {EnrollmentCreateArgs} args - Arguments to create a Enrollment.
     * @example
     * // Create one Enrollment
     * const Enrollment = await prisma.enrollment.create({
     *   data: {
     *     // ... data to create a Enrollment
     *   }
     * })
     * 
     */
    create<T extends EnrollmentCreateArgs>(args: SelectSubset<T, EnrollmentCreateArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Enrollments.
     * @param {EnrollmentCreateManyArgs} args - Arguments to create many Enrollments.
     * @example
     * // Create many Enrollments
     * const enrollment = await prisma.enrollment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EnrollmentCreateManyArgs>(args?: SelectSubset<T, EnrollmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Enrollments and returns the data saved in the database.
     * @param {EnrollmentCreateManyAndReturnArgs} args - Arguments to create many Enrollments.
     * @example
     * // Create many Enrollments
     * const enrollment = await prisma.enrollment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Enrollments and only return the `id`
     * const enrollmentWithIdOnly = await prisma.enrollment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EnrollmentCreateManyAndReturnArgs>(args?: SelectSubset<T, EnrollmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Enrollment.
     * @param {EnrollmentDeleteArgs} args - Arguments to delete one Enrollment.
     * @example
     * // Delete one Enrollment
     * const Enrollment = await prisma.enrollment.delete({
     *   where: {
     *     // ... filter to delete one Enrollment
     *   }
     * })
     * 
     */
    delete<T extends EnrollmentDeleteArgs>(args: SelectSubset<T, EnrollmentDeleteArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Enrollment.
     * @param {EnrollmentUpdateArgs} args - Arguments to update one Enrollment.
     * @example
     * // Update one Enrollment
     * const enrollment = await prisma.enrollment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EnrollmentUpdateArgs>(args: SelectSubset<T, EnrollmentUpdateArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Enrollments.
     * @param {EnrollmentDeleteManyArgs} args - Arguments to filter Enrollments to delete.
     * @example
     * // Delete a few Enrollments
     * const { count } = await prisma.enrollment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EnrollmentDeleteManyArgs>(args?: SelectSubset<T, EnrollmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Enrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Enrollments
     * const enrollment = await prisma.enrollment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EnrollmentUpdateManyArgs>(args: SelectSubset<T, EnrollmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Enrollment.
     * @param {EnrollmentUpsertArgs} args - Arguments to update or create a Enrollment.
     * @example
     * // Update or create a Enrollment
     * const enrollment = await prisma.enrollment.upsert({
     *   create: {
     *     // ... data to create a Enrollment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Enrollment we want to update
     *   }
     * })
     */
    upsert<T extends EnrollmentUpsertArgs>(args: SelectSubset<T, EnrollmentUpsertArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Enrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentCountArgs} args - Arguments to filter Enrollments to count.
     * @example
     * // Count the number of Enrollments
     * const count = await prisma.enrollment.count({
     *   where: {
     *     // ... the filter for the Enrollments we want to count
     *   }
     * })
    **/
    count<T extends EnrollmentCountArgs>(
      args?: Subset<T, EnrollmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EnrollmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Enrollment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EnrollmentAggregateArgs>(args: Subset<T, EnrollmentAggregateArgs>): Prisma.PrismaPromise<GetEnrollmentAggregateType<T>>

    /**
     * Group by Enrollment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EnrollmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EnrollmentGroupByArgs['orderBy'] }
        : { orderBy?: EnrollmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EnrollmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnrollmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Enrollment model
   */
  readonly fields: EnrollmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Enrollment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EnrollmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    department<T extends Enrollment$departmentArgs<ExtArgs> = {}>(args?: Subset<T, Enrollment$departmentArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Enrollment model
   */ 
  interface EnrollmentFieldRefs {
    readonly id: FieldRef<"Enrollment", 'String'>
    readonly studentId: FieldRef<"Enrollment", 'String'>
    readonly courseId: FieldRef<"Enrollment", 'String'>
    readonly status: FieldRef<"Enrollment", 'String'>
    readonly progress: FieldRef<"Enrollment", 'Int'>
    readonly startedAt: FieldRef<"Enrollment", 'DateTime'>
    readonly completedAt: FieldRef<"Enrollment", 'DateTime'>
    readonly duration: FieldRef<"Enrollment", 'Int'>
    readonly createdAt: FieldRef<"Enrollment", 'DateTime'>
    readonly updatedAt: FieldRef<"Enrollment", 'DateTime'>
    readonly departmentId: FieldRef<"Enrollment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Enrollment findUnique
   */
  export type EnrollmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which Enrollment to fetch.
     */
    where: EnrollmentWhereUniqueInput
  }

  /**
   * Enrollment findUniqueOrThrow
   */
  export type EnrollmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which Enrollment to fetch.
     */
    where: EnrollmentWhereUniqueInput
  }

  /**
   * Enrollment findFirst
   */
  export type EnrollmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which Enrollment to fetch.
     */
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enrollments.
     */
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enrollments.
     */
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * Enrollment findFirstOrThrow
   */
  export type EnrollmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which Enrollment to fetch.
     */
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enrollments.
     */
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enrollments.
     */
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * Enrollment findMany
   */
  export type EnrollmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which Enrollments to fetch.
     */
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Enrollments.
     */
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * Enrollment create
   */
  export type EnrollmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Enrollment.
     */
    data: XOR<EnrollmentCreateInput, EnrollmentUncheckedCreateInput>
  }

  /**
   * Enrollment createMany
   */
  export type EnrollmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Enrollments.
     */
    data: EnrollmentCreateManyInput | EnrollmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Enrollment createManyAndReturn
   */
  export type EnrollmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Enrollments.
     */
    data: EnrollmentCreateManyInput | EnrollmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Enrollment update
   */
  export type EnrollmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Enrollment.
     */
    data: XOR<EnrollmentUpdateInput, EnrollmentUncheckedUpdateInput>
    /**
     * Choose, which Enrollment to update.
     */
    where: EnrollmentWhereUniqueInput
  }

  /**
   * Enrollment updateMany
   */
  export type EnrollmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Enrollments.
     */
    data: XOR<EnrollmentUpdateManyMutationInput, EnrollmentUncheckedUpdateManyInput>
    /**
     * Filter which Enrollments to update
     */
    where?: EnrollmentWhereInput
  }

  /**
   * Enrollment upsert
   */
  export type EnrollmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Enrollment to update in case it exists.
     */
    where: EnrollmentWhereUniqueInput
    /**
     * In case the Enrollment found by the `where` argument doesn't exist, create a new Enrollment with this data.
     */
    create: XOR<EnrollmentCreateInput, EnrollmentUncheckedCreateInput>
    /**
     * In case the Enrollment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EnrollmentUpdateInput, EnrollmentUncheckedUpdateInput>
  }

  /**
   * Enrollment delete
   */
  export type EnrollmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter which Enrollment to delete.
     */
    where: EnrollmentWhereUniqueInput
  }

  /**
   * Enrollment deleteMany
   */
  export type EnrollmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Enrollments to delete
     */
    where?: EnrollmentWhereInput
  }

  /**
   * Enrollment.department
   */
  export type Enrollment$departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * Enrollment without action
   */
  export type EnrollmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
  }


  /**
   * Model Chapter
   */

  export type AggregateChapter = {
    _count: ChapterCountAggregateOutputType | null
    _avg: ChapterAvgAggregateOutputType | null
    _sum: ChapterSumAggregateOutputType | null
    _min: ChapterMinAggregateOutputType | null
    _max: ChapterMaxAggregateOutputType | null
  }

  export type ChapterAvgAggregateOutputType = {
    order: number | null
  }

  export type ChapterSumAggregateOutputType = {
    order: number | null
  }

  export type ChapterMinAggregateOutputType = {
    id: string | null
    title: string | null
    slug: string | null
    description: string | null
    content: string | null
    order: number | null
    isPreview: boolean | null
    isPublished: boolean | null
    courseId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChapterMaxAggregateOutputType = {
    id: string | null
    title: string | null
    slug: string | null
    description: string | null
    content: string | null
    order: number | null
    isPreview: boolean | null
    isPublished: boolean | null
    courseId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChapterCountAggregateOutputType = {
    id: number
    title: number
    slug: number
    description: number
    content: number
    attachments: number
    order: number
    isPreview: number
    isPublished: number
    courseId: number
    settings: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChapterAvgAggregateInputType = {
    order?: true
  }

  export type ChapterSumAggregateInputType = {
    order?: true
  }

  export type ChapterMinAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    description?: true
    content?: true
    order?: true
    isPreview?: true
    isPublished?: true
    courseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChapterMaxAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    description?: true
    content?: true
    order?: true
    isPreview?: true
    isPublished?: true
    courseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChapterCountAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    description?: true
    content?: true
    attachments?: true
    order?: true
    isPreview?: true
    isPublished?: true
    courseId?: true
    settings?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChapterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chapter to aggregate.
     */
    where?: ChapterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chapters to fetch.
     */
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChapterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Chapters
    **/
    _count?: true | ChapterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChapterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChapterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChapterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChapterMaxAggregateInputType
  }

  export type GetChapterAggregateType<T extends ChapterAggregateArgs> = {
        [P in keyof T & keyof AggregateChapter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChapter[P]>
      : GetScalarType<T[P], AggregateChapter[P]>
  }




  export type ChapterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChapterWhereInput
    orderBy?: ChapterOrderByWithAggregationInput | ChapterOrderByWithAggregationInput[]
    by: ChapterScalarFieldEnum[] | ChapterScalarFieldEnum
    having?: ChapterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChapterCountAggregateInputType | true
    _avg?: ChapterAvgAggregateInputType
    _sum?: ChapterSumAggregateInputType
    _min?: ChapterMinAggregateInputType
    _max?: ChapterMaxAggregateInputType
  }

  export type ChapterGroupByOutputType = {
    id: string
    title: string
    slug: string
    description: string | null
    content: string | null
    attachments: string[]
    order: number
    isPreview: boolean
    isPublished: boolean
    courseId: string
    settings: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: ChapterCountAggregateOutputType | null
    _avg: ChapterAvgAggregateOutputType | null
    _sum: ChapterSumAggregateOutputType | null
    _min: ChapterMinAggregateOutputType | null
    _max: ChapterMaxAggregateOutputType | null
  }

  type GetChapterGroupByPayload<T extends ChapterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChapterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChapterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChapterGroupByOutputType[P]>
            : GetScalarType<T[P], ChapterGroupByOutputType[P]>
        }
      >
    >


  export type ChapterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    slug?: boolean
    description?: boolean
    content?: boolean
    attachments?: boolean
    order?: boolean
    isPreview?: boolean
    isPublished?: boolean
    courseId?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    assessments?: boolean | Chapter$assessmentsArgs<ExtArgs>
    progress?: boolean | Chapter$progressArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
    _count?: boolean | ChapterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chapter"]>

  export type ChapterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    slug?: boolean
    description?: boolean
    content?: boolean
    attachments?: boolean
    order?: boolean
    isPreview?: boolean
    isPublished?: boolean
    courseId?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chapter"]>

  export type ChapterSelectScalar = {
    id?: boolean
    title?: boolean
    slug?: boolean
    description?: boolean
    content?: boolean
    attachments?: boolean
    order?: boolean
    isPreview?: boolean
    isPublished?: boolean
    courseId?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChapterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assessments?: boolean | Chapter$assessmentsArgs<ExtArgs>
    progress?: boolean | Chapter$progressArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
    _count?: boolean | ChapterCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChapterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }

  export type $ChapterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Chapter"
    objects: {
      assessments: Prisma.$AssessmentPayload<ExtArgs>[]
      progress: Prisma.$ChapterProgressPayload<ExtArgs>[]
      course: Prisma.$CoursePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      slug: string
      description: string | null
      content: string | null
      attachments: string[]
      order: number
      isPreview: boolean
      isPublished: boolean
      courseId: string
      settings: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["chapter"]>
    composites: {}
  }

  type ChapterGetPayload<S extends boolean | null | undefined | ChapterDefaultArgs> = $Result.GetResult<Prisma.$ChapterPayload, S>

  type ChapterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChapterFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChapterCountAggregateInputType | true
    }

  export interface ChapterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Chapter'], meta: { name: 'Chapter' } }
    /**
     * Find zero or one Chapter that matches the filter.
     * @param {ChapterFindUniqueArgs} args - Arguments to find a Chapter
     * @example
     * // Get one Chapter
     * const chapter = await prisma.chapter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChapterFindUniqueArgs>(args: SelectSubset<T, ChapterFindUniqueArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Chapter that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChapterFindUniqueOrThrowArgs} args - Arguments to find a Chapter
     * @example
     * // Get one Chapter
     * const chapter = await prisma.chapter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChapterFindUniqueOrThrowArgs>(args: SelectSubset<T, ChapterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Chapter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterFindFirstArgs} args - Arguments to find a Chapter
     * @example
     * // Get one Chapter
     * const chapter = await prisma.chapter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChapterFindFirstArgs>(args?: SelectSubset<T, ChapterFindFirstArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Chapter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterFindFirstOrThrowArgs} args - Arguments to find a Chapter
     * @example
     * // Get one Chapter
     * const chapter = await prisma.chapter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChapterFindFirstOrThrowArgs>(args?: SelectSubset<T, ChapterFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Chapters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chapters
     * const chapters = await prisma.chapter.findMany()
     * 
     * // Get first 10 Chapters
     * const chapters = await prisma.chapter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chapterWithIdOnly = await prisma.chapter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChapterFindManyArgs>(args?: SelectSubset<T, ChapterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Chapter.
     * @param {ChapterCreateArgs} args - Arguments to create a Chapter.
     * @example
     * // Create one Chapter
     * const Chapter = await prisma.chapter.create({
     *   data: {
     *     // ... data to create a Chapter
     *   }
     * })
     * 
     */
    create<T extends ChapterCreateArgs>(args: SelectSubset<T, ChapterCreateArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Chapters.
     * @param {ChapterCreateManyArgs} args - Arguments to create many Chapters.
     * @example
     * // Create many Chapters
     * const chapter = await prisma.chapter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChapterCreateManyArgs>(args?: SelectSubset<T, ChapterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Chapters and returns the data saved in the database.
     * @param {ChapterCreateManyAndReturnArgs} args - Arguments to create many Chapters.
     * @example
     * // Create many Chapters
     * const chapter = await prisma.chapter.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Chapters and only return the `id`
     * const chapterWithIdOnly = await prisma.chapter.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChapterCreateManyAndReturnArgs>(args?: SelectSubset<T, ChapterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Chapter.
     * @param {ChapterDeleteArgs} args - Arguments to delete one Chapter.
     * @example
     * // Delete one Chapter
     * const Chapter = await prisma.chapter.delete({
     *   where: {
     *     // ... filter to delete one Chapter
     *   }
     * })
     * 
     */
    delete<T extends ChapterDeleteArgs>(args: SelectSubset<T, ChapterDeleteArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Chapter.
     * @param {ChapterUpdateArgs} args - Arguments to update one Chapter.
     * @example
     * // Update one Chapter
     * const chapter = await prisma.chapter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChapterUpdateArgs>(args: SelectSubset<T, ChapterUpdateArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Chapters.
     * @param {ChapterDeleteManyArgs} args - Arguments to filter Chapters to delete.
     * @example
     * // Delete a few Chapters
     * const { count } = await prisma.chapter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChapterDeleteManyArgs>(args?: SelectSubset<T, ChapterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chapters
     * const chapter = await prisma.chapter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChapterUpdateManyArgs>(args: SelectSubset<T, ChapterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Chapter.
     * @param {ChapterUpsertArgs} args - Arguments to update or create a Chapter.
     * @example
     * // Update or create a Chapter
     * const chapter = await prisma.chapter.upsert({
     *   create: {
     *     // ... data to create a Chapter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chapter we want to update
     *   }
     * })
     */
    upsert<T extends ChapterUpsertArgs>(args: SelectSubset<T, ChapterUpsertArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Chapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterCountArgs} args - Arguments to filter Chapters to count.
     * @example
     * // Count the number of Chapters
     * const count = await prisma.chapter.count({
     *   where: {
     *     // ... the filter for the Chapters we want to count
     *   }
     * })
    **/
    count<T extends ChapterCountArgs>(
      args?: Subset<T, ChapterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChapterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chapter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChapterAggregateArgs>(args: Subset<T, ChapterAggregateArgs>): Prisma.PrismaPromise<GetChapterAggregateType<T>>

    /**
     * Group by Chapter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChapterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChapterGroupByArgs['orderBy'] }
        : { orderBy?: ChapterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChapterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChapterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Chapter model
   */
  readonly fields: ChapterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Chapter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChapterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assessments<T extends Chapter$assessmentsArgs<ExtArgs> = {}>(args?: Subset<T, Chapter$assessmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findMany"> | Null>
    progress<T extends Chapter$progressArgs<ExtArgs> = {}>(args?: Subset<T, Chapter$progressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChapterProgressPayload<ExtArgs>, T, "findMany"> | Null>
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Chapter model
   */ 
  interface ChapterFieldRefs {
    readonly id: FieldRef<"Chapter", 'String'>
    readonly title: FieldRef<"Chapter", 'String'>
    readonly slug: FieldRef<"Chapter", 'String'>
    readonly description: FieldRef<"Chapter", 'String'>
    readonly content: FieldRef<"Chapter", 'String'>
    readonly attachments: FieldRef<"Chapter", 'String[]'>
    readonly order: FieldRef<"Chapter", 'Int'>
    readonly isPreview: FieldRef<"Chapter", 'Boolean'>
    readonly isPublished: FieldRef<"Chapter", 'Boolean'>
    readonly courseId: FieldRef<"Chapter", 'String'>
    readonly settings: FieldRef<"Chapter", 'Json'>
    readonly createdAt: FieldRef<"Chapter", 'DateTime'>
    readonly updatedAt: FieldRef<"Chapter", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Chapter findUnique
   */
  export type ChapterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter, which Chapter to fetch.
     */
    where: ChapterWhereUniqueInput
  }

  /**
   * Chapter findUniqueOrThrow
   */
  export type ChapterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter, which Chapter to fetch.
     */
    where: ChapterWhereUniqueInput
  }

  /**
   * Chapter findFirst
   */
  export type ChapterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter, which Chapter to fetch.
     */
    where?: ChapterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chapters to fetch.
     */
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chapters.
     */
    cursor?: ChapterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chapters.
     */
    distinct?: ChapterScalarFieldEnum | ChapterScalarFieldEnum[]
  }

  /**
   * Chapter findFirstOrThrow
   */
  export type ChapterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter, which Chapter to fetch.
     */
    where?: ChapterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chapters to fetch.
     */
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chapters.
     */
    cursor?: ChapterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chapters.
     */
    distinct?: ChapterScalarFieldEnum | ChapterScalarFieldEnum[]
  }

  /**
   * Chapter findMany
   */
  export type ChapterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter, which Chapters to fetch.
     */
    where?: ChapterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chapters to fetch.
     */
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Chapters.
     */
    cursor?: ChapterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chapters.
     */
    skip?: number
    distinct?: ChapterScalarFieldEnum | ChapterScalarFieldEnum[]
  }

  /**
   * Chapter create
   */
  export type ChapterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * The data needed to create a Chapter.
     */
    data: XOR<ChapterCreateInput, ChapterUncheckedCreateInput>
  }

  /**
   * Chapter createMany
   */
  export type ChapterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Chapters.
     */
    data: ChapterCreateManyInput | ChapterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Chapter createManyAndReturn
   */
  export type ChapterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Chapters.
     */
    data: ChapterCreateManyInput | ChapterCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Chapter update
   */
  export type ChapterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * The data needed to update a Chapter.
     */
    data: XOR<ChapterUpdateInput, ChapterUncheckedUpdateInput>
    /**
     * Choose, which Chapter to update.
     */
    where: ChapterWhereUniqueInput
  }

  /**
   * Chapter updateMany
   */
  export type ChapterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Chapters.
     */
    data: XOR<ChapterUpdateManyMutationInput, ChapterUncheckedUpdateManyInput>
    /**
     * Filter which Chapters to update
     */
    where?: ChapterWhereInput
  }

  /**
   * Chapter upsert
   */
  export type ChapterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * The filter to search for the Chapter to update in case it exists.
     */
    where: ChapterWhereUniqueInput
    /**
     * In case the Chapter found by the `where` argument doesn't exist, create a new Chapter with this data.
     */
    create: XOR<ChapterCreateInput, ChapterUncheckedCreateInput>
    /**
     * In case the Chapter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChapterUpdateInput, ChapterUncheckedUpdateInput>
  }

  /**
   * Chapter delete
   */
  export type ChapterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter which Chapter to delete.
     */
    where: ChapterWhereUniqueInput
  }

  /**
   * Chapter deleteMany
   */
  export type ChapterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chapters to delete
     */
    where?: ChapterWhereInput
  }

  /**
   * Chapter.assessments
   */
  export type Chapter$assessmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    where?: AssessmentWhereInput
    orderBy?: AssessmentOrderByWithRelationInput | AssessmentOrderByWithRelationInput[]
    cursor?: AssessmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssessmentScalarFieldEnum | AssessmentScalarFieldEnum[]
  }

  /**
   * Chapter.progress
   */
  export type Chapter$progressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterProgress
     */
    select?: ChapterProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterProgressInclude<ExtArgs> | null
    where?: ChapterProgressWhereInput
    orderBy?: ChapterProgressOrderByWithRelationInput | ChapterProgressOrderByWithRelationInput[]
    cursor?: ChapterProgressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChapterProgressScalarFieldEnum | ChapterProgressScalarFieldEnum[]
  }

  /**
   * Chapter without action
   */
  export type ChapterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
  }


  /**
   * Model ChapterProgress
   */

  export type AggregateChapterProgress = {
    _count: ChapterProgressCountAggregateOutputType | null
    _avg: ChapterProgressAvgAggregateOutputType | null
    _sum: ChapterProgressSumAggregateOutputType | null
    _min: ChapterProgressMinAggregateOutputType | null
    _max: ChapterProgressMaxAggregateOutputType | null
  }

  export type ChapterProgressAvgAggregateOutputType = {
    timeSpent: number | null
  }

  export type ChapterProgressSumAggregateOutputType = {
    timeSpent: number | null
  }

  export type ChapterProgressMinAggregateOutputType = {
    id: string | null
    isCompleted: boolean | null
    timeSpent: number | null
    completedAt: Date | null
    chapterId: string | null
    studentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChapterProgressMaxAggregateOutputType = {
    id: string | null
    isCompleted: boolean | null
    timeSpent: number | null
    completedAt: Date | null
    chapterId: string | null
    studentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChapterProgressCountAggregateOutputType = {
    id: number
    isCompleted: number
    timeSpent: number
    completedAt: number
    chapterId: number
    studentId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChapterProgressAvgAggregateInputType = {
    timeSpent?: true
  }

  export type ChapterProgressSumAggregateInputType = {
    timeSpent?: true
  }

  export type ChapterProgressMinAggregateInputType = {
    id?: true
    isCompleted?: true
    timeSpent?: true
    completedAt?: true
    chapterId?: true
    studentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChapterProgressMaxAggregateInputType = {
    id?: true
    isCompleted?: true
    timeSpent?: true
    completedAt?: true
    chapterId?: true
    studentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChapterProgressCountAggregateInputType = {
    id?: true
    isCompleted?: true
    timeSpent?: true
    completedAt?: true
    chapterId?: true
    studentId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChapterProgressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChapterProgress to aggregate.
     */
    where?: ChapterProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChapterProgresses to fetch.
     */
    orderBy?: ChapterProgressOrderByWithRelationInput | ChapterProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChapterProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChapterProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChapterProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChapterProgresses
    **/
    _count?: true | ChapterProgressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChapterProgressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChapterProgressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChapterProgressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChapterProgressMaxAggregateInputType
  }

  export type GetChapterProgressAggregateType<T extends ChapterProgressAggregateArgs> = {
        [P in keyof T & keyof AggregateChapterProgress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChapterProgress[P]>
      : GetScalarType<T[P], AggregateChapterProgress[P]>
  }




  export type ChapterProgressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChapterProgressWhereInput
    orderBy?: ChapterProgressOrderByWithAggregationInput | ChapterProgressOrderByWithAggregationInput[]
    by: ChapterProgressScalarFieldEnum[] | ChapterProgressScalarFieldEnum
    having?: ChapterProgressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChapterProgressCountAggregateInputType | true
    _avg?: ChapterProgressAvgAggregateInputType
    _sum?: ChapterProgressSumAggregateInputType
    _min?: ChapterProgressMinAggregateInputType
    _max?: ChapterProgressMaxAggregateInputType
  }

  export type ChapterProgressGroupByOutputType = {
    id: string
    isCompleted: boolean
    timeSpent: number
    completedAt: Date | null
    chapterId: string
    studentId: string
    createdAt: Date
    updatedAt: Date
    _count: ChapterProgressCountAggregateOutputType | null
    _avg: ChapterProgressAvgAggregateOutputType | null
    _sum: ChapterProgressSumAggregateOutputType | null
    _min: ChapterProgressMinAggregateOutputType | null
    _max: ChapterProgressMaxAggregateOutputType | null
  }

  type GetChapterProgressGroupByPayload<T extends ChapterProgressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChapterProgressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChapterProgressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChapterProgressGroupByOutputType[P]>
            : GetScalarType<T[P], ChapterProgressGroupByOutputType[P]>
        }
      >
    >


  export type ChapterProgressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isCompleted?: boolean
    timeSpent?: boolean
    completedAt?: boolean
    chapterId?: boolean
    studentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chapter?: boolean | ChapterDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chapterProgress"]>

  export type ChapterProgressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isCompleted?: boolean
    timeSpent?: boolean
    completedAt?: boolean
    chapterId?: boolean
    studentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chapter?: boolean | ChapterDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chapterProgress"]>

  export type ChapterProgressSelectScalar = {
    id?: boolean
    isCompleted?: boolean
    timeSpent?: boolean
    completedAt?: boolean
    chapterId?: boolean
    studentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChapterProgressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chapter?: boolean | ChapterDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ChapterProgressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chapter?: boolean | ChapterDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ChapterProgressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChapterProgress"
    objects: {
      chapter: Prisma.$ChapterPayload<ExtArgs>
      student: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      isCompleted: boolean
      timeSpent: number
      completedAt: Date | null
      chapterId: string
      studentId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["chapterProgress"]>
    composites: {}
  }

  type ChapterProgressGetPayload<S extends boolean | null | undefined | ChapterProgressDefaultArgs> = $Result.GetResult<Prisma.$ChapterProgressPayload, S>

  type ChapterProgressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChapterProgressFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChapterProgressCountAggregateInputType | true
    }

  export interface ChapterProgressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChapterProgress'], meta: { name: 'ChapterProgress' } }
    /**
     * Find zero or one ChapterProgress that matches the filter.
     * @param {ChapterProgressFindUniqueArgs} args - Arguments to find a ChapterProgress
     * @example
     * // Get one ChapterProgress
     * const chapterProgress = await prisma.chapterProgress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChapterProgressFindUniqueArgs>(args: SelectSubset<T, ChapterProgressFindUniqueArgs<ExtArgs>>): Prisma__ChapterProgressClient<$Result.GetResult<Prisma.$ChapterProgressPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ChapterProgress that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ChapterProgressFindUniqueOrThrowArgs} args - Arguments to find a ChapterProgress
     * @example
     * // Get one ChapterProgress
     * const chapterProgress = await prisma.chapterProgress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChapterProgressFindUniqueOrThrowArgs>(args: SelectSubset<T, ChapterProgressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChapterProgressClient<$Result.GetResult<Prisma.$ChapterProgressPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ChapterProgress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterProgressFindFirstArgs} args - Arguments to find a ChapterProgress
     * @example
     * // Get one ChapterProgress
     * const chapterProgress = await prisma.chapterProgress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChapterProgressFindFirstArgs>(args?: SelectSubset<T, ChapterProgressFindFirstArgs<ExtArgs>>): Prisma__ChapterProgressClient<$Result.GetResult<Prisma.$ChapterProgressPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ChapterProgress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterProgressFindFirstOrThrowArgs} args - Arguments to find a ChapterProgress
     * @example
     * // Get one ChapterProgress
     * const chapterProgress = await prisma.chapterProgress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChapterProgressFindFirstOrThrowArgs>(args?: SelectSubset<T, ChapterProgressFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChapterProgressClient<$Result.GetResult<Prisma.$ChapterProgressPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ChapterProgresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterProgressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChapterProgresses
     * const chapterProgresses = await prisma.chapterProgress.findMany()
     * 
     * // Get first 10 ChapterProgresses
     * const chapterProgresses = await prisma.chapterProgress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chapterProgressWithIdOnly = await prisma.chapterProgress.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChapterProgressFindManyArgs>(args?: SelectSubset<T, ChapterProgressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChapterProgressPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ChapterProgress.
     * @param {ChapterProgressCreateArgs} args - Arguments to create a ChapterProgress.
     * @example
     * // Create one ChapterProgress
     * const ChapterProgress = await prisma.chapterProgress.create({
     *   data: {
     *     // ... data to create a ChapterProgress
     *   }
     * })
     * 
     */
    create<T extends ChapterProgressCreateArgs>(args: SelectSubset<T, ChapterProgressCreateArgs<ExtArgs>>): Prisma__ChapterProgressClient<$Result.GetResult<Prisma.$ChapterProgressPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ChapterProgresses.
     * @param {ChapterProgressCreateManyArgs} args - Arguments to create many ChapterProgresses.
     * @example
     * // Create many ChapterProgresses
     * const chapterProgress = await prisma.chapterProgress.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChapterProgressCreateManyArgs>(args?: SelectSubset<T, ChapterProgressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChapterProgresses and returns the data saved in the database.
     * @param {ChapterProgressCreateManyAndReturnArgs} args - Arguments to create many ChapterProgresses.
     * @example
     * // Create many ChapterProgresses
     * const chapterProgress = await prisma.chapterProgress.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChapterProgresses and only return the `id`
     * const chapterProgressWithIdOnly = await prisma.chapterProgress.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChapterProgressCreateManyAndReturnArgs>(args?: SelectSubset<T, ChapterProgressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChapterProgressPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ChapterProgress.
     * @param {ChapterProgressDeleteArgs} args - Arguments to delete one ChapterProgress.
     * @example
     * // Delete one ChapterProgress
     * const ChapterProgress = await prisma.chapterProgress.delete({
     *   where: {
     *     // ... filter to delete one ChapterProgress
     *   }
     * })
     * 
     */
    delete<T extends ChapterProgressDeleteArgs>(args: SelectSubset<T, ChapterProgressDeleteArgs<ExtArgs>>): Prisma__ChapterProgressClient<$Result.GetResult<Prisma.$ChapterProgressPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ChapterProgress.
     * @param {ChapterProgressUpdateArgs} args - Arguments to update one ChapterProgress.
     * @example
     * // Update one ChapterProgress
     * const chapterProgress = await prisma.chapterProgress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChapterProgressUpdateArgs>(args: SelectSubset<T, ChapterProgressUpdateArgs<ExtArgs>>): Prisma__ChapterProgressClient<$Result.GetResult<Prisma.$ChapterProgressPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ChapterProgresses.
     * @param {ChapterProgressDeleteManyArgs} args - Arguments to filter ChapterProgresses to delete.
     * @example
     * // Delete a few ChapterProgresses
     * const { count } = await prisma.chapterProgress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChapterProgressDeleteManyArgs>(args?: SelectSubset<T, ChapterProgressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChapterProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterProgressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChapterProgresses
     * const chapterProgress = await prisma.chapterProgress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChapterProgressUpdateManyArgs>(args: SelectSubset<T, ChapterProgressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChapterProgress.
     * @param {ChapterProgressUpsertArgs} args - Arguments to update or create a ChapterProgress.
     * @example
     * // Update or create a ChapterProgress
     * const chapterProgress = await prisma.chapterProgress.upsert({
     *   create: {
     *     // ... data to create a ChapterProgress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChapterProgress we want to update
     *   }
     * })
     */
    upsert<T extends ChapterProgressUpsertArgs>(args: SelectSubset<T, ChapterProgressUpsertArgs<ExtArgs>>): Prisma__ChapterProgressClient<$Result.GetResult<Prisma.$ChapterProgressPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ChapterProgresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterProgressCountArgs} args - Arguments to filter ChapterProgresses to count.
     * @example
     * // Count the number of ChapterProgresses
     * const count = await prisma.chapterProgress.count({
     *   where: {
     *     // ... the filter for the ChapterProgresses we want to count
     *   }
     * })
    **/
    count<T extends ChapterProgressCountArgs>(
      args?: Subset<T, ChapterProgressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChapterProgressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChapterProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterProgressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChapterProgressAggregateArgs>(args: Subset<T, ChapterProgressAggregateArgs>): Prisma.PrismaPromise<GetChapterProgressAggregateType<T>>

    /**
     * Group by ChapterProgress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterProgressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChapterProgressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChapterProgressGroupByArgs['orderBy'] }
        : { orderBy?: ChapterProgressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChapterProgressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChapterProgressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChapterProgress model
   */
  readonly fields: ChapterProgressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChapterProgress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChapterProgressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chapter<T extends ChapterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChapterDefaultArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChapterProgress model
   */ 
  interface ChapterProgressFieldRefs {
    readonly id: FieldRef<"ChapterProgress", 'String'>
    readonly isCompleted: FieldRef<"ChapterProgress", 'Boolean'>
    readonly timeSpent: FieldRef<"ChapterProgress", 'Int'>
    readonly completedAt: FieldRef<"ChapterProgress", 'DateTime'>
    readonly chapterId: FieldRef<"ChapterProgress", 'String'>
    readonly studentId: FieldRef<"ChapterProgress", 'String'>
    readonly createdAt: FieldRef<"ChapterProgress", 'DateTime'>
    readonly updatedAt: FieldRef<"ChapterProgress", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChapterProgress findUnique
   */
  export type ChapterProgressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterProgress
     */
    select?: ChapterProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterProgressInclude<ExtArgs> | null
    /**
     * Filter, which ChapterProgress to fetch.
     */
    where: ChapterProgressWhereUniqueInput
  }

  /**
   * ChapterProgress findUniqueOrThrow
   */
  export type ChapterProgressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterProgress
     */
    select?: ChapterProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterProgressInclude<ExtArgs> | null
    /**
     * Filter, which ChapterProgress to fetch.
     */
    where: ChapterProgressWhereUniqueInput
  }

  /**
   * ChapterProgress findFirst
   */
  export type ChapterProgressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterProgress
     */
    select?: ChapterProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterProgressInclude<ExtArgs> | null
    /**
     * Filter, which ChapterProgress to fetch.
     */
    where?: ChapterProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChapterProgresses to fetch.
     */
    orderBy?: ChapterProgressOrderByWithRelationInput | ChapterProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChapterProgresses.
     */
    cursor?: ChapterProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChapterProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChapterProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChapterProgresses.
     */
    distinct?: ChapterProgressScalarFieldEnum | ChapterProgressScalarFieldEnum[]
  }

  /**
   * ChapterProgress findFirstOrThrow
   */
  export type ChapterProgressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterProgress
     */
    select?: ChapterProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterProgressInclude<ExtArgs> | null
    /**
     * Filter, which ChapterProgress to fetch.
     */
    where?: ChapterProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChapterProgresses to fetch.
     */
    orderBy?: ChapterProgressOrderByWithRelationInput | ChapterProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChapterProgresses.
     */
    cursor?: ChapterProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChapterProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChapterProgresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChapterProgresses.
     */
    distinct?: ChapterProgressScalarFieldEnum | ChapterProgressScalarFieldEnum[]
  }

  /**
   * ChapterProgress findMany
   */
  export type ChapterProgressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterProgress
     */
    select?: ChapterProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterProgressInclude<ExtArgs> | null
    /**
     * Filter, which ChapterProgresses to fetch.
     */
    where?: ChapterProgressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChapterProgresses to fetch.
     */
    orderBy?: ChapterProgressOrderByWithRelationInput | ChapterProgressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChapterProgresses.
     */
    cursor?: ChapterProgressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChapterProgresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChapterProgresses.
     */
    skip?: number
    distinct?: ChapterProgressScalarFieldEnum | ChapterProgressScalarFieldEnum[]
  }

  /**
   * ChapterProgress create
   */
  export type ChapterProgressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterProgress
     */
    select?: ChapterProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterProgressInclude<ExtArgs> | null
    /**
     * The data needed to create a ChapterProgress.
     */
    data: XOR<ChapterProgressCreateInput, ChapterProgressUncheckedCreateInput>
  }

  /**
   * ChapterProgress createMany
   */
  export type ChapterProgressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChapterProgresses.
     */
    data: ChapterProgressCreateManyInput | ChapterProgressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChapterProgress createManyAndReturn
   */
  export type ChapterProgressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterProgress
     */
    select?: ChapterProgressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ChapterProgresses.
     */
    data: ChapterProgressCreateManyInput | ChapterProgressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterProgressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChapterProgress update
   */
  export type ChapterProgressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterProgress
     */
    select?: ChapterProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterProgressInclude<ExtArgs> | null
    /**
     * The data needed to update a ChapterProgress.
     */
    data: XOR<ChapterProgressUpdateInput, ChapterProgressUncheckedUpdateInput>
    /**
     * Choose, which ChapterProgress to update.
     */
    where: ChapterProgressWhereUniqueInput
  }

  /**
   * ChapterProgress updateMany
   */
  export type ChapterProgressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChapterProgresses.
     */
    data: XOR<ChapterProgressUpdateManyMutationInput, ChapterProgressUncheckedUpdateManyInput>
    /**
     * Filter which ChapterProgresses to update
     */
    where?: ChapterProgressWhereInput
  }

  /**
   * ChapterProgress upsert
   */
  export type ChapterProgressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterProgress
     */
    select?: ChapterProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterProgressInclude<ExtArgs> | null
    /**
     * The filter to search for the ChapterProgress to update in case it exists.
     */
    where: ChapterProgressWhereUniqueInput
    /**
     * In case the ChapterProgress found by the `where` argument doesn't exist, create a new ChapterProgress with this data.
     */
    create: XOR<ChapterProgressCreateInput, ChapterProgressUncheckedCreateInput>
    /**
     * In case the ChapterProgress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChapterProgressUpdateInput, ChapterProgressUncheckedUpdateInput>
  }

  /**
   * ChapterProgress delete
   */
  export type ChapterProgressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterProgress
     */
    select?: ChapterProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterProgressInclude<ExtArgs> | null
    /**
     * Filter which ChapterProgress to delete.
     */
    where: ChapterProgressWhereUniqueInput
  }

  /**
   * ChapterProgress deleteMany
   */
  export type ChapterProgressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChapterProgresses to delete
     */
    where?: ChapterProgressWhereInput
  }

  /**
   * ChapterProgress without action
   */
  export type ChapterProgressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterProgress
     */
    select?: ChapterProgressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterProgressInclude<ExtArgs> | null
  }


  /**
   * Model Assessment
   */

  export type AggregateAssessment = {
    _count: AssessmentCountAggregateOutputType | null
    _avg: AssessmentAvgAggregateOutputType | null
    _sum: AssessmentSumAggregateOutputType | null
    _min: AssessmentMinAggregateOutputType | null
    _max: AssessmentMaxAggregateOutputType | null
  }

  export type AssessmentAvgAggregateOutputType = {
    timeLimitSeconds: number | null
    maxAttempts: number | null
    order: number | null
  }

  export type AssessmentSumAggregateOutputType = {
    timeLimitSeconds: number | null
    maxAttempts: number | null
    order: number | null
  }

  export type AssessmentMinAggregateOutputType = {
    id: string | null
    title: string | null
    type: string | null
    scope: string | null
    timeLimitSeconds: number | null
    maxAttempts: number | null
    isPublished: boolean | null
    order: number | null
    courseId: string | null
    chapterId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssessmentMaxAggregateOutputType = {
    id: string | null
    title: string | null
    type: string | null
    scope: string | null
    timeLimitSeconds: number | null
    maxAttempts: number | null
    isPublished: boolean | null
    order: number | null
    courseId: string | null
    chapterId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssessmentCountAggregateOutputType = {
    id: number
    title: number
    type: number
    scope: number
    timeLimitSeconds: number
    maxAttempts: number
    isPublished: number
    order: number
    courseId: number
    chapterId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AssessmentAvgAggregateInputType = {
    timeLimitSeconds?: true
    maxAttempts?: true
    order?: true
  }

  export type AssessmentSumAggregateInputType = {
    timeLimitSeconds?: true
    maxAttempts?: true
    order?: true
  }

  export type AssessmentMinAggregateInputType = {
    id?: true
    title?: true
    type?: true
    scope?: true
    timeLimitSeconds?: true
    maxAttempts?: true
    isPublished?: true
    order?: true
    courseId?: true
    chapterId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssessmentMaxAggregateInputType = {
    id?: true
    title?: true
    type?: true
    scope?: true
    timeLimitSeconds?: true
    maxAttempts?: true
    isPublished?: true
    order?: true
    courseId?: true
    chapterId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssessmentCountAggregateInputType = {
    id?: true
    title?: true
    type?: true
    scope?: true
    timeLimitSeconds?: true
    maxAttempts?: true
    isPublished?: true
    order?: true
    courseId?: true
    chapterId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AssessmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assessment to aggregate.
     */
    where?: AssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assessments to fetch.
     */
    orderBy?: AssessmentOrderByWithRelationInput | AssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Assessments
    **/
    _count?: true | AssessmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssessmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssessmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssessmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssessmentMaxAggregateInputType
  }

  export type GetAssessmentAggregateType<T extends AssessmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAssessment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssessment[P]>
      : GetScalarType<T[P], AggregateAssessment[P]>
  }




  export type AssessmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssessmentWhereInput
    orderBy?: AssessmentOrderByWithAggregationInput | AssessmentOrderByWithAggregationInput[]
    by: AssessmentScalarFieldEnum[] | AssessmentScalarFieldEnum
    having?: AssessmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssessmentCountAggregateInputType | true
    _avg?: AssessmentAvgAggregateInputType
    _sum?: AssessmentSumAggregateInputType
    _min?: AssessmentMinAggregateInputType
    _max?: AssessmentMaxAggregateInputType
  }

  export type AssessmentGroupByOutputType = {
    id: string
    title: string
    type: string
    scope: string
    timeLimitSeconds: number | null
    maxAttempts: number
    isPublished: boolean
    order: number | null
    courseId: string | null
    chapterId: string | null
    createdAt: Date
    updatedAt: Date
    _count: AssessmentCountAggregateOutputType | null
    _avg: AssessmentAvgAggregateOutputType | null
    _sum: AssessmentSumAggregateOutputType | null
    _min: AssessmentMinAggregateOutputType | null
    _max: AssessmentMaxAggregateOutputType | null
  }

  type GetAssessmentGroupByPayload<T extends AssessmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssessmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssessmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssessmentGroupByOutputType[P]>
            : GetScalarType<T[P], AssessmentGroupByOutputType[P]>
        }
      >
    >


  export type AssessmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    type?: boolean
    scope?: boolean
    timeLimitSeconds?: boolean
    maxAttempts?: boolean
    isPublished?: boolean
    order?: boolean
    courseId?: boolean
    chapterId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    questions?: boolean | Assessment$questionsArgs<ExtArgs>
    attempts?: boolean | Assessment$attemptsArgs<ExtArgs>
    chapter?: boolean | Assessment$chapterArgs<ExtArgs>
    course?: boolean | Assessment$courseArgs<ExtArgs>
    _count?: boolean | AssessmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assessment"]>

  export type AssessmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    type?: boolean
    scope?: boolean
    timeLimitSeconds?: boolean
    maxAttempts?: boolean
    isPublished?: boolean
    order?: boolean
    courseId?: boolean
    chapterId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chapter?: boolean | Assessment$chapterArgs<ExtArgs>
    course?: boolean | Assessment$courseArgs<ExtArgs>
  }, ExtArgs["result"]["assessment"]>

  export type AssessmentSelectScalar = {
    id?: boolean
    title?: boolean
    type?: boolean
    scope?: boolean
    timeLimitSeconds?: boolean
    maxAttempts?: boolean
    isPublished?: boolean
    order?: boolean
    courseId?: boolean
    chapterId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AssessmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | Assessment$questionsArgs<ExtArgs>
    attempts?: boolean | Assessment$attemptsArgs<ExtArgs>
    chapter?: boolean | Assessment$chapterArgs<ExtArgs>
    course?: boolean | Assessment$courseArgs<ExtArgs>
    _count?: boolean | AssessmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AssessmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chapter?: boolean | Assessment$chapterArgs<ExtArgs>
    course?: boolean | Assessment$courseArgs<ExtArgs>
  }

  export type $AssessmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Assessment"
    objects: {
      questions: Prisma.$AssessmentQuestionPayload<ExtArgs>[]
      attempts: Prisma.$AssessmentAttemptPayload<ExtArgs>[]
      chapter: Prisma.$ChapterPayload<ExtArgs> | null
      course: Prisma.$CoursePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      type: string
      scope: string
      timeLimitSeconds: number | null
      maxAttempts: number
      isPublished: boolean
      order: number | null
      courseId: string | null
      chapterId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["assessment"]>
    composites: {}
  }

  type AssessmentGetPayload<S extends boolean | null | undefined | AssessmentDefaultArgs> = $Result.GetResult<Prisma.$AssessmentPayload, S>

  type AssessmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AssessmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AssessmentCountAggregateInputType | true
    }

  export interface AssessmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Assessment'], meta: { name: 'Assessment' } }
    /**
     * Find zero or one Assessment that matches the filter.
     * @param {AssessmentFindUniqueArgs} args - Arguments to find a Assessment
     * @example
     * // Get one Assessment
     * const assessment = await prisma.assessment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssessmentFindUniqueArgs>(args: SelectSubset<T, AssessmentFindUniqueArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Assessment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AssessmentFindUniqueOrThrowArgs} args - Arguments to find a Assessment
     * @example
     * // Get one Assessment
     * const assessment = await prisma.assessment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssessmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AssessmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Assessment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentFindFirstArgs} args - Arguments to find a Assessment
     * @example
     * // Get one Assessment
     * const assessment = await prisma.assessment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssessmentFindFirstArgs>(args?: SelectSubset<T, AssessmentFindFirstArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Assessment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentFindFirstOrThrowArgs} args - Arguments to find a Assessment
     * @example
     * // Get one Assessment
     * const assessment = await prisma.assessment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssessmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AssessmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Assessments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assessments
     * const assessments = await prisma.assessment.findMany()
     * 
     * // Get first 10 Assessments
     * const assessments = await prisma.assessment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assessmentWithIdOnly = await prisma.assessment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssessmentFindManyArgs>(args?: SelectSubset<T, AssessmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Assessment.
     * @param {AssessmentCreateArgs} args - Arguments to create a Assessment.
     * @example
     * // Create one Assessment
     * const Assessment = await prisma.assessment.create({
     *   data: {
     *     // ... data to create a Assessment
     *   }
     * })
     * 
     */
    create<T extends AssessmentCreateArgs>(args: SelectSubset<T, AssessmentCreateArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Assessments.
     * @param {AssessmentCreateManyArgs} args - Arguments to create many Assessments.
     * @example
     * // Create many Assessments
     * const assessment = await prisma.assessment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssessmentCreateManyArgs>(args?: SelectSubset<T, AssessmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Assessments and returns the data saved in the database.
     * @param {AssessmentCreateManyAndReturnArgs} args - Arguments to create many Assessments.
     * @example
     * // Create many Assessments
     * const assessment = await prisma.assessment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Assessments and only return the `id`
     * const assessmentWithIdOnly = await prisma.assessment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssessmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AssessmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Assessment.
     * @param {AssessmentDeleteArgs} args - Arguments to delete one Assessment.
     * @example
     * // Delete one Assessment
     * const Assessment = await prisma.assessment.delete({
     *   where: {
     *     // ... filter to delete one Assessment
     *   }
     * })
     * 
     */
    delete<T extends AssessmentDeleteArgs>(args: SelectSubset<T, AssessmentDeleteArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Assessment.
     * @param {AssessmentUpdateArgs} args - Arguments to update one Assessment.
     * @example
     * // Update one Assessment
     * const assessment = await prisma.assessment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssessmentUpdateArgs>(args: SelectSubset<T, AssessmentUpdateArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Assessments.
     * @param {AssessmentDeleteManyArgs} args - Arguments to filter Assessments to delete.
     * @example
     * // Delete a few Assessments
     * const { count } = await prisma.assessment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssessmentDeleteManyArgs>(args?: SelectSubset<T, AssessmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assessments
     * const assessment = await prisma.assessment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssessmentUpdateManyArgs>(args: SelectSubset<T, AssessmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Assessment.
     * @param {AssessmentUpsertArgs} args - Arguments to update or create a Assessment.
     * @example
     * // Update or create a Assessment
     * const assessment = await prisma.assessment.upsert({
     *   create: {
     *     // ... data to create a Assessment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Assessment we want to update
     *   }
     * })
     */
    upsert<T extends AssessmentUpsertArgs>(args: SelectSubset<T, AssessmentUpsertArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Assessments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentCountArgs} args - Arguments to filter Assessments to count.
     * @example
     * // Count the number of Assessments
     * const count = await prisma.assessment.count({
     *   where: {
     *     // ... the filter for the Assessments we want to count
     *   }
     * })
    **/
    count<T extends AssessmentCountArgs>(
      args?: Subset<T, AssessmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssessmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Assessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssessmentAggregateArgs>(args: Subset<T, AssessmentAggregateArgs>): Prisma.PrismaPromise<GetAssessmentAggregateType<T>>

    /**
     * Group by Assessment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssessmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssessmentGroupByArgs['orderBy'] }
        : { orderBy?: AssessmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssessmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssessmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Assessment model
   */
  readonly fields: AssessmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Assessment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssessmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    questions<T extends Assessment$questionsArgs<ExtArgs> = {}>(args?: Subset<T, Assessment$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentQuestionPayload<ExtArgs>, T, "findMany"> | Null>
    attempts<T extends Assessment$attemptsArgs<ExtArgs> = {}>(args?: Subset<T, Assessment$attemptsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentAttemptPayload<ExtArgs>, T, "findMany"> | Null>
    chapter<T extends Assessment$chapterArgs<ExtArgs> = {}>(args?: Subset<T, Assessment$chapterArgs<ExtArgs>>): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    course<T extends Assessment$courseArgs<ExtArgs> = {}>(args?: Subset<T, Assessment$courseArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Assessment model
   */ 
  interface AssessmentFieldRefs {
    readonly id: FieldRef<"Assessment", 'String'>
    readonly title: FieldRef<"Assessment", 'String'>
    readonly type: FieldRef<"Assessment", 'String'>
    readonly scope: FieldRef<"Assessment", 'String'>
    readonly timeLimitSeconds: FieldRef<"Assessment", 'Int'>
    readonly maxAttempts: FieldRef<"Assessment", 'Int'>
    readonly isPublished: FieldRef<"Assessment", 'Boolean'>
    readonly order: FieldRef<"Assessment", 'Int'>
    readonly courseId: FieldRef<"Assessment", 'String'>
    readonly chapterId: FieldRef<"Assessment", 'String'>
    readonly createdAt: FieldRef<"Assessment", 'DateTime'>
    readonly updatedAt: FieldRef<"Assessment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Assessment findUnique
   */
  export type AssessmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * Filter, which Assessment to fetch.
     */
    where: AssessmentWhereUniqueInput
  }

  /**
   * Assessment findUniqueOrThrow
   */
  export type AssessmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * Filter, which Assessment to fetch.
     */
    where: AssessmentWhereUniqueInput
  }

  /**
   * Assessment findFirst
   */
  export type AssessmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * Filter, which Assessment to fetch.
     */
    where?: AssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assessments to fetch.
     */
    orderBy?: AssessmentOrderByWithRelationInput | AssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assessments.
     */
    cursor?: AssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assessments.
     */
    distinct?: AssessmentScalarFieldEnum | AssessmentScalarFieldEnum[]
  }

  /**
   * Assessment findFirstOrThrow
   */
  export type AssessmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * Filter, which Assessment to fetch.
     */
    where?: AssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assessments to fetch.
     */
    orderBy?: AssessmentOrderByWithRelationInput | AssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assessments.
     */
    cursor?: AssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assessments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assessments.
     */
    distinct?: AssessmentScalarFieldEnum | AssessmentScalarFieldEnum[]
  }

  /**
   * Assessment findMany
   */
  export type AssessmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * Filter, which Assessments to fetch.
     */
    where?: AssessmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assessments to fetch.
     */
    orderBy?: AssessmentOrderByWithRelationInput | AssessmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Assessments.
     */
    cursor?: AssessmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assessments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assessments.
     */
    skip?: number
    distinct?: AssessmentScalarFieldEnum | AssessmentScalarFieldEnum[]
  }

  /**
   * Assessment create
   */
  export type AssessmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Assessment.
     */
    data: XOR<AssessmentCreateInput, AssessmentUncheckedCreateInput>
  }

  /**
   * Assessment createMany
   */
  export type AssessmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Assessments.
     */
    data: AssessmentCreateManyInput | AssessmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Assessment createManyAndReturn
   */
  export type AssessmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Assessments.
     */
    data: AssessmentCreateManyInput | AssessmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Assessment update
   */
  export type AssessmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Assessment.
     */
    data: XOR<AssessmentUpdateInput, AssessmentUncheckedUpdateInput>
    /**
     * Choose, which Assessment to update.
     */
    where: AssessmentWhereUniqueInput
  }

  /**
   * Assessment updateMany
   */
  export type AssessmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Assessments.
     */
    data: XOR<AssessmentUpdateManyMutationInput, AssessmentUncheckedUpdateManyInput>
    /**
     * Filter which Assessments to update
     */
    where?: AssessmentWhereInput
  }

  /**
   * Assessment upsert
   */
  export type AssessmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Assessment to update in case it exists.
     */
    where: AssessmentWhereUniqueInput
    /**
     * In case the Assessment found by the `where` argument doesn't exist, create a new Assessment with this data.
     */
    create: XOR<AssessmentCreateInput, AssessmentUncheckedCreateInput>
    /**
     * In case the Assessment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssessmentUpdateInput, AssessmentUncheckedUpdateInput>
  }

  /**
   * Assessment delete
   */
  export type AssessmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
    /**
     * Filter which Assessment to delete.
     */
    where: AssessmentWhereUniqueInput
  }

  /**
   * Assessment deleteMany
   */
  export type AssessmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assessments to delete
     */
    where?: AssessmentWhereInput
  }

  /**
   * Assessment.questions
   */
  export type Assessment$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentQuestion
     */
    select?: AssessmentQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentQuestionInclude<ExtArgs> | null
    where?: AssessmentQuestionWhereInput
    orderBy?: AssessmentQuestionOrderByWithRelationInput | AssessmentQuestionOrderByWithRelationInput[]
    cursor?: AssessmentQuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssessmentQuestionScalarFieldEnum | AssessmentQuestionScalarFieldEnum[]
  }

  /**
   * Assessment.attempts
   */
  export type Assessment$attemptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentAttempt
     */
    select?: AssessmentAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentAttemptInclude<ExtArgs> | null
    where?: AssessmentAttemptWhereInput
    orderBy?: AssessmentAttemptOrderByWithRelationInput | AssessmentAttemptOrderByWithRelationInput[]
    cursor?: AssessmentAttemptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssessmentAttemptScalarFieldEnum | AssessmentAttemptScalarFieldEnum[]
  }

  /**
   * Assessment.chapter
   */
  export type Assessment$chapterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChapterInclude<ExtArgs> | null
    where?: ChapterWhereInput
  }

  /**
   * Assessment.course
   */
  export type Assessment$courseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
  }

  /**
   * Assessment without action
   */
  export type AssessmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assessment
     */
    select?: AssessmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentInclude<ExtArgs> | null
  }


  /**
   * Model AssessmentQuestion
   */

  export type AggregateAssessmentQuestion = {
    _count: AssessmentQuestionCountAggregateOutputType | null
    _avg: AssessmentQuestionAvgAggregateOutputType | null
    _sum: AssessmentQuestionSumAggregateOutputType | null
    _min: AssessmentQuestionMinAggregateOutputType | null
    _max: AssessmentQuestionMaxAggregateOutputType | null
  }

  export type AssessmentQuestionAvgAggregateOutputType = {
    correctOptionIndex: number | null
    correctOptionIndexes: number | null
    points: number | null
    order: number | null
  }

  export type AssessmentQuestionSumAggregateOutputType = {
    correctOptionIndex: number | null
    correctOptionIndexes: number[]
    points: number | null
    order: number | null
  }

  export type AssessmentQuestionMinAggregateOutputType = {
    id: string | null
    assessmentId: string | null
    prompt: string | null
    type: string | null
    correctOptionIndex: number | null
    correctText: string | null
    sampleAnswer: string | null
    points: number | null
    order: number | null
  }

  export type AssessmentQuestionMaxAggregateOutputType = {
    id: string | null
    assessmentId: string | null
    prompt: string | null
    type: string | null
    correctOptionIndex: number | null
    correctText: string | null
    sampleAnswer: string | null
    points: number | null
    order: number | null
  }

  export type AssessmentQuestionCountAggregateOutputType = {
    id: number
    assessmentId: number
    prompt: number
    type: number
    options: number
    correctOptionIndex: number
    correctOptionIndexes: number
    correctText: number
    pairs: number
    sampleAnswer: number
    points: number
    order: number
    _all: number
  }


  export type AssessmentQuestionAvgAggregateInputType = {
    correctOptionIndex?: true
    correctOptionIndexes?: true
    points?: true
    order?: true
  }

  export type AssessmentQuestionSumAggregateInputType = {
    correctOptionIndex?: true
    correctOptionIndexes?: true
    points?: true
    order?: true
  }

  export type AssessmentQuestionMinAggregateInputType = {
    id?: true
    assessmentId?: true
    prompt?: true
    type?: true
    correctOptionIndex?: true
    correctText?: true
    sampleAnswer?: true
    points?: true
    order?: true
  }

  export type AssessmentQuestionMaxAggregateInputType = {
    id?: true
    assessmentId?: true
    prompt?: true
    type?: true
    correctOptionIndex?: true
    correctText?: true
    sampleAnswer?: true
    points?: true
    order?: true
  }

  export type AssessmentQuestionCountAggregateInputType = {
    id?: true
    assessmentId?: true
    prompt?: true
    type?: true
    options?: true
    correctOptionIndex?: true
    correctOptionIndexes?: true
    correctText?: true
    pairs?: true
    sampleAnswer?: true
    points?: true
    order?: true
    _all?: true
  }

  export type AssessmentQuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssessmentQuestion to aggregate.
     */
    where?: AssessmentQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssessmentQuestions to fetch.
     */
    orderBy?: AssessmentQuestionOrderByWithRelationInput | AssessmentQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssessmentQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssessmentQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssessmentQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AssessmentQuestions
    **/
    _count?: true | AssessmentQuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssessmentQuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssessmentQuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssessmentQuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssessmentQuestionMaxAggregateInputType
  }

  export type GetAssessmentQuestionAggregateType<T extends AssessmentQuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateAssessmentQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssessmentQuestion[P]>
      : GetScalarType<T[P], AggregateAssessmentQuestion[P]>
  }




  export type AssessmentQuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssessmentQuestionWhereInput
    orderBy?: AssessmentQuestionOrderByWithAggregationInput | AssessmentQuestionOrderByWithAggregationInput[]
    by: AssessmentQuestionScalarFieldEnum[] | AssessmentQuestionScalarFieldEnum
    having?: AssessmentQuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssessmentQuestionCountAggregateInputType | true
    _avg?: AssessmentQuestionAvgAggregateInputType
    _sum?: AssessmentQuestionSumAggregateInputType
    _min?: AssessmentQuestionMinAggregateInputType
    _max?: AssessmentQuestionMaxAggregateInputType
  }

  export type AssessmentQuestionGroupByOutputType = {
    id: string
    assessmentId: string
    prompt: string
    type: string
    options: string[]
    correctOptionIndex: number | null
    correctOptionIndexes: number[]
    correctText: string | null
    pairs: JsonValue | null
    sampleAnswer: string | null
    points: number
    order: number
    _count: AssessmentQuestionCountAggregateOutputType | null
    _avg: AssessmentQuestionAvgAggregateOutputType | null
    _sum: AssessmentQuestionSumAggregateOutputType | null
    _min: AssessmentQuestionMinAggregateOutputType | null
    _max: AssessmentQuestionMaxAggregateOutputType | null
  }

  type GetAssessmentQuestionGroupByPayload<T extends AssessmentQuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssessmentQuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssessmentQuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssessmentQuestionGroupByOutputType[P]>
            : GetScalarType<T[P], AssessmentQuestionGroupByOutputType[P]>
        }
      >
    >


  export type AssessmentQuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assessmentId?: boolean
    prompt?: boolean
    type?: boolean
    options?: boolean
    correctOptionIndex?: boolean
    correctOptionIndexes?: boolean
    correctText?: boolean
    pairs?: boolean
    sampleAnswer?: boolean
    points?: boolean
    order?: boolean
    assessment?: boolean | AssessmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assessmentQuestion"]>

  export type AssessmentQuestionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assessmentId?: boolean
    prompt?: boolean
    type?: boolean
    options?: boolean
    correctOptionIndex?: boolean
    correctOptionIndexes?: boolean
    correctText?: boolean
    pairs?: boolean
    sampleAnswer?: boolean
    points?: boolean
    order?: boolean
    assessment?: boolean | AssessmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assessmentQuestion"]>

  export type AssessmentQuestionSelectScalar = {
    id?: boolean
    assessmentId?: boolean
    prompt?: boolean
    type?: boolean
    options?: boolean
    correctOptionIndex?: boolean
    correctOptionIndexes?: boolean
    correctText?: boolean
    pairs?: boolean
    sampleAnswer?: boolean
    points?: boolean
    order?: boolean
  }

  export type AssessmentQuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assessment?: boolean | AssessmentDefaultArgs<ExtArgs>
  }
  export type AssessmentQuestionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assessment?: boolean | AssessmentDefaultArgs<ExtArgs>
  }

  export type $AssessmentQuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AssessmentQuestion"
    objects: {
      assessment: Prisma.$AssessmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      assessmentId: string
      prompt: string
      type: string
      options: string[]
      correctOptionIndex: number | null
      correctOptionIndexes: number[]
      correctText: string | null
      pairs: Prisma.JsonValue | null
      sampleAnswer: string | null
      points: number
      order: number
    }, ExtArgs["result"]["assessmentQuestion"]>
    composites: {}
  }

  type AssessmentQuestionGetPayload<S extends boolean | null | undefined | AssessmentQuestionDefaultArgs> = $Result.GetResult<Prisma.$AssessmentQuestionPayload, S>

  type AssessmentQuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AssessmentQuestionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AssessmentQuestionCountAggregateInputType | true
    }

  export interface AssessmentQuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AssessmentQuestion'], meta: { name: 'AssessmentQuestion' } }
    /**
     * Find zero or one AssessmentQuestion that matches the filter.
     * @param {AssessmentQuestionFindUniqueArgs} args - Arguments to find a AssessmentQuestion
     * @example
     * // Get one AssessmentQuestion
     * const assessmentQuestion = await prisma.assessmentQuestion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssessmentQuestionFindUniqueArgs>(args: SelectSubset<T, AssessmentQuestionFindUniqueArgs<ExtArgs>>): Prisma__AssessmentQuestionClient<$Result.GetResult<Prisma.$AssessmentQuestionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AssessmentQuestion that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AssessmentQuestionFindUniqueOrThrowArgs} args - Arguments to find a AssessmentQuestion
     * @example
     * // Get one AssessmentQuestion
     * const assessmentQuestion = await prisma.assessmentQuestion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssessmentQuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, AssessmentQuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssessmentQuestionClient<$Result.GetResult<Prisma.$AssessmentQuestionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AssessmentQuestion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentQuestionFindFirstArgs} args - Arguments to find a AssessmentQuestion
     * @example
     * // Get one AssessmentQuestion
     * const assessmentQuestion = await prisma.assessmentQuestion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssessmentQuestionFindFirstArgs>(args?: SelectSubset<T, AssessmentQuestionFindFirstArgs<ExtArgs>>): Prisma__AssessmentQuestionClient<$Result.GetResult<Prisma.$AssessmentQuestionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AssessmentQuestion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentQuestionFindFirstOrThrowArgs} args - Arguments to find a AssessmentQuestion
     * @example
     * // Get one AssessmentQuestion
     * const assessmentQuestion = await prisma.assessmentQuestion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssessmentQuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, AssessmentQuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssessmentQuestionClient<$Result.GetResult<Prisma.$AssessmentQuestionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AssessmentQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentQuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AssessmentQuestions
     * const assessmentQuestions = await prisma.assessmentQuestion.findMany()
     * 
     * // Get first 10 AssessmentQuestions
     * const assessmentQuestions = await prisma.assessmentQuestion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assessmentQuestionWithIdOnly = await prisma.assessmentQuestion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssessmentQuestionFindManyArgs>(args?: SelectSubset<T, AssessmentQuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentQuestionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AssessmentQuestion.
     * @param {AssessmentQuestionCreateArgs} args - Arguments to create a AssessmentQuestion.
     * @example
     * // Create one AssessmentQuestion
     * const AssessmentQuestion = await prisma.assessmentQuestion.create({
     *   data: {
     *     // ... data to create a AssessmentQuestion
     *   }
     * })
     * 
     */
    create<T extends AssessmentQuestionCreateArgs>(args: SelectSubset<T, AssessmentQuestionCreateArgs<ExtArgs>>): Prisma__AssessmentQuestionClient<$Result.GetResult<Prisma.$AssessmentQuestionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AssessmentQuestions.
     * @param {AssessmentQuestionCreateManyArgs} args - Arguments to create many AssessmentQuestions.
     * @example
     * // Create many AssessmentQuestions
     * const assessmentQuestion = await prisma.assessmentQuestion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssessmentQuestionCreateManyArgs>(args?: SelectSubset<T, AssessmentQuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AssessmentQuestions and returns the data saved in the database.
     * @param {AssessmentQuestionCreateManyAndReturnArgs} args - Arguments to create many AssessmentQuestions.
     * @example
     * // Create many AssessmentQuestions
     * const assessmentQuestion = await prisma.assessmentQuestion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AssessmentQuestions and only return the `id`
     * const assessmentQuestionWithIdOnly = await prisma.assessmentQuestion.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssessmentQuestionCreateManyAndReturnArgs>(args?: SelectSubset<T, AssessmentQuestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentQuestionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AssessmentQuestion.
     * @param {AssessmentQuestionDeleteArgs} args - Arguments to delete one AssessmentQuestion.
     * @example
     * // Delete one AssessmentQuestion
     * const AssessmentQuestion = await prisma.assessmentQuestion.delete({
     *   where: {
     *     // ... filter to delete one AssessmentQuestion
     *   }
     * })
     * 
     */
    delete<T extends AssessmentQuestionDeleteArgs>(args: SelectSubset<T, AssessmentQuestionDeleteArgs<ExtArgs>>): Prisma__AssessmentQuestionClient<$Result.GetResult<Prisma.$AssessmentQuestionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AssessmentQuestion.
     * @param {AssessmentQuestionUpdateArgs} args - Arguments to update one AssessmentQuestion.
     * @example
     * // Update one AssessmentQuestion
     * const assessmentQuestion = await prisma.assessmentQuestion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssessmentQuestionUpdateArgs>(args: SelectSubset<T, AssessmentQuestionUpdateArgs<ExtArgs>>): Prisma__AssessmentQuestionClient<$Result.GetResult<Prisma.$AssessmentQuestionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AssessmentQuestions.
     * @param {AssessmentQuestionDeleteManyArgs} args - Arguments to filter AssessmentQuestions to delete.
     * @example
     * // Delete a few AssessmentQuestions
     * const { count } = await prisma.assessmentQuestion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssessmentQuestionDeleteManyArgs>(args?: SelectSubset<T, AssessmentQuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssessmentQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentQuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AssessmentQuestions
     * const assessmentQuestion = await prisma.assessmentQuestion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssessmentQuestionUpdateManyArgs>(args: SelectSubset<T, AssessmentQuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AssessmentQuestion.
     * @param {AssessmentQuestionUpsertArgs} args - Arguments to update or create a AssessmentQuestion.
     * @example
     * // Update or create a AssessmentQuestion
     * const assessmentQuestion = await prisma.assessmentQuestion.upsert({
     *   create: {
     *     // ... data to create a AssessmentQuestion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AssessmentQuestion we want to update
     *   }
     * })
     */
    upsert<T extends AssessmentQuestionUpsertArgs>(args: SelectSubset<T, AssessmentQuestionUpsertArgs<ExtArgs>>): Prisma__AssessmentQuestionClient<$Result.GetResult<Prisma.$AssessmentQuestionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AssessmentQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentQuestionCountArgs} args - Arguments to filter AssessmentQuestions to count.
     * @example
     * // Count the number of AssessmentQuestions
     * const count = await prisma.assessmentQuestion.count({
     *   where: {
     *     // ... the filter for the AssessmentQuestions we want to count
     *   }
     * })
    **/
    count<T extends AssessmentQuestionCountArgs>(
      args?: Subset<T, AssessmentQuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssessmentQuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AssessmentQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentQuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssessmentQuestionAggregateArgs>(args: Subset<T, AssessmentQuestionAggregateArgs>): Prisma.PrismaPromise<GetAssessmentQuestionAggregateType<T>>

    /**
     * Group by AssessmentQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentQuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssessmentQuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssessmentQuestionGroupByArgs['orderBy'] }
        : { orderBy?: AssessmentQuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssessmentQuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssessmentQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AssessmentQuestion model
   */
  readonly fields: AssessmentQuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AssessmentQuestion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssessmentQuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assessment<T extends AssessmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssessmentDefaultArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AssessmentQuestion model
   */ 
  interface AssessmentQuestionFieldRefs {
    readonly id: FieldRef<"AssessmentQuestion", 'String'>
    readonly assessmentId: FieldRef<"AssessmentQuestion", 'String'>
    readonly prompt: FieldRef<"AssessmentQuestion", 'String'>
    readonly type: FieldRef<"AssessmentQuestion", 'String'>
    readonly options: FieldRef<"AssessmentQuestion", 'String[]'>
    readonly correctOptionIndex: FieldRef<"AssessmentQuestion", 'Int'>
    readonly correctOptionIndexes: FieldRef<"AssessmentQuestion", 'Int[]'>
    readonly correctText: FieldRef<"AssessmentQuestion", 'String'>
    readonly pairs: FieldRef<"AssessmentQuestion", 'Json'>
    readonly sampleAnswer: FieldRef<"AssessmentQuestion", 'String'>
    readonly points: FieldRef<"AssessmentQuestion", 'Int'>
    readonly order: FieldRef<"AssessmentQuestion", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AssessmentQuestion findUnique
   */
  export type AssessmentQuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentQuestion
     */
    select?: AssessmentQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentQuestionInclude<ExtArgs> | null
    /**
     * Filter, which AssessmentQuestion to fetch.
     */
    where: AssessmentQuestionWhereUniqueInput
  }

  /**
   * AssessmentQuestion findUniqueOrThrow
   */
  export type AssessmentQuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentQuestion
     */
    select?: AssessmentQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentQuestionInclude<ExtArgs> | null
    /**
     * Filter, which AssessmentQuestion to fetch.
     */
    where: AssessmentQuestionWhereUniqueInput
  }

  /**
   * AssessmentQuestion findFirst
   */
  export type AssessmentQuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentQuestion
     */
    select?: AssessmentQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentQuestionInclude<ExtArgs> | null
    /**
     * Filter, which AssessmentQuestion to fetch.
     */
    where?: AssessmentQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssessmentQuestions to fetch.
     */
    orderBy?: AssessmentQuestionOrderByWithRelationInput | AssessmentQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssessmentQuestions.
     */
    cursor?: AssessmentQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssessmentQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssessmentQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssessmentQuestions.
     */
    distinct?: AssessmentQuestionScalarFieldEnum | AssessmentQuestionScalarFieldEnum[]
  }

  /**
   * AssessmentQuestion findFirstOrThrow
   */
  export type AssessmentQuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentQuestion
     */
    select?: AssessmentQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentQuestionInclude<ExtArgs> | null
    /**
     * Filter, which AssessmentQuestion to fetch.
     */
    where?: AssessmentQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssessmentQuestions to fetch.
     */
    orderBy?: AssessmentQuestionOrderByWithRelationInput | AssessmentQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssessmentQuestions.
     */
    cursor?: AssessmentQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssessmentQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssessmentQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssessmentQuestions.
     */
    distinct?: AssessmentQuestionScalarFieldEnum | AssessmentQuestionScalarFieldEnum[]
  }

  /**
   * AssessmentQuestion findMany
   */
  export type AssessmentQuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentQuestion
     */
    select?: AssessmentQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentQuestionInclude<ExtArgs> | null
    /**
     * Filter, which AssessmentQuestions to fetch.
     */
    where?: AssessmentQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssessmentQuestions to fetch.
     */
    orderBy?: AssessmentQuestionOrderByWithRelationInput | AssessmentQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AssessmentQuestions.
     */
    cursor?: AssessmentQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssessmentQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssessmentQuestions.
     */
    skip?: number
    distinct?: AssessmentQuestionScalarFieldEnum | AssessmentQuestionScalarFieldEnum[]
  }

  /**
   * AssessmentQuestion create
   */
  export type AssessmentQuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentQuestion
     */
    select?: AssessmentQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentQuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a AssessmentQuestion.
     */
    data: XOR<AssessmentQuestionCreateInput, AssessmentQuestionUncheckedCreateInput>
  }

  /**
   * AssessmentQuestion createMany
   */
  export type AssessmentQuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AssessmentQuestions.
     */
    data: AssessmentQuestionCreateManyInput | AssessmentQuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AssessmentQuestion createManyAndReturn
   */
  export type AssessmentQuestionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentQuestion
     */
    select?: AssessmentQuestionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AssessmentQuestions.
     */
    data: AssessmentQuestionCreateManyInput | AssessmentQuestionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentQuestionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AssessmentQuestion update
   */
  export type AssessmentQuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentQuestion
     */
    select?: AssessmentQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentQuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a AssessmentQuestion.
     */
    data: XOR<AssessmentQuestionUpdateInput, AssessmentQuestionUncheckedUpdateInput>
    /**
     * Choose, which AssessmentQuestion to update.
     */
    where: AssessmentQuestionWhereUniqueInput
  }

  /**
   * AssessmentQuestion updateMany
   */
  export type AssessmentQuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AssessmentQuestions.
     */
    data: XOR<AssessmentQuestionUpdateManyMutationInput, AssessmentQuestionUncheckedUpdateManyInput>
    /**
     * Filter which AssessmentQuestions to update
     */
    where?: AssessmentQuestionWhereInput
  }

  /**
   * AssessmentQuestion upsert
   */
  export type AssessmentQuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentQuestion
     */
    select?: AssessmentQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentQuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the AssessmentQuestion to update in case it exists.
     */
    where: AssessmentQuestionWhereUniqueInput
    /**
     * In case the AssessmentQuestion found by the `where` argument doesn't exist, create a new AssessmentQuestion with this data.
     */
    create: XOR<AssessmentQuestionCreateInput, AssessmentQuestionUncheckedCreateInput>
    /**
     * In case the AssessmentQuestion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssessmentQuestionUpdateInput, AssessmentQuestionUncheckedUpdateInput>
  }

  /**
   * AssessmentQuestion delete
   */
  export type AssessmentQuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentQuestion
     */
    select?: AssessmentQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentQuestionInclude<ExtArgs> | null
    /**
     * Filter which AssessmentQuestion to delete.
     */
    where: AssessmentQuestionWhereUniqueInput
  }

  /**
   * AssessmentQuestion deleteMany
   */
  export type AssessmentQuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssessmentQuestions to delete
     */
    where?: AssessmentQuestionWhereInput
  }

  /**
   * AssessmentQuestion without action
   */
  export type AssessmentQuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentQuestion
     */
    select?: AssessmentQuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentQuestionInclude<ExtArgs> | null
  }


  /**
   * Model AssessmentAttempt
   */

  export type AggregateAssessmentAttempt = {
    _count: AssessmentAttemptCountAggregateOutputType | null
    _avg: AssessmentAttemptAvgAggregateOutputType | null
    _sum: AssessmentAttemptSumAggregateOutputType | null
    _min: AssessmentAttemptMinAggregateOutputType | null
    _max: AssessmentAttemptMaxAggregateOutputType | null
  }

  export type AssessmentAttemptAvgAggregateOutputType = {
    score: number | null
  }

  export type AssessmentAttemptSumAggregateOutputType = {
    score: number | null
  }

  export type AssessmentAttemptMinAggregateOutputType = {
    id: string | null
    assessmentId: string | null
    studentId: string | null
    startedAt: Date | null
    submittedAt: Date | null
    status: string | null
    score: number | null
    departmentId: string | null
    courseId: string | null
    collegeId: string | null
  }

  export type AssessmentAttemptMaxAggregateOutputType = {
    id: string | null
    assessmentId: string | null
    studentId: string | null
    startedAt: Date | null
    submittedAt: Date | null
    status: string | null
    score: number | null
    departmentId: string | null
    courseId: string | null
    collegeId: string | null
  }

  export type AssessmentAttemptCountAggregateOutputType = {
    id: number
    assessmentId: number
    studentId: number
    startedAt: number
    submittedAt: number
    status: number
    score: number
    answers: number
    departmentId: number
    courseId: number
    collegeId: number
    _all: number
  }


  export type AssessmentAttemptAvgAggregateInputType = {
    score?: true
  }

  export type AssessmentAttemptSumAggregateInputType = {
    score?: true
  }

  export type AssessmentAttemptMinAggregateInputType = {
    id?: true
    assessmentId?: true
    studentId?: true
    startedAt?: true
    submittedAt?: true
    status?: true
    score?: true
    departmentId?: true
    courseId?: true
    collegeId?: true
  }

  export type AssessmentAttemptMaxAggregateInputType = {
    id?: true
    assessmentId?: true
    studentId?: true
    startedAt?: true
    submittedAt?: true
    status?: true
    score?: true
    departmentId?: true
    courseId?: true
    collegeId?: true
  }

  export type AssessmentAttemptCountAggregateInputType = {
    id?: true
    assessmentId?: true
    studentId?: true
    startedAt?: true
    submittedAt?: true
    status?: true
    score?: true
    answers?: true
    departmentId?: true
    courseId?: true
    collegeId?: true
    _all?: true
  }

  export type AssessmentAttemptAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssessmentAttempt to aggregate.
     */
    where?: AssessmentAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssessmentAttempts to fetch.
     */
    orderBy?: AssessmentAttemptOrderByWithRelationInput | AssessmentAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssessmentAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssessmentAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssessmentAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AssessmentAttempts
    **/
    _count?: true | AssessmentAttemptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssessmentAttemptAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssessmentAttemptSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssessmentAttemptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssessmentAttemptMaxAggregateInputType
  }

  export type GetAssessmentAttemptAggregateType<T extends AssessmentAttemptAggregateArgs> = {
        [P in keyof T & keyof AggregateAssessmentAttempt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssessmentAttempt[P]>
      : GetScalarType<T[P], AggregateAssessmentAttempt[P]>
  }




  export type AssessmentAttemptGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssessmentAttemptWhereInput
    orderBy?: AssessmentAttemptOrderByWithAggregationInput | AssessmentAttemptOrderByWithAggregationInput[]
    by: AssessmentAttemptScalarFieldEnum[] | AssessmentAttemptScalarFieldEnum
    having?: AssessmentAttemptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssessmentAttemptCountAggregateInputType | true
    _avg?: AssessmentAttemptAvgAggregateInputType
    _sum?: AssessmentAttemptSumAggregateInputType
    _min?: AssessmentAttemptMinAggregateInputType
    _max?: AssessmentAttemptMaxAggregateInputType
  }

  export type AssessmentAttemptGroupByOutputType = {
    id: string
    assessmentId: string
    studentId: string
    startedAt: Date
    submittedAt: Date | null
    status: string
    score: number | null
    answers: JsonValue | null
    departmentId: string | null
    courseId: string | null
    collegeId: string | null
    _count: AssessmentAttemptCountAggregateOutputType | null
    _avg: AssessmentAttemptAvgAggregateOutputType | null
    _sum: AssessmentAttemptSumAggregateOutputType | null
    _min: AssessmentAttemptMinAggregateOutputType | null
    _max: AssessmentAttemptMaxAggregateOutputType | null
  }

  type GetAssessmentAttemptGroupByPayload<T extends AssessmentAttemptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssessmentAttemptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssessmentAttemptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssessmentAttemptGroupByOutputType[P]>
            : GetScalarType<T[P], AssessmentAttemptGroupByOutputType[P]>
        }
      >
    >


  export type AssessmentAttemptSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assessmentId?: boolean
    studentId?: boolean
    startedAt?: boolean
    submittedAt?: boolean
    status?: boolean
    score?: boolean
    answers?: boolean
    departmentId?: boolean
    courseId?: boolean
    collegeId?: boolean
    assessment?: boolean | AssessmentDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | AssessmentAttempt$departmentArgs<ExtArgs>
    course?: boolean | AssessmentAttempt$courseArgs<ExtArgs>
    college?: boolean | AssessmentAttempt$collegeArgs<ExtArgs>
  }, ExtArgs["result"]["assessmentAttempt"]>

  export type AssessmentAttemptSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assessmentId?: boolean
    studentId?: boolean
    startedAt?: boolean
    submittedAt?: boolean
    status?: boolean
    score?: boolean
    answers?: boolean
    departmentId?: boolean
    courseId?: boolean
    collegeId?: boolean
    assessment?: boolean | AssessmentDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | AssessmentAttempt$departmentArgs<ExtArgs>
    course?: boolean | AssessmentAttempt$courseArgs<ExtArgs>
    college?: boolean | AssessmentAttempt$collegeArgs<ExtArgs>
  }, ExtArgs["result"]["assessmentAttempt"]>

  export type AssessmentAttemptSelectScalar = {
    id?: boolean
    assessmentId?: boolean
    studentId?: boolean
    startedAt?: boolean
    submittedAt?: boolean
    status?: boolean
    score?: boolean
    answers?: boolean
    departmentId?: boolean
    courseId?: boolean
    collegeId?: boolean
  }

  export type AssessmentAttemptInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assessment?: boolean | AssessmentDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | AssessmentAttempt$departmentArgs<ExtArgs>
    course?: boolean | AssessmentAttempt$courseArgs<ExtArgs>
    college?: boolean | AssessmentAttempt$collegeArgs<ExtArgs>
  }
  export type AssessmentAttemptIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assessment?: boolean | AssessmentDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | AssessmentAttempt$departmentArgs<ExtArgs>
    course?: boolean | AssessmentAttempt$courseArgs<ExtArgs>
    college?: boolean | AssessmentAttempt$collegeArgs<ExtArgs>
  }

  export type $AssessmentAttemptPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AssessmentAttempt"
    objects: {
      assessment: Prisma.$AssessmentPayload<ExtArgs>
      student: Prisma.$UserPayload<ExtArgs>
      department: Prisma.$DepartmentPayload<ExtArgs> | null
      course: Prisma.$CoursePayload<ExtArgs> | null
      college: Prisma.$CollegePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      assessmentId: string
      studentId: string
      startedAt: Date
      submittedAt: Date | null
      status: string
      score: number | null
      answers: Prisma.JsonValue | null
      departmentId: string | null
      courseId: string | null
      collegeId: string | null
    }, ExtArgs["result"]["assessmentAttempt"]>
    composites: {}
  }

  type AssessmentAttemptGetPayload<S extends boolean | null | undefined | AssessmentAttemptDefaultArgs> = $Result.GetResult<Prisma.$AssessmentAttemptPayload, S>

  type AssessmentAttemptCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AssessmentAttemptFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AssessmentAttemptCountAggregateInputType | true
    }

  export interface AssessmentAttemptDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AssessmentAttempt'], meta: { name: 'AssessmentAttempt' } }
    /**
     * Find zero or one AssessmentAttempt that matches the filter.
     * @param {AssessmentAttemptFindUniqueArgs} args - Arguments to find a AssessmentAttempt
     * @example
     * // Get one AssessmentAttempt
     * const assessmentAttempt = await prisma.assessmentAttempt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssessmentAttemptFindUniqueArgs>(args: SelectSubset<T, AssessmentAttemptFindUniqueArgs<ExtArgs>>): Prisma__AssessmentAttemptClient<$Result.GetResult<Prisma.$AssessmentAttemptPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AssessmentAttempt that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AssessmentAttemptFindUniqueOrThrowArgs} args - Arguments to find a AssessmentAttempt
     * @example
     * // Get one AssessmentAttempt
     * const assessmentAttempt = await prisma.assessmentAttempt.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssessmentAttemptFindUniqueOrThrowArgs>(args: SelectSubset<T, AssessmentAttemptFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssessmentAttemptClient<$Result.GetResult<Prisma.$AssessmentAttemptPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AssessmentAttempt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentAttemptFindFirstArgs} args - Arguments to find a AssessmentAttempt
     * @example
     * // Get one AssessmentAttempt
     * const assessmentAttempt = await prisma.assessmentAttempt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssessmentAttemptFindFirstArgs>(args?: SelectSubset<T, AssessmentAttemptFindFirstArgs<ExtArgs>>): Prisma__AssessmentAttemptClient<$Result.GetResult<Prisma.$AssessmentAttemptPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AssessmentAttempt that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentAttemptFindFirstOrThrowArgs} args - Arguments to find a AssessmentAttempt
     * @example
     * // Get one AssessmentAttempt
     * const assessmentAttempt = await prisma.assessmentAttempt.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssessmentAttemptFindFirstOrThrowArgs>(args?: SelectSubset<T, AssessmentAttemptFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssessmentAttemptClient<$Result.GetResult<Prisma.$AssessmentAttemptPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AssessmentAttempts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentAttemptFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AssessmentAttempts
     * const assessmentAttempts = await prisma.assessmentAttempt.findMany()
     * 
     * // Get first 10 AssessmentAttempts
     * const assessmentAttempts = await prisma.assessmentAttempt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assessmentAttemptWithIdOnly = await prisma.assessmentAttempt.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssessmentAttemptFindManyArgs>(args?: SelectSubset<T, AssessmentAttemptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentAttemptPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AssessmentAttempt.
     * @param {AssessmentAttemptCreateArgs} args - Arguments to create a AssessmentAttempt.
     * @example
     * // Create one AssessmentAttempt
     * const AssessmentAttempt = await prisma.assessmentAttempt.create({
     *   data: {
     *     // ... data to create a AssessmentAttempt
     *   }
     * })
     * 
     */
    create<T extends AssessmentAttemptCreateArgs>(args: SelectSubset<T, AssessmentAttemptCreateArgs<ExtArgs>>): Prisma__AssessmentAttemptClient<$Result.GetResult<Prisma.$AssessmentAttemptPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AssessmentAttempts.
     * @param {AssessmentAttemptCreateManyArgs} args - Arguments to create many AssessmentAttempts.
     * @example
     * // Create many AssessmentAttempts
     * const assessmentAttempt = await prisma.assessmentAttempt.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssessmentAttemptCreateManyArgs>(args?: SelectSubset<T, AssessmentAttemptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AssessmentAttempts and returns the data saved in the database.
     * @param {AssessmentAttemptCreateManyAndReturnArgs} args - Arguments to create many AssessmentAttempts.
     * @example
     * // Create many AssessmentAttempts
     * const assessmentAttempt = await prisma.assessmentAttempt.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AssessmentAttempts and only return the `id`
     * const assessmentAttemptWithIdOnly = await prisma.assessmentAttempt.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssessmentAttemptCreateManyAndReturnArgs>(args?: SelectSubset<T, AssessmentAttemptCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssessmentAttemptPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AssessmentAttempt.
     * @param {AssessmentAttemptDeleteArgs} args - Arguments to delete one AssessmentAttempt.
     * @example
     * // Delete one AssessmentAttempt
     * const AssessmentAttempt = await prisma.assessmentAttempt.delete({
     *   where: {
     *     // ... filter to delete one AssessmentAttempt
     *   }
     * })
     * 
     */
    delete<T extends AssessmentAttemptDeleteArgs>(args: SelectSubset<T, AssessmentAttemptDeleteArgs<ExtArgs>>): Prisma__AssessmentAttemptClient<$Result.GetResult<Prisma.$AssessmentAttemptPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AssessmentAttempt.
     * @param {AssessmentAttemptUpdateArgs} args - Arguments to update one AssessmentAttempt.
     * @example
     * // Update one AssessmentAttempt
     * const assessmentAttempt = await prisma.assessmentAttempt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssessmentAttemptUpdateArgs>(args: SelectSubset<T, AssessmentAttemptUpdateArgs<ExtArgs>>): Prisma__AssessmentAttemptClient<$Result.GetResult<Prisma.$AssessmentAttemptPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AssessmentAttempts.
     * @param {AssessmentAttemptDeleteManyArgs} args - Arguments to filter AssessmentAttempts to delete.
     * @example
     * // Delete a few AssessmentAttempts
     * const { count } = await prisma.assessmentAttempt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssessmentAttemptDeleteManyArgs>(args?: SelectSubset<T, AssessmentAttemptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssessmentAttempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentAttemptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AssessmentAttempts
     * const assessmentAttempt = await prisma.assessmentAttempt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssessmentAttemptUpdateManyArgs>(args: SelectSubset<T, AssessmentAttemptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AssessmentAttempt.
     * @param {AssessmentAttemptUpsertArgs} args - Arguments to update or create a AssessmentAttempt.
     * @example
     * // Update or create a AssessmentAttempt
     * const assessmentAttempt = await prisma.assessmentAttempt.upsert({
     *   create: {
     *     // ... data to create a AssessmentAttempt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AssessmentAttempt we want to update
     *   }
     * })
     */
    upsert<T extends AssessmentAttemptUpsertArgs>(args: SelectSubset<T, AssessmentAttemptUpsertArgs<ExtArgs>>): Prisma__AssessmentAttemptClient<$Result.GetResult<Prisma.$AssessmentAttemptPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AssessmentAttempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentAttemptCountArgs} args - Arguments to filter AssessmentAttempts to count.
     * @example
     * // Count the number of AssessmentAttempts
     * const count = await prisma.assessmentAttempt.count({
     *   where: {
     *     // ... the filter for the AssessmentAttempts we want to count
     *   }
     * })
    **/
    count<T extends AssessmentAttemptCountArgs>(
      args?: Subset<T, AssessmentAttemptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssessmentAttemptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AssessmentAttempt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentAttemptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssessmentAttemptAggregateArgs>(args: Subset<T, AssessmentAttemptAggregateArgs>): Prisma.PrismaPromise<GetAssessmentAttemptAggregateType<T>>

    /**
     * Group by AssessmentAttempt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssessmentAttemptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssessmentAttemptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssessmentAttemptGroupByArgs['orderBy'] }
        : { orderBy?: AssessmentAttemptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssessmentAttemptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssessmentAttemptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AssessmentAttempt model
   */
  readonly fields: AssessmentAttemptFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AssessmentAttempt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssessmentAttemptClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assessment<T extends AssessmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssessmentDefaultArgs<ExtArgs>>): Prisma__AssessmentClient<$Result.GetResult<Prisma.$AssessmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    department<T extends AssessmentAttempt$departmentArgs<ExtArgs> = {}>(args?: Subset<T, AssessmentAttempt$departmentArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    course<T extends AssessmentAttempt$courseArgs<ExtArgs> = {}>(args?: Subset<T, AssessmentAttempt$courseArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    college<T extends AssessmentAttempt$collegeArgs<ExtArgs> = {}>(args?: Subset<T, AssessmentAttempt$collegeArgs<ExtArgs>>): Prisma__CollegeClient<$Result.GetResult<Prisma.$CollegePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AssessmentAttempt model
   */ 
  interface AssessmentAttemptFieldRefs {
    readonly id: FieldRef<"AssessmentAttempt", 'String'>
    readonly assessmentId: FieldRef<"AssessmentAttempt", 'String'>
    readonly studentId: FieldRef<"AssessmentAttempt", 'String'>
    readonly startedAt: FieldRef<"AssessmentAttempt", 'DateTime'>
    readonly submittedAt: FieldRef<"AssessmentAttempt", 'DateTime'>
    readonly status: FieldRef<"AssessmentAttempt", 'String'>
    readonly score: FieldRef<"AssessmentAttempt", 'Int'>
    readonly answers: FieldRef<"AssessmentAttempt", 'Json'>
    readonly departmentId: FieldRef<"AssessmentAttempt", 'String'>
    readonly courseId: FieldRef<"AssessmentAttempt", 'String'>
    readonly collegeId: FieldRef<"AssessmentAttempt", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AssessmentAttempt findUnique
   */
  export type AssessmentAttemptFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentAttempt
     */
    select?: AssessmentAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentAttemptInclude<ExtArgs> | null
    /**
     * Filter, which AssessmentAttempt to fetch.
     */
    where: AssessmentAttemptWhereUniqueInput
  }

  /**
   * AssessmentAttempt findUniqueOrThrow
   */
  export type AssessmentAttemptFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentAttempt
     */
    select?: AssessmentAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentAttemptInclude<ExtArgs> | null
    /**
     * Filter, which AssessmentAttempt to fetch.
     */
    where: AssessmentAttemptWhereUniqueInput
  }

  /**
   * AssessmentAttempt findFirst
   */
  export type AssessmentAttemptFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentAttempt
     */
    select?: AssessmentAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentAttemptInclude<ExtArgs> | null
    /**
     * Filter, which AssessmentAttempt to fetch.
     */
    where?: AssessmentAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssessmentAttempts to fetch.
     */
    orderBy?: AssessmentAttemptOrderByWithRelationInput | AssessmentAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssessmentAttempts.
     */
    cursor?: AssessmentAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssessmentAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssessmentAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssessmentAttempts.
     */
    distinct?: AssessmentAttemptScalarFieldEnum | AssessmentAttemptScalarFieldEnum[]
  }

  /**
   * AssessmentAttempt findFirstOrThrow
   */
  export type AssessmentAttemptFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentAttempt
     */
    select?: AssessmentAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentAttemptInclude<ExtArgs> | null
    /**
     * Filter, which AssessmentAttempt to fetch.
     */
    where?: AssessmentAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssessmentAttempts to fetch.
     */
    orderBy?: AssessmentAttemptOrderByWithRelationInput | AssessmentAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssessmentAttempts.
     */
    cursor?: AssessmentAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssessmentAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssessmentAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssessmentAttempts.
     */
    distinct?: AssessmentAttemptScalarFieldEnum | AssessmentAttemptScalarFieldEnum[]
  }

  /**
   * AssessmentAttempt findMany
   */
  export type AssessmentAttemptFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentAttempt
     */
    select?: AssessmentAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentAttemptInclude<ExtArgs> | null
    /**
     * Filter, which AssessmentAttempts to fetch.
     */
    where?: AssessmentAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssessmentAttempts to fetch.
     */
    orderBy?: AssessmentAttemptOrderByWithRelationInput | AssessmentAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AssessmentAttempts.
     */
    cursor?: AssessmentAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssessmentAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssessmentAttempts.
     */
    skip?: number
    distinct?: AssessmentAttemptScalarFieldEnum | AssessmentAttemptScalarFieldEnum[]
  }

  /**
   * AssessmentAttempt create
   */
  export type AssessmentAttemptCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentAttempt
     */
    select?: AssessmentAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentAttemptInclude<ExtArgs> | null
    /**
     * The data needed to create a AssessmentAttempt.
     */
    data: XOR<AssessmentAttemptCreateInput, AssessmentAttemptUncheckedCreateInput>
  }

  /**
   * AssessmentAttempt createMany
   */
  export type AssessmentAttemptCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AssessmentAttempts.
     */
    data: AssessmentAttemptCreateManyInput | AssessmentAttemptCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AssessmentAttempt createManyAndReturn
   */
  export type AssessmentAttemptCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentAttempt
     */
    select?: AssessmentAttemptSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AssessmentAttempts.
     */
    data: AssessmentAttemptCreateManyInput | AssessmentAttemptCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentAttemptIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AssessmentAttempt update
   */
  export type AssessmentAttemptUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentAttempt
     */
    select?: AssessmentAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentAttemptInclude<ExtArgs> | null
    /**
     * The data needed to update a AssessmentAttempt.
     */
    data: XOR<AssessmentAttemptUpdateInput, AssessmentAttemptUncheckedUpdateInput>
    /**
     * Choose, which AssessmentAttempt to update.
     */
    where: AssessmentAttemptWhereUniqueInput
  }

  /**
   * AssessmentAttempt updateMany
   */
  export type AssessmentAttemptUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AssessmentAttempts.
     */
    data: XOR<AssessmentAttemptUpdateManyMutationInput, AssessmentAttemptUncheckedUpdateManyInput>
    /**
     * Filter which AssessmentAttempts to update
     */
    where?: AssessmentAttemptWhereInput
  }

  /**
   * AssessmentAttempt upsert
   */
  export type AssessmentAttemptUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentAttempt
     */
    select?: AssessmentAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentAttemptInclude<ExtArgs> | null
    /**
     * The filter to search for the AssessmentAttempt to update in case it exists.
     */
    where: AssessmentAttemptWhereUniqueInput
    /**
     * In case the AssessmentAttempt found by the `where` argument doesn't exist, create a new AssessmentAttempt with this data.
     */
    create: XOR<AssessmentAttemptCreateInput, AssessmentAttemptUncheckedCreateInput>
    /**
     * In case the AssessmentAttempt was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssessmentAttemptUpdateInput, AssessmentAttemptUncheckedUpdateInput>
  }

  /**
   * AssessmentAttempt delete
   */
  export type AssessmentAttemptDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentAttempt
     */
    select?: AssessmentAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentAttemptInclude<ExtArgs> | null
    /**
     * Filter which AssessmentAttempt to delete.
     */
    where: AssessmentAttemptWhereUniqueInput
  }

  /**
   * AssessmentAttempt deleteMany
   */
  export type AssessmentAttemptDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssessmentAttempts to delete
     */
    where?: AssessmentAttemptWhereInput
  }

  /**
   * AssessmentAttempt.department
   */
  export type AssessmentAttempt$departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * AssessmentAttempt.course
   */
  export type AssessmentAttempt$courseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
  }

  /**
   * AssessmentAttempt.college
   */
  export type AssessmentAttempt$collegeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the College
     */
    select?: CollegeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CollegeInclude<ExtArgs> | null
    where?: CollegeWhereInput
  }

  /**
   * AssessmentAttempt without action
   */
  export type AssessmentAttemptDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssessmentAttempt
     */
    select?: AssessmentAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssessmentAttemptInclude<ExtArgs> | null
  }


  /**
   * Model Setting
   */

  export type AggregateSetting = {
    _count: SettingCountAggregateOutputType | null
    _min: SettingMinAggregateOutputType | null
    _max: SettingMaxAggregateOutputType | null
  }

  export type SettingMinAggregateOutputType = {
    id: string | null
    key: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SettingMaxAggregateOutputType = {
    id: string | null
    key: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SettingCountAggregateOutputType = {
    id: number
    key: number
    value: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SettingMinAggregateInputType = {
    id?: true
    key?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SettingMaxAggregateInputType = {
    id?: true
    key?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SettingCountAggregateInputType = {
    id?: true
    key?: true
    value?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Setting to aggregate.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Settings
    **/
    _count?: true | SettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SettingMaxAggregateInputType
  }

  export type GetSettingAggregateType<T extends SettingAggregateArgs> = {
        [P in keyof T & keyof AggregateSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSetting[P]>
      : GetScalarType<T[P], AggregateSetting[P]>
  }




  export type SettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SettingWhereInput
    orderBy?: SettingOrderByWithAggregationInput | SettingOrderByWithAggregationInput[]
    by: SettingScalarFieldEnum[] | SettingScalarFieldEnum
    having?: SettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SettingCountAggregateInputType | true
    _min?: SettingMinAggregateInputType
    _max?: SettingMaxAggregateInputType
  }

  export type SettingGroupByOutputType = {
    id: string
    key: string
    value: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: SettingCountAggregateOutputType | null
    _min: SettingMinAggregateOutputType | null
    _max: SettingMaxAggregateOutputType | null
  }

  type GetSettingGroupByPayload<T extends SettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SettingGroupByOutputType[P]>
            : GetScalarType<T[P], SettingGroupByOutputType[P]>
        }
      >
    >


  export type SettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["setting"]>

  export type SettingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["setting"]>

  export type SettingSelectScalar = {
    id?: boolean
    key?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $SettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Setting"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      key: string
      value: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["setting"]>
    composites: {}
  }

  type SettingGetPayload<S extends boolean | null | undefined | SettingDefaultArgs> = $Result.GetResult<Prisma.$SettingPayload, S>

  type SettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SettingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SettingCountAggregateInputType | true
    }

  export interface SettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Setting'], meta: { name: 'Setting' } }
    /**
     * Find zero or one Setting that matches the filter.
     * @param {SettingFindUniqueArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SettingFindUniqueArgs>(args: SelectSubset<T, SettingFindUniqueArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Setting that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SettingFindUniqueOrThrowArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SettingFindUniqueOrThrowArgs>(args: SelectSubset<T, SettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Setting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindFirstArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SettingFindFirstArgs>(args?: SelectSubset<T, SettingFindFirstArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Setting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindFirstOrThrowArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SettingFindFirstOrThrowArgs>(args?: SelectSubset<T, SettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Settings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Settings
     * const settings = await prisma.setting.findMany()
     * 
     * // Get first 10 Settings
     * const settings = await prisma.setting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const settingWithIdOnly = await prisma.setting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SettingFindManyArgs>(args?: SelectSubset<T, SettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Setting.
     * @param {SettingCreateArgs} args - Arguments to create a Setting.
     * @example
     * // Create one Setting
     * const Setting = await prisma.setting.create({
     *   data: {
     *     // ... data to create a Setting
     *   }
     * })
     * 
     */
    create<T extends SettingCreateArgs>(args: SelectSubset<T, SettingCreateArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Settings.
     * @param {SettingCreateManyArgs} args - Arguments to create many Settings.
     * @example
     * // Create many Settings
     * const setting = await prisma.setting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SettingCreateManyArgs>(args?: SelectSubset<T, SettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Settings and returns the data saved in the database.
     * @param {SettingCreateManyAndReturnArgs} args - Arguments to create many Settings.
     * @example
     * // Create many Settings
     * const setting = await prisma.setting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Settings and only return the `id`
     * const settingWithIdOnly = await prisma.setting.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SettingCreateManyAndReturnArgs>(args?: SelectSubset<T, SettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Setting.
     * @param {SettingDeleteArgs} args - Arguments to delete one Setting.
     * @example
     * // Delete one Setting
     * const Setting = await prisma.setting.delete({
     *   where: {
     *     // ... filter to delete one Setting
     *   }
     * })
     * 
     */
    delete<T extends SettingDeleteArgs>(args: SelectSubset<T, SettingDeleteArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Setting.
     * @param {SettingUpdateArgs} args - Arguments to update one Setting.
     * @example
     * // Update one Setting
     * const setting = await prisma.setting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SettingUpdateArgs>(args: SelectSubset<T, SettingUpdateArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Settings.
     * @param {SettingDeleteManyArgs} args - Arguments to filter Settings to delete.
     * @example
     * // Delete a few Settings
     * const { count } = await prisma.setting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SettingDeleteManyArgs>(args?: SelectSubset<T, SettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Settings
     * const setting = await prisma.setting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SettingUpdateManyArgs>(args: SelectSubset<T, SettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Setting.
     * @param {SettingUpsertArgs} args - Arguments to update or create a Setting.
     * @example
     * // Update or create a Setting
     * const setting = await prisma.setting.upsert({
     *   create: {
     *     // ... data to create a Setting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Setting we want to update
     *   }
     * })
     */
    upsert<T extends SettingUpsertArgs>(args: SelectSubset<T, SettingUpsertArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingCountArgs} args - Arguments to filter Settings to count.
     * @example
     * // Count the number of Settings
     * const count = await prisma.setting.count({
     *   where: {
     *     // ... the filter for the Settings we want to count
     *   }
     * })
    **/
    count<T extends SettingCountArgs>(
      args?: Subset<T, SettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Setting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SettingAggregateArgs>(args: Subset<T, SettingAggregateArgs>): Prisma.PrismaPromise<GetSettingAggregateType<T>>

    /**
     * Group by Setting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SettingGroupByArgs['orderBy'] }
        : { orderBy?: SettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Setting model
   */
  readonly fields: SettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Setting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Setting model
   */ 
  interface SettingFieldRefs {
    readonly id: FieldRef<"Setting", 'String'>
    readonly key: FieldRef<"Setting", 'String'>
    readonly value: FieldRef<"Setting", 'Json'>
    readonly createdAt: FieldRef<"Setting", 'DateTime'>
    readonly updatedAt: FieldRef<"Setting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Setting findUnique
   */
  export type SettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting findUniqueOrThrow
   */
  export type SettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting findFirst
   */
  export type SettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting findFirstOrThrow
   */
  export type SettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting findMany
   */
  export type SettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting create
   */
  export type SettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * The data needed to create a Setting.
     */
    data: XOR<SettingCreateInput, SettingUncheckedCreateInput>
  }

  /**
   * Setting createMany
   */
  export type SettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Settings.
     */
    data: SettingCreateManyInput | SettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Setting createManyAndReturn
   */
  export type SettingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Settings.
     */
    data: SettingCreateManyInput | SettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Setting update
   */
  export type SettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * The data needed to update a Setting.
     */
    data: XOR<SettingUpdateInput, SettingUncheckedUpdateInput>
    /**
     * Choose, which Setting to update.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting updateMany
   */
  export type SettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Settings.
     */
    data: XOR<SettingUpdateManyMutationInput, SettingUncheckedUpdateManyInput>
    /**
     * Filter which Settings to update
     */
    where?: SettingWhereInput
  }

  /**
   * Setting upsert
   */
  export type SettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * The filter to search for the Setting to update in case it exists.
     */
    where: SettingWhereUniqueInput
    /**
     * In case the Setting found by the `where` argument doesn't exist, create a new Setting with this data.
     */
    create: XOR<SettingCreateInput, SettingUncheckedCreateInput>
    /**
     * In case the Setting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SettingUpdateInput, SettingUncheckedUpdateInput>
  }

  /**
   * Setting delete
   */
  export type SettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter which Setting to delete.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting deleteMany
   */
  export type SettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Settings to delete
     */
    where?: SettingWhereInput
  }

  /**
   * Setting without action
   */
  export type SettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
  }


  /**
   * Model CourseReview
   */

  export type AggregateCourseReview = {
    _count: CourseReviewCountAggregateOutputType | null
    _avg: CourseReviewAvgAggregateOutputType | null
    _sum: CourseReviewSumAggregateOutputType | null
    _min: CourseReviewMinAggregateOutputType | null
    _max: CourseReviewMaxAggregateOutputType | null
  }

  export type CourseReviewAvgAggregateOutputType = {
    rating: number | null
  }

  export type CourseReviewSumAggregateOutputType = {
    rating: number | null
  }

  export type CourseReviewMinAggregateOutputType = {
    id: string | null
    rating: number | null
    comment: string | null
    isPublic: boolean | null
    courseId: string | null
    studentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CourseReviewMaxAggregateOutputType = {
    id: string | null
    rating: number | null
    comment: string | null
    isPublic: boolean | null
    courseId: string | null
    studentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CourseReviewCountAggregateOutputType = {
    id: number
    rating: number
    comment: number
    isPublic: number
    courseId: number
    studentId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CourseReviewAvgAggregateInputType = {
    rating?: true
  }

  export type CourseReviewSumAggregateInputType = {
    rating?: true
  }

  export type CourseReviewMinAggregateInputType = {
    id?: true
    rating?: true
    comment?: true
    isPublic?: true
    courseId?: true
    studentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CourseReviewMaxAggregateInputType = {
    id?: true
    rating?: true
    comment?: true
    isPublic?: true
    courseId?: true
    studentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CourseReviewCountAggregateInputType = {
    id?: true
    rating?: true
    comment?: true
    isPublic?: true
    courseId?: true
    studentId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CourseReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseReview to aggregate.
     */
    where?: CourseReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseReviews to fetch.
     */
    orderBy?: CourseReviewOrderByWithRelationInput | CourseReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CourseReviews
    **/
    _count?: true | CourseReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseReviewMaxAggregateInputType
  }

  export type GetCourseReviewAggregateType<T extends CourseReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateCourseReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourseReview[P]>
      : GetScalarType<T[P], AggregateCourseReview[P]>
  }




  export type CourseReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseReviewWhereInput
    orderBy?: CourseReviewOrderByWithAggregationInput | CourseReviewOrderByWithAggregationInput[]
    by: CourseReviewScalarFieldEnum[] | CourseReviewScalarFieldEnum
    having?: CourseReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseReviewCountAggregateInputType | true
    _avg?: CourseReviewAvgAggregateInputType
    _sum?: CourseReviewSumAggregateInputType
    _min?: CourseReviewMinAggregateInputType
    _max?: CourseReviewMaxAggregateInputType
  }

  export type CourseReviewGroupByOutputType = {
    id: string
    rating: number
    comment: string | null
    isPublic: boolean
    courseId: string
    studentId: string
    createdAt: Date
    updatedAt: Date
    _count: CourseReviewCountAggregateOutputType | null
    _avg: CourseReviewAvgAggregateOutputType | null
    _sum: CourseReviewSumAggregateOutputType | null
    _min: CourseReviewMinAggregateOutputType | null
    _max: CourseReviewMaxAggregateOutputType | null
  }

  type GetCourseReviewGroupByPayload<T extends CourseReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseReviewGroupByOutputType[P]>
            : GetScalarType<T[P], CourseReviewGroupByOutputType[P]>
        }
      >
    >


  export type CourseReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rating?: boolean
    comment?: boolean
    isPublic?: boolean
    courseId?: boolean
    studentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courseReview"]>

  export type CourseReviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rating?: boolean
    comment?: boolean
    isPublic?: boolean
    courseId?: boolean
    studentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courseReview"]>

  export type CourseReviewSelectScalar = {
    id?: boolean
    rating?: boolean
    comment?: boolean
    isPublic?: boolean
    courseId?: boolean
    studentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CourseReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CourseReviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CourseReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CourseReview"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
      student: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      rating: number
      comment: string | null
      isPublic: boolean
      courseId: string
      studentId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["courseReview"]>
    composites: {}
  }

  type CourseReviewGetPayload<S extends boolean | null | undefined | CourseReviewDefaultArgs> = $Result.GetResult<Prisma.$CourseReviewPayload, S>

  type CourseReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CourseReviewFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CourseReviewCountAggregateInputType | true
    }

  export interface CourseReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CourseReview'], meta: { name: 'CourseReview' } }
    /**
     * Find zero or one CourseReview that matches the filter.
     * @param {CourseReviewFindUniqueArgs} args - Arguments to find a CourseReview
     * @example
     * // Get one CourseReview
     * const courseReview = await prisma.courseReview.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseReviewFindUniqueArgs>(args: SelectSubset<T, CourseReviewFindUniqueArgs<ExtArgs>>): Prisma__CourseReviewClient<$Result.GetResult<Prisma.$CourseReviewPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CourseReview that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CourseReviewFindUniqueOrThrowArgs} args - Arguments to find a CourseReview
     * @example
     * // Get one CourseReview
     * const courseReview = await prisma.courseReview.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseReviewClient<$Result.GetResult<Prisma.$CourseReviewPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CourseReview that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseReviewFindFirstArgs} args - Arguments to find a CourseReview
     * @example
     * // Get one CourseReview
     * const courseReview = await prisma.courseReview.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseReviewFindFirstArgs>(args?: SelectSubset<T, CourseReviewFindFirstArgs<ExtArgs>>): Prisma__CourseReviewClient<$Result.GetResult<Prisma.$CourseReviewPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CourseReview that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseReviewFindFirstOrThrowArgs} args - Arguments to find a CourseReview
     * @example
     * // Get one CourseReview
     * const courseReview = await prisma.courseReview.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseReviewClient<$Result.GetResult<Prisma.$CourseReviewPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CourseReviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CourseReviews
     * const courseReviews = await prisma.courseReview.findMany()
     * 
     * // Get first 10 CourseReviews
     * const courseReviews = await prisma.courseReview.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseReviewWithIdOnly = await prisma.courseReview.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourseReviewFindManyArgs>(args?: SelectSubset<T, CourseReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseReviewPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CourseReview.
     * @param {CourseReviewCreateArgs} args - Arguments to create a CourseReview.
     * @example
     * // Create one CourseReview
     * const CourseReview = await prisma.courseReview.create({
     *   data: {
     *     // ... data to create a CourseReview
     *   }
     * })
     * 
     */
    create<T extends CourseReviewCreateArgs>(args: SelectSubset<T, CourseReviewCreateArgs<ExtArgs>>): Prisma__CourseReviewClient<$Result.GetResult<Prisma.$CourseReviewPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CourseReviews.
     * @param {CourseReviewCreateManyArgs} args - Arguments to create many CourseReviews.
     * @example
     * // Create many CourseReviews
     * const courseReview = await prisma.courseReview.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseReviewCreateManyArgs>(args?: SelectSubset<T, CourseReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CourseReviews and returns the data saved in the database.
     * @param {CourseReviewCreateManyAndReturnArgs} args - Arguments to create many CourseReviews.
     * @example
     * // Create many CourseReviews
     * const courseReview = await prisma.courseReview.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CourseReviews and only return the `id`
     * const courseReviewWithIdOnly = await prisma.courseReview.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseReviewCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseReviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseReviewPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CourseReview.
     * @param {CourseReviewDeleteArgs} args - Arguments to delete one CourseReview.
     * @example
     * // Delete one CourseReview
     * const CourseReview = await prisma.courseReview.delete({
     *   where: {
     *     // ... filter to delete one CourseReview
     *   }
     * })
     * 
     */
    delete<T extends CourseReviewDeleteArgs>(args: SelectSubset<T, CourseReviewDeleteArgs<ExtArgs>>): Prisma__CourseReviewClient<$Result.GetResult<Prisma.$CourseReviewPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CourseReview.
     * @param {CourseReviewUpdateArgs} args - Arguments to update one CourseReview.
     * @example
     * // Update one CourseReview
     * const courseReview = await prisma.courseReview.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseReviewUpdateArgs>(args: SelectSubset<T, CourseReviewUpdateArgs<ExtArgs>>): Prisma__CourseReviewClient<$Result.GetResult<Prisma.$CourseReviewPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CourseReviews.
     * @param {CourseReviewDeleteManyArgs} args - Arguments to filter CourseReviews to delete.
     * @example
     * // Delete a few CourseReviews
     * const { count } = await prisma.courseReview.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseReviewDeleteManyArgs>(args?: SelectSubset<T, CourseReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourseReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CourseReviews
     * const courseReview = await prisma.courseReview.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseReviewUpdateManyArgs>(args: SelectSubset<T, CourseReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CourseReview.
     * @param {CourseReviewUpsertArgs} args - Arguments to update or create a CourseReview.
     * @example
     * // Update or create a CourseReview
     * const courseReview = await prisma.courseReview.upsert({
     *   create: {
     *     // ... data to create a CourseReview
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CourseReview we want to update
     *   }
     * })
     */
    upsert<T extends CourseReviewUpsertArgs>(args: SelectSubset<T, CourseReviewUpsertArgs<ExtArgs>>): Prisma__CourseReviewClient<$Result.GetResult<Prisma.$CourseReviewPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CourseReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseReviewCountArgs} args - Arguments to filter CourseReviews to count.
     * @example
     * // Count the number of CourseReviews
     * const count = await prisma.courseReview.count({
     *   where: {
     *     // ... the filter for the CourseReviews we want to count
     *   }
     * })
    **/
    count<T extends CourseReviewCountArgs>(
      args?: Subset<T, CourseReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CourseReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseReviewAggregateArgs>(args: Subset<T, CourseReviewAggregateArgs>): Prisma.PrismaPromise<GetCourseReviewAggregateType<T>>

    /**
     * Group by CourseReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseReviewGroupByArgs['orderBy'] }
        : { orderBy?: CourseReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CourseReview model
   */
  readonly fields: CourseReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CourseReview.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CourseReview model
   */ 
  interface CourseReviewFieldRefs {
    readonly id: FieldRef<"CourseReview", 'String'>
    readonly rating: FieldRef<"CourseReview", 'Int'>
    readonly comment: FieldRef<"CourseReview", 'String'>
    readonly isPublic: FieldRef<"CourseReview", 'Boolean'>
    readonly courseId: FieldRef<"CourseReview", 'String'>
    readonly studentId: FieldRef<"CourseReview", 'String'>
    readonly createdAt: FieldRef<"CourseReview", 'DateTime'>
    readonly updatedAt: FieldRef<"CourseReview", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CourseReview findUnique
   */
  export type CourseReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseReview
     */
    select?: CourseReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseReviewInclude<ExtArgs> | null
    /**
     * Filter, which CourseReview to fetch.
     */
    where: CourseReviewWhereUniqueInput
  }

  /**
   * CourseReview findUniqueOrThrow
   */
  export type CourseReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseReview
     */
    select?: CourseReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseReviewInclude<ExtArgs> | null
    /**
     * Filter, which CourseReview to fetch.
     */
    where: CourseReviewWhereUniqueInput
  }

  /**
   * CourseReview findFirst
   */
  export type CourseReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseReview
     */
    select?: CourseReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseReviewInclude<ExtArgs> | null
    /**
     * Filter, which CourseReview to fetch.
     */
    where?: CourseReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseReviews to fetch.
     */
    orderBy?: CourseReviewOrderByWithRelationInput | CourseReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseReviews.
     */
    cursor?: CourseReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseReviews.
     */
    distinct?: CourseReviewScalarFieldEnum | CourseReviewScalarFieldEnum[]
  }

  /**
   * CourseReview findFirstOrThrow
   */
  export type CourseReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseReview
     */
    select?: CourseReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseReviewInclude<ExtArgs> | null
    /**
     * Filter, which CourseReview to fetch.
     */
    where?: CourseReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseReviews to fetch.
     */
    orderBy?: CourseReviewOrderByWithRelationInput | CourseReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseReviews.
     */
    cursor?: CourseReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseReviews.
     */
    distinct?: CourseReviewScalarFieldEnum | CourseReviewScalarFieldEnum[]
  }

  /**
   * CourseReview findMany
   */
  export type CourseReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseReview
     */
    select?: CourseReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseReviewInclude<ExtArgs> | null
    /**
     * Filter, which CourseReviews to fetch.
     */
    where?: CourseReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseReviews to fetch.
     */
    orderBy?: CourseReviewOrderByWithRelationInput | CourseReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CourseReviews.
     */
    cursor?: CourseReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseReviews.
     */
    skip?: number
    distinct?: CourseReviewScalarFieldEnum | CourseReviewScalarFieldEnum[]
  }

  /**
   * CourseReview create
   */
  export type CourseReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseReview
     */
    select?: CourseReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a CourseReview.
     */
    data: XOR<CourseReviewCreateInput, CourseReviewUncheckedCreateInput>
  }

  /**
   * CourseReview createMany
   */
  export type CourseReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CourseReviews.
     */
    data: CourseReviewCreateManyInput | CourseReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CourseReview createManyAndReturn
   */
  export type CourseReviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseReview
     */
    select?: CourseReviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CourseReviews.
     */
    data: CourseReviewCreateManyInput | CourseReviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseReviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CourseReview update
   */
  export type CourseReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseReview
     */
    select?: CourseReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a CourseReview.
     */
    data: XOR<CourseReviewUpdateInput, CourseReviewUncheckedUpdateInput>
    /**
     * Choose, which CourseReview to update.
     */
    where: CourseReviewWhereUniqueInput
  }

  /**
   * CourseReview updateMany
   */
  export type CourseReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CourseReviews.
     */
    data: XOR<CourseReviewUpdateManyMutationInput, CourseReviewUncheckedUpdateManyInput>
    /**
     * Filter which CourseReviews to update
     */
    where?: CourseReviewWhereInput
  }

  /**
   * CourseReview upsert
   */
  export type CourseReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseReview
     */
    select?: CourseReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the CourseReview to update in case it exists.
     */
    where: CourseReviewWhereUniqueInput
    /**
     * In case the CourseReview found by the `where` argument doesn't exist, create a new CourseReview with this data.
     */
    create: XOR<CourseReviewCreateInput, CourseReviewUncheckedCreateInput>
    /**
     * In case the CourseReview was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseReviewUpdateInput, CourseReviewUncheckedUpdateInput>
  }

  /**
   * CourseReview delete
   */
  export type CourseReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseReview
     */
    select?: CourseReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseReviewInclude<ExtArgs> | null
    /**
     * Filter which CourseReview to delete.
     */
    where: CourseReviewWhereUniqueInput
  }

  /**
   * CourseReview deleteMany
   */
  export type CourseReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseReviews to delete
     */
    where?: CourseReviewWhereInput
  }

  /**
   * CourseReview without action
   */
  export type CourseReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseReview
     */
    select?: CourseReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseReviewInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    authProvider: 'authProvider',
    role: 'role',
    tokenVersion: 'tokenVersion',
    isEmailVerified: 'isEmailVerified',
    emailVerificationToken: 'emailVerificationToken',
    emailVerificationExpires: 'emailVerificationExpires',
    passwordResetToken: 'passwordResetToken',
    passwordResetExpires: 'passwordResetExpires',
    lastLogin: 'lastLogin',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    fullName: 'fullName',
    year: 'year',
    branch: 'branch',
    mobile: 'mobile',
    mustChangePassword: 'mustChangePassword',
    permissions: 'permissions'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RegistrationScalarFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    email: 'email',
    year: 'year',
    branch: 'branch',
    academicYear: 'academicYear',
    rollNumber: 'rollNumber',
    collegeId: 'collegeId',
    departmentId: 'departmentId',
    role: 'role',
    status: 'status',
    otpHash: 'otpHash',
    otpExpires: 'otpExpires',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RegistrationScalarFieldEnum = (typeof RegistrationScalarFieldEnum)[keyof typeof RegistrationScalarFieldEnum]


  export const CollegeScalarFieldEnum: {
    id: 'id',
    contactPerson: 'contactPerson',
    name: 'name',
    mobileNumber: 'mobileNumber',
    studentLimit: 'studentLimit',
    validity: 'validity',
    email: 'email',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    adminLimit: 'adminLimit',
    instructorLimit: 'instructorLimit'
  };

  export type CollegeScalarFieldEnum = (typeof CollegeScalarFieldEnum)[keyof typeof CollegeScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    collegeId: 'collegeId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const CourseScalarFieldEnum: {
    id: 'id',
    title: 'title',
    thumbnail: 'thumbnail',
    status: 'status',
    creatorId: 'creatorId',
    category: 'category',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    madeBySuperAdmin: 'madeBySuperAdmin'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const CoursesAssignedScalarFieldEnum: {
    id: 'id',
    courseId: 'courseId',
    collegeId: 'collegeId',
    departmentId: 'departmentId',
    capacity: 'capacity',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CoursesAssignedScalarFieldEnum = (typeof CoursesAssignedScalarFieldEnum)[keyof typeof CoursesAssignedScalarFieldEnum]


  export const EnrollmentScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    courseId: 'courseId',
    status: 'status',
    progress: 'progress',
    startedAt: 'startedAt',
    completedAt: 'completedAt',
    duration: 'duration',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    departmentId: 'departmentId'
  };

  export type EnrollmentScalarFieldEnum = (typeof EnrollmentScalarFieldEnum)[keyof typeof EnrollmentScalarFieldEnum]


  export const ChapterScalarFieldEnum: {
    id: 'id',
    title: 'title',
    slug: 'slug',
    description: 'description',
    content: 'content',
    attachments: 'attachments',
    order: 'order',
    isPreview: 'isPreview',
    isPublished: 'isPublished',
    courseId: 'courseId',
    settings: 'settings',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChapterScalarFieldEnum = (typeof ChapterScalarFieldEnum)[keyof typeof ChapterScalarFieldEnum]


  export const ChapterProgressScalarFieldEnum: {
    id: 'id',
    isCompleted: 'isCompleted',
    timeSpent: 'timeSpent',
    completedAt: 'completedAt',
    chapterId: 'chapterId',
    studentId: 'studentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChapterProgressScalarFieldEnum = (typeof ChapterProgressScalarFieldEnum)[keyof typeof ChapterProgressScalarFieldEnum]


  export const AssessmentScalarFieldEnum: {
    id: 'id',
    title: 'title',
    type: 'type',
    scope: 'scope',
    timeLimitSeconds: 'timeLimitSeconds',
    maxAttempts: 'maxAttempts',
    isPublished: 'isPublished',
    order: 'order',
    courseId: 'courseId',
    chapterId: 'chapterId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AssessmentScalarFieldEnum = (typeof AssessmentScalarFieldEnum)[keyof typeof AssessmentScalarFieldEnum]


  export const AssessmentQuestionScalarFieldEnum: {
    id: 'id',
    assessmentId: 'assessmentId',
    prompt: 'prompt',
    type: 'type',
    options: 'options',
    correctOptionIndex: 'correctOptionIndex',
    correctOptionIndexes: 'correctOptionIndexes',
    correctText: 'correctText',
    pairs: 'pairs',
    sampleAnswer: 'sampleAnswer',
    points: 'points',
    order: 'order'
  };

  export type AssessmentQuestionScalarFieldEnum = (typeof AssessmentQuestionScalarFieldEnum)[keyof typeof AssessmentQuestionScalarFieldEnum]


  export const AssessmentAttemptScalarFieldEnum: {
    id: 'id',
    assessmentId: 'assessmentId',
    studentId: 'studentId',
    startedAt: 'startedAt',
    submittedAt: 'submittedAt',
    status: 'status',
    score: 'score',
    answers: 'answers',
    departmentId: 'departmentId',
    courseId: 'courseId',
    collegeId: 'collegeId'
  };

  export type AssessmentAttemptScalarFieldEnum = (typeof AssessmentAttemptScalarFieldEnum)[keyof typeof AssessmentAttemptScalarFieldEnum]


  export const SettingScalarFieldEnum: {
    id: 'id',
    key: 'key',
    value: 'value',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SettingScalarFieldEnum = (typeof SettingScalarFieldEnum)[keyof typeof SettingScalarFieldEnum]


  export const CourseReviewScalarFieldEnum: {
    id: 'id',
    rating: 'rating',
    comment: 'comment',
    isPublic: 'isPublic',
    courseId: 'courseId',
    studentId: 'studentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CourseReviewScalarFieldEnum = (typeof CourseReviewScalarFieldEnum)[keyof typeof CourseReviewScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    authProvider?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    tokenVersion?: IntFilter<"User"> | number
    isEmailVerified?: BoolFilter<"User"> | boolean
    emailVerificationToken?: StringNullableFilter<"User"> | string | null
    emailVerificationExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    passwordResetToken?: StringNullableFilter<"User"> | string | null
    passwordResetExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    fullName?: StringFilter<"User"> | string
    year?: StringNullableFilter<"User"> | string | null
    branch?: StringNullableFilter<"User"> | string | null
    mobile?: StringNullableFilter<"User"> | string | null
    mustChangePassword?: BoolFilter<"User"> | boolean
    permissions?: JsonFilter<"User">
    createdCourses?: CourseListRelationFilter
    enrollments?: EnrollmentListRelationFilter
    assessmentAttempts?: AssessmentAttemptListRelationFilter
    chapterProgress?: ChapterProgressListRelationFilter
    courseReviews?: CourseReviewListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    authProvider?: SortOrder
    role?: SortOrder
    tokenVersion?: SortOrder
    isEmailVerified?: SortOrder
    emailVerificationToken?: SortOrderInput | SortOrder
    emailVerificationExpires?: SortOrderInput | SortOrder
    passwordResetToken?: SortOrderInput | SortOrder
    passwordResetExpires?: SortOrderInput | SortOrder
    lastLogin?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fullName?: SortOrder
    year?: SortOrderInput | SortOrder
    branch?: SortOrderInput | SortOrder
    mobile?: SortOrderInput | SortOrder
    mustChangePassword?: SortOrder
    permissions?: SortOrder
    createdCourses?: CourseOrderByRelationAggregateInput
    enrollments?: EnrollmentOrderByRelationAggregateInput
    assessmentAttempts?: AssessmentAttemptOrderByRelationAggregateInput
    chapterProgress?: ChapterProgressOrderByRelationAggregateInput
    courseReviews?: CourseReviewOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringNullableFilter<"User"> | string | null
    authProvider?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    tokenVersion?: IntFilter<"User"> | number
    isEmailVerified?: BoolFilter<"User"> | boolean
    emailVerificationToken?: StringNullableFilter<"User"> | string | null
    emailVerificationExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    passwordResetToken?: StringNullableFilter<"User"> | string | null
    passwordResetExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    fullName?: StringFilter<"User"> | string
    year?: StringNullableFilter<"User"> | string | null
    branch?: StringNullableFilter<"User"> | string | null
    mobile?: StringNullableFilter<"User"> | string | null
    mustChangePassword?: BoolFilter<"User"> | boolean
    permissions?: JsonFilter<"User">
    createdCourses?: CourseListRelationFilter
    enrollments?: EnrollmentListRelationFilter
    assessmentAttempts?: AssessmentAttemptListRelationFilter
    chapterProgress?: ChapterProgressListRelationFilter
    courseReviews?: CourseReviewListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    authProvider?: SortOrder
    role?: SortOrder
    tokenVersion?: SortOrder
    isEmailVerified?: SortOrder
    emailVerificationToken?: SortOrderInput | SortOrder
    emailVerificationExpires?: SortOrderInput | SortOrder
    passwordResetToken?: SortOrderInput | SortOrder
    passwordResetExpires?: SortOrderInput | SortOrder
    lastLogin?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fullName?: SortOrder
    year?: SortOrderInput | SortOrder
    branch?: SortOrderInput | SortOrder
    mobile?: SortOrderInput | SortOrder
    mustChangePassword?: SortOrder
    permissions?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    authProvider?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    tokenVersion?: IntWithAggregatesFilter<"User"> | number
    isEmailVerified?: BoolWithAggregatesFilter<"User"> | boolean
    emailVerificationToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailVerificationExpires?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    passwordResetToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    passwordResetExpires?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    fullName?: StringWithAggregatesFilter<"User"> | string
    year?: StringNullableWithAggregatesFilter<"User"> | string | null
    branch?: StringNullableWithAggregatesFilter<"User"> | string | null
    mobile?: StringNullableWithAggregatesFilter<"User"> | string | null
    mustChangePassword?: BoolWithAggregatesFilter<"User"> | boolean
    permissions?: JsonWithAggregatesFilter<"User">
  }

  export type RegistrationWhereInput = {
    AND?: RegistrationWhereInput | RegistrationWhereInput[]
    OR?: RegistrationWhereInput[]
    NOT?: RegistrationWhereInput | RegistrationWhereInput[]
    id?: StringFilter<"Registration"> | string
    fullName?: StringFilter<"Registration"> | string
    email?: StringFilter<"Registration"> | string
    year?: StringNullableFilter<"Registration"> | string | null
    branch?: StringNullableFilter<"Registration"> | string | null
    academicYear?: StringNullableFilter<"Registration"> | string | null
    rollNumber?: StringNullableFilter<"Registration"> | string | null
    collegeId?: StringFilter<"Registration"> | string
    departmentId?: StringNullableFilter<"Registration"> | string | null
    role?: StringFilter<"Registration"> | string
    status?: StringFilter<"Registration"> | string
    otpHash?: StringNullableFilter<"Registration"> | string | null
    otpExpires?: DateTimeNullableFilter<"Registration"> | Date | string | null
    createdAt?: DateTimeFilter<"Registration"> | Date | string
    updatedAt?: DateTimeFilter<"Registration"> | Date | string
    college?: XOR<CollegeRelationFilter, CollegeWhereInput>
    department?: XOR<DepartmentNullableRelationFilter, DepartmentWhereInput> | null
  }

  export type RegistrationOrderByWithRelationInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    year?: SortOrderInput | SortOrder
    branch?: SortOrderInput | SortOrder
    academicYear?: SortOrderInput | SortOrder
    rollNumber?: SortOrderInput | SortOrder
    collegeId?: SortOrder
    departmentId?: SortOrderInput | SortOrder
    role?: SortOrder
    status?: SortOrder
    otpHash?: SortOrderInput | SortOrder
    otpExpires?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    college?: CollegeOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
  }

  export type RegistrationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    collegeId_rollNumber?: RegistrationCollegeIdRollNumberCompoundUniqueInput
    AND?: RegistrationWhereInput | RegistrationWhereInput[]
    OR?: RegistrationWhereInput[]
    NOT?: RegistrationWhereInput | RegistrationWhereInput[]
    fullName?: StringFilter<"Registration"> | string
    year?: StringNullableFilter<"Registration"> | string | null
    branch?: StringNullableFilter<"Registration"> | string | null
    academicYear?: StringNullableFilter<"Registration"> | string | null
    rollNumber?: StringNullableFilter<"Registration"> | string | null
    collegeId?: StringFilter<"Registration"> | string
    departmentId?: StringNullableFilter<"Registration"> | string | null
    role?: StringFilter<"Registration"> | string
    status?: StringFilter<"Registration"> | string
    otpHash?: StringNullableFilter<"Registration"> | string | null
    otpExpires?: DateTimeNullableFilter<"Registration"> | Date | string | null
    createdAt?: DateTimeFilter<"Registration"> | Date | string
    updatedAt?: DateTimeFilter<"Registration"> | Date | string
    college?: XOR<CollegeRelationFilter, CollegeWhereInput>
    department?: XOR<DepartmentNullableRelationFilter, DepartmentWhereInput> | null
  }, "id" | "email" | "collegeId_rollNumber">

  export type RegistrationOrderByWithAggregationInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    year?: SortOrderInput | SortOrder
    branch?: SortOrderInput | SortOrder
    academicYear?: SortOrderInput | SortOrder
    rollNumber?: SortOrderInput | SortOrder
    collegeId?: SortOrder
    departmentId?: SortOrderInput | SortOrder
    role?: SortOrder
    status?: SortOrder
    otpHash?: SortOrderInput | SortOrder
    otpExpires?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RegistrationCountOrderByAggregateInput
    _max?: RegistrationMaxOrderByAggregateInput
    _min?: RegistrationMinOrderByAggregateInput
  }

  export type RegistrationScalarWhereWithAggregatesInput = {
    AND?: RegistrationScalarWhereWithAggregatesInput | RegistrationScalarWhereWithAggregatesInput[]
    OR?: RegistrationScalarWhereWithAggregatesInput[]
    NOT?: RegistrationScalarWhereWithAggregatesInput | RegistrationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Registration"> | string
    fullName?: StringWithAggregatesFilter<"Registration"> | string
    email?: StringWithAggregatesFilter<"Registration"> | string
    year?: StringNullableWithAggregatesFilter<"Registration"> | string | null
    branch?: StringNullableWithAggregatesFilter<"Registration"> | string | null
    academicYear?: StringNullableWithAggregatesFilter<"Registration"> | string | null
    rollNumber?: StringNullableWithAggregatesFilter<"Registration"> | string | null
    collegeId?: StringWithAggregatesFilter<"Registration"> | string
    departmentId?: StringNullableWithAggregatesFilter<"Registration"> | string | null
    role?: StringWithAggregatesFilter<"Registration"> | string
    status?: StringWithAggregatesFilter<"Registration"> | string
    otpHash?: StringNullableWithAggregatesFilter<"Registration"> | string | null
    otpExpires?: DateTimeNullableWithAggregatesFilter<"Registration"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Registration"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Registration"> | Date | string
  }

  export type CollegeWhereInput = {
    AND?: CollegeWhereInput | CollegeWhereInput[]
    OR?: CollegeWhereInput[]
    NOT?: CollegeWhereInput | CollegeWhereInput[]
    id?: StringFilter<"College"> | string
    contactPerson?: StringFilter<"College"> | string
    name?: StringFilter<"College"> | string
    mobileNumber?: StringFilter<"College"> | string
    studentLimit?: IntFilter<"College"> | number
    validity?: DateTimeFilter<"College"> | Date | string
    email?: StringFilter<"College"> | string
    createdAt?: DateTimeFilter<"College"> | Date | string
    updatedAt?: DateTimeFilter<"College"> | Date | string
    adminLimit?: IntFilter<"College"> | number
    instructorLimit?: IntFilter<"College"> | number
    departments?: DepartmentListRelationFilter
    Registration?: RegistrationListRelationFilter
    CoursesAssigned?: CoursesAssignedListRelationFilter
    AssessmentAttempt?: AssessmentAttemptListRelationFilter
  }

  export type CollegeOrderByWithRelationInput = {
    id?: SortOrder
    contactPerson?: SortOrder
    name?: SortOrder
    mobileNumber?: SortOrder
    studentLimit?: SortOrder
    validity?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminLimit?: SortOrder
    instructorLimit?: SortOrder
    departments?: DepartmentOrderByRelationAggregateInput
    Registration?: RegistrationOrderByRelationAggregateInput
    CoursesAssigned?: CoursesAssignedOrderByRelationAggregateInput
    AssessmentAttempt?: AssessmentAttemptOrderByRelationAggregateInput
  }

  export type CollegeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CollegeWhereInput | CollegeWhereInput[]
    OR?: CollegeWhereInput[]
    NOT?: CollegeWhereInput | CollegeWhereInput[]
    contactPerson?: StringFilter<"College"> | string
    name?: StringFilter<"College"> | string
    mobileNumber?: StringFilter<"College"> | string
    studentLimit?: IntFilter<"College"> | number
    validity?: DateTimeFilter<"College"> | Date | string
    email?: StringFilter<"College"> | string
    createdAt?: DateTimeFilter<"College"> | Date | string
    updatedAt?: DateTimeFilter<"College"> | Date | string
    adminLimit?: IntFilter<"College"> | number
    instructorLimit?: IntFilter<"College"> | number
    departments?: DepartmentListRelationFilter
    Registration?: RegistrationListRelationFilter
    CoursesAssigned?: CoursesAssignedListRelationFilter
    AssessmentAttempt?: AssessmentAttemptListRelationFilter
  }, "id">

  export type CollegeOrderByWithAggregationInput = {
    id?: SortOrder
    contactPerson?: SortOrder
    name?: SortOrder
    mobileNumber?: SortOrder
    studentLimit?: SortOrder
    validity?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminLimit?: SortOrder
    instructorLimit?: SortOrder
    _count?: CollegeCountOrderByAggregateInput
    _avg?: CollegeAvgOrderByAggregateInput
    _max?: CollegeMaxOrderByAggregateInput
    _min?: CollegeMinOrderByAggregateInput
    _sum?: CollegeSumOrderByAggregateInput
  }

  export type CollegeScalarWhereWithAggregatesInput = {
    AND?: CollegeScalarWhereWithAggregatesInput | CollegeScalarWhereWithAggregatesInput[]
    OR?: CollegeScalarWhereWithAggregatesInput[]
    NOT?: CollegeScalarWhereWithAggregatesInput | CollegeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"College"> | string
    contactPerson?: StringWithAggregatesFilter<"College"> | string
    name?: StringWithAggregatesFilter<"College"> | string
    mobileNumber?: StringWithAggregatesFilter<"College"> | string
    studentLimit?: IntWithAggregatesFilter<"College"> | number
    validity?: DateTimeWithAggregatesFilter<"College"> | Date | string
    email?: StringWithAggregatesFilter<"College"> | string
    createdAt?: DateTimeWithAggregatesFilter<"College"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"College"> | Date | string
    adminLimit?: IntWithAggregatesFilter<"College"> | number
    instructorLimit?: IntWithAggregatesFilter<"College"> | number
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    collegeId?: StringFilter<"Department"> | string
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    college?: XOR<CollegeRelationFilter, CollegeWhereInput>
    Registration?: RegistrationListRelationFilter
    CoursesAssigned?: CoursesAssignedListRelationFilter
    Enrollment?: EnrollmentListRelationFilter
    AssessmentAttempt?: AssessmentAttemptListRelationFilter
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    collegeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    college?: CollegeOrderByWithRelationInput
    Registration?: RegistrationOrderByRelationAggregateInput
    CoursesAssigned?: CoursesAssignedOrderByRelationAggregateInput
    Enrollment?: EnrollmentOrderByRelationAggregateInput
    AssessmentAttempt?: AssessmentAttemptOrderByRelationAggregateInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    name?: StringFilter<"Department"> | string
    collegeId?: StringFilter<"Department"> | string
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    college?: XOR<CollegeRelationFilter, CollegeWhereInput>
    Registration?: RegistrationListRelationFilter
    CoursesAssigned?: CoursesAssignedListRelationFilter
    Enrollment?: EnrollmentListRelationFilter
    AssessmentAttempt?: AssessmentAttemptListRelationFilter
  }, "id">

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    collegeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Department"> | string
    name?: StringWithAggregatesFilter<"Department"> | string
    collegeId?: StringWithAggregatesFilter<"Department"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
  }

  export type CourseWhereInput = {
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    id?: StringFilter<"Course"> | string
    title?: StringFilter<"Course"> | string
    thumbnail?: StringNullableFilter<"Course"> | string | null
    status?: StringFilter<"Course"> | string
    creatorId?: StringFilter<"Course"> | string
    category?: StringNullableFilter<"Course"> | string | null
    description?: StringNullableFilter<"Course"> | string | null
    createdAt?: DateTimeFilter<"Course"> | Date | string
    updatedAt?: DateTimeFilter<"Course"> | Date | string
    madeBySuperAdmin?: BoolFilter<"Course"> | boolean
    creator?: XOR<UserRelationFilter, UserWhereInput>
    enrollments?: EnrollmentListRelationFilter
    assessments?: AssessmentListRelationFilter
    chapters?: ChapterListRelationFilter
    reviews?: CourseReviewListRelationFilter
    CoursesAssigned?: CoursesAssignedListRelationFilter
    AssessmentAttempt?: AssessmentAttemptListRelationFilter
  }

  export type CourseOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    thumbnail?: SortOrderInput | SortOrder
    status?: SortOrder
    creatorId?: SortOrder
    category?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    madeBySuperAdmin?: SortOrder
    creator?: UserOrderByWithRelationInput
    enrollments?: EnrollmentOrderByRelationAggregateInput
    assessments?: AssessmentOrderByRelationAggregateInput
    chapters?: ChapterOrderByRelationAggregateInput
    reviews?: CourseReviewOrderByRelationAggregateInput
    CoursesAssigned?: CoursesAssignedOrderByRelationAggregateInput
    AssessmentAttempt?: AssessmentAttemptOrderByRelationAggregateInput
  }

  export type CourseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    title?: StringFilter<"Course"> | string
    thumbnail?: StringNullableFilter<"Course"> | string | null
    status?: StringFilter<"Course"> | string
    creatorId?: StringFilter<"Course"> | string
    category?: StringNullableFilter<"Course"> | string | null
    description?: StringNullableFilter<"Course"> | string | null
    createdAt?: DateTimeFilter<"Course"> | Date | string
    updatedAt?: DateTimeFilter<"Course"> | Date | string
    madeBySuperAdmin?: BoolFilter<"Course"> | boolean
    creator?: XOR<UserRelationFilter, UserWhereInput>
    enrollments?: EnrollmentListRelationFilter
    assessments?: AssessmentListRelationFilter
    chapters?: ChapterListRelationFilter
    reviews?: CourseReviewListRelationFilter
    CoursesAssigned?: CoursesAssignedListRelationFilter
    AssessmentAttempt?: AssessmentAttemptListRelationFilter
  }, "id">

  export type CourseOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    thumbnail?: SortOrderInput | SortOrder
    status?: SortOrder
    creatorId?: SortOrder
    category?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    madeBySuperAdmin?: SortOrder
    _count?: CourseCountOrderByAggregateInput
    _max?: CourseMaxOrderByAggregateInput
    _min?: CourseMinOrderByAggregateInput
  }

  export type CourseScalarWhereWithAggregatesInput = {
    AND?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    OR?: CourseScalarWhereWithAggregatesInput[]
    NOT?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Course"> | string
    title?: StringWithAggregatesFilter<"Course"> | string
    thumbnail?: StringNullableWithAggregatesFilter<"Course"> | string | null
    status?: StringWithAggregatesFilter<"Course"> | string
    creatorId?: StringWithAggregatesFilter<"Course"> | string
    category?: StringNullableWithAggregatesFilter<"Course"> | string | null
    description?: StringNullableWithAggregatesFilter<"Course"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Course"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Course"> | Date | string
    madeBySuperAdmin?: BoolWithAggregatesFilter<"Course"> | boolean
  }

  export type CoursesAssignedWhereInput = {
    AND?: CoursesAssignedWhereInput | CoursesAssignedWhereInput[]
    OR?: CoursesAssignedWhereInput[]
    NOT?: CoursesAssignedWhereInput | CoursesAssignedWhereInput[]
    id?: StringFilter<"CoursesAssigned"> | string
    courseId?: StringFilter<"CoursesAssigned"> | string
    collegeId?: StringFilter<"CoursesAssigned"> | string
    departmentId?: StringNullableFilter<"CoursesAssigned"> | string | null
    capacity?: IntNullableFilter<"CoursesAssigned"> | number | null
    createdAt?: DateTimeFilter<"CoursesAssigned"> | Date | string
    updatedAt?: DateTimeFilter<"CoursesAssigned"> | Date | string
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    college?: XOR<CollegeRelationFilter, CollegeWhereInput>
    department?: XOR<DepartmentNullableRelationFilter, DepartmentWhereInput> | null
  }

  export type CoursesAssignedOrderByWithRelationInput = {
    id?: SortOrder
    courseId?: SortOrder
    collegeId?: SortOrder
    departmentId?: SortOrderInput | SortOrder
    capacity?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    course?: CourseOrderByWithRelationInput
    college?: CollegeOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
  }

  export type CoursesAssignedWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    courseId_collegeId_departmentId?: CoursesAssignedCourseIdCollegeIdDepartmentIdCompoundUniqueInput
    AND?: CoursesAssignedWhereInput | CoursesAssignedWhereInput[]
    OR?: CoursesAssignedWhereInput[]
    NOT?: CoursesAssignedWhereInput | CoursesAssignedWhereInput[]
    courseId?: StringFilter<"CoursesAssigned"> | string
    collegeId?: StringFilter<"CoursesAssigned"> | string
    departmentId?: StringNullableFilter<"CoursesAssigned"> | string | null
    capacity?: IntNullableFilter<"CoursesAssigned"> | number | null
    createdAt?: DateTimeFilter<"CoursesAssigned"> | Date | string
    updatedAt?: DateTimeFilter<"CoursesAssigned"> | Date | string
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    college?: XOR<CollegeRelationFilter, CollegeWhereInput>
    department?: XOR<DepartmentNullableRelationFilter, DepartmentWhereInput> | null
  }, "id" | "courseId_collegeId_departmentId">

  export type CoursesAssignedOrderByWithAggregationInput = {
    id?: SortOrder
    courseId?: SortOrder
    collegeId?: SortOrder
    departmentId?: SortOrderInput | SortOrder
    capacity?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CoursesAssignedCountOrderByAggregateInput
    _avg?: CoursesAssignedAvgOrderByAggregateInput
    _max?: CoursesAssignedMaxOrderByAggregateInput
    _min?: CoursesAssignedMinOrderByAggregateInput
    _sum?: CoursesAssignedSumOrderByAggregateInput
  }

  export type CoursesAssignedScalarWhereWithAggregatesInput = {
    AND?: CoursesAssignedScalarWhereWithAggregatesInput | CoursesAssignedScalarWhereWithAggregatesInput[]
    OR?: CoursesAssignedScalarWhereWithAggregatesInput[]
    NOT?: CoursesAssignedScalarWhereWithAggregatesInput | CoursesAssignedScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CoursesAssigned"> | string
    courseId?: StringWithAggregatesFilter<"CoursesAssigned"> | string
    collegeId?: StringWithAggregatesFilter<"CoursesAssigned"> | string
    departmentId?: StringNullableWithAggregatesFilter<"CoursesAssigned"> | string | null
    capacity?: IntNullableWithAggregatesFilter<"CoursesAssigned"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"CoursesAssigned"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CoursesAssigned"> | Date | string
  }

  export type EnrollmentWhereInput = {
    AND?: EnrollmentWhereInput | EnrollmentWhereInput[]
    OR?: EnrollmentWhereInput[]
    NOT?: EnrollmentWhereInput | EnrollmentWhereInput[]
    id?: StringFilter<"Enrollment"> | string
    studentId?: StringFilter<"Enrollment"> | string
    courseId?: StringFilter<"Enrollment"> | string
    status?: StringFilter<"Enrollment"> | string
    progress?: IntFilter<"Enrollment"> | number
    startedAt?: DateTimeNullableFilter<"Enrollment"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"Enrollment"> | Date | string | null
    duration?: IntNullableFilter<"Enrollment"> | number | null
    createdAt?: DateTimeFilter<"Enrollment"> | Date | string
    updatedAt?: DateTimeFilter<"Enrollment"> | Date | string
    departmentId?: StringNullableFilter<"Enrollment"> | string | null
    student?: XOR<UserRelationFilter, UserWhereInput>
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    department?: XOR<DepartmentNullableRelationFilter, DepartmentWhereInput> | null
  }

  export type EnrollmentOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    courseId?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    departmentId?: SortOrderInput | SortOrder
    student?: UserOrderByWithRelationInput
    course?: CourseOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
  }

  export type EnrollmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    studentId_courseId?: EnrollmentStudentIdCourseIdCompoundUniqueInput
    AND?: EnrollmentWhereInput | EnrollmentWhereInput[]
    OR?: EnrollmentWhereInput[]
    NOT?: EnrollmentWhereInput | EnrollmentWhereInput[]
    studentId?: StringFilter<"Enrollment"> | string
    courseId?: StringFilter<"Enrollment"> | string
    status?: StringFilter<"Enrollment"> | string
    progress?: IntFilter<"Enrollment"> | number
    startedAt?: DateTimeNullableFilter<"Enrollment"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"Enrollment"> | Date | string | null
    duration?: IntNullableFilter<"Enrollment"> | number | null
    createdAt?: DateTimeFilter<"Enrollment"> | Date | string
    updatedAt?: DateTimeFilter<"Enrollment"> | Date | string
    departmentId?: StringNullableFilter<"Enrollment"> | string | null
    student?: XOR<UserRelationFilter, UserWhereInput>
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    department?: XOR<DepartmentNullableRelationFilter, DepartmentWhereInput> | null
  }, "id" | "studentId_courseId">

  export type EnrollmentOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    courseId?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    departmentId?: SortOrderInput | SortOrder
    _count?: EnrollmentCountOrderByAggregateInput
    _avg?: EnrollmentAvgOrderByAggregateInput
    _max?: EnrollmentMaxOrderByAggregateInput
    _min?: EnrollmentMinOrderByAggregateInput
    _sum?: EnrollmentSumOrderByAggregateInput
  }

  export type EnrollmentScalarWhereWithAggregatesInput = {
    AND?: EnrollmentScalarWhereWithAggregatesInput | EnrollmentScalarWhereWithAggregatesInput[]
    OR?: EnrollmentScalarWhereWithAggregatesInput[]
    NOT?: EnrollmentScalarWhereWithAggregatesInput | EnrollmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Enrollment"> | string
    studentId?: StringWithAggregatesFilter<"Enrollment"> | string
    courseId?: StringWithAggregatesFilter<"Enrollment"> | string
    status?: StringWithAggregatesFilter<"Enrollment"> | string
    progress?: IntWithAggregatesFilter<"Enrollment"> | number
    startedAt?: DateTimeNullableWithAggregatesFilter<"Enrollment"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"Enrollment"> | Date | string | null
    duration?: IntNullableWithAggregatesFilter<"Enrollment"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Enrollment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Enrollment"> | Date | string
    departmentId?: StringNullableWithAggregatesFilter<"Enrollment"> | string | null
  }

  export type ChapterWhereInput = {
    AND?: ChapterWhereInput | ChapterWhereInput[]
    OR?: ChapterWhereInput[]
    NOT?: ChapterWhereInput | ChapterWhereInput[]
    id?: StringFilter<"Chapter"> | string
    title?: StringFilter<"Chapter"> | string
    slug?: StringFilter<"Chapter"> | string
    description?: StringNullableFilter<"Chapter"> | string | null
    content?: StringNullableFilter<"Chapter"> | string | null
    attachments?: StringNullableListFilter<"Chapter">
    order?: IntFilter<"Chapter"> | number
    isPreview?: BoolFilter<"Chapter"> | boolean
    isPublished?: BoolFilter<"Chapter"> | boolean
    courseId?: StringFilter<"Chapter"> | string
    settings?: JsonFilter<"Chapter">
    createdAt?: DateTimeFilter<"Chapter"> | Date | string
    updatedAt?: DateTimeFilter<"Chapter"> | Date | string
    assessments?: AssessmentListRelationFilter
    progress?: ChapterProgressListRelationFilter
    course?: XOR<CourseRelationFilter, CourseWhereInput>
  }

  export type ChapterOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    content?: SortOrderInput | SortOrder
    attachments?: SortOrder
    order?: SortOrder
    isPreview?: SortOrder
    isPublished?: SortOrder
    courseId?: SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    assessments?: AssessmentOrderByRelationAggregateInput
    progress?: ChapterProgressOrderByRelationAggregateInput
    course?: CourseOrderByWithRelationInput
  }

  export type ChapterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    courseId_slug?: ChapterCourseIdSlugCompoundUniqueInput
    AND?: ChapterWhereInput | ChapterWhereInput[]
    OR?: ChapterWhereInput[]
    NOT?: ChapterWhereInput | ChapterWhereInput[]
    title?: StringFilter<"Chapter"> | string
    slug?: StringFilter<"Chapter"> | string
    description?: StringNullableFilter<"Chapter"> | string | null
    content?: StringNullableFilter<"Chapter"> | string | null
    attachments?: StringNullableListFilter<"Chapter">
    order?: IntFilter<"Chapter"> | number
    isPreview?: BoolFilter<"Chapter"> | boolean
    isPublished?: BoolFilter<"Chapter"> | boolean
    courseId?: StringFilter<"Chapter"> | string
    settings?: JsonFilter<"Chapter">
    createdAt?: DateTimeFilter<"Chapter"> | Date | string
    updatedAt?: DateTimeFilter<"Chapter"> | Date | string
    assessments?: AssessmentListRelationFilter
    progress?: ChapterProgressListRelationFilter
    course?: XOR<CourseRelationFilter, CourseWhereInput>
  }, "id" | "courseId_slug">

  export type ChapterOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    content?: SortOrderInput | SortOrder
    attachments?: SortOrder
    order?: SortOrder
    isPreview?: SortOrder
    isPublished?: SortOrder
    courseId?: SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChapterCountOrderByAggregateInput
    _avg?: ChapterAvgOrderByAggregateInput
    _max?: ChapterMaxOrderByAggregateInput
    _min?: ChapterMinOrderByAggregateInput
    _sum?: ChapterSumOrderByAggregateInput
  }

  export type ChapterScalarWhereWithAggregatesInput = {
    AND?: ChapterScalarWhereWithAggregatesInput | ChapterScalarWhereWithAggregatesInput[]
    OR?: ChapterScalarWhereWithAggregatesInput[]
    NOT?: ChapterScalarWhereWithAggregatesInput | ChapterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Chapter"> | string
    title?: StringWithAggregatesFilter<"Chapter"> | string
    slug?: StringWithAggregatesFilter<"Chapter"> | string
    description?: StringNullableWithAggregatesFilter<"Chapter"> | string | null
    content?: StringNullableWithAggregatesFilter<"Chapter"> | string | null
    attachments?: StringNullableListFilter<"Chapter">
    order?: IntWithAggregatesFilter<"Chapter"> | number
    isPreview?: BoolWithAggregatesFilter<"Chapter"> | boolean
    isPublished?: BoolWithAggregatesFilter<"Chapter"> | boolean
    courseId?: StringWithAggregatesFilter<"Chapter"> | string
    settings?: JsonWithAggregatesFilter<"Chapter">
    createdAt?: DateTimeWithAggregatesFilter<"Chapter"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Chapter"> | Date | string
  }

  export type ChapterProgressWhereInput = {
    AND?: ChapterProgressWhereInput | ChapterProgressWhereInput[]
    OR?: ChapterProgressWhereInput[]
    NOT?: ChapterProgressWhereInput | ChapterProgressWhereInput[]
    id?: StringFilter<"ChapterProgress"> | string
    isCompleted?: BoolFilter<"ChapterProgress"> | boolean
    timeSpent?: IntFilter<"ChapterProgress"> | number
    completedAt?: DateTimeNullableFilter<"ChapterProgress"> | Date | string | null
    chapterId?: StringFilter<"ChapterProgress"> | string
    studentId?: StringFilter<"ChapterProgress"> | string
    createdAt?: DateTimeFilter<"ChapterProgress"> | Date | string
    updatedAt?: DateTimeFilter<"ChapterProgress"> | Date | string
    chapter?: XOR<ChapterRelationFilter, ChapterWhereInput>
    student?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ChapterProgressOrderByWithRelationInput = {
    id?: SortOrder
    isCompleted?: SortOrder
    timeSpent?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    chapterId?: SortOrder
    studentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chapter?: ChapterOrderByWithRelationInput
    student?: UserOrderByWithRelationInput
  }

  export type ChapterProgressWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    chapterId_studentId?: ChapterProgressChapterIdStudentIdCompoundUniqueInput
    AND?: ChapterProgressWhereInput | ChapterProgressWhereInput[]
    OR?: ChapterProgressWhereInput[]
    NOT?: ChapterProgressWhereInput | ChapterProgressWhereInput[]
    isCompleted?: BoolFilter<"ChapterProgress"> | boolean
    timeSpent?: IntFilter<"ChapterProgress"> | number
    completedAt?: DateTimeNullableFilter<"ChapterProgress"> | Date | string | null
    chapterId?: StringFilter<"ChapterProgress"> | string
    studentId?: StringFilter<"ChapterProgress"> | string
    createdAt?: DateTimeFilter<"ChapterProgress"> | Date | string
    updatedAt?: DateTimeFilter<"ChapterProgress"> | Date | string
    chapter?: XOR<ChapterRelationFilter, ChapterWhereInput>
    student?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "chapterId_studentId">

  export type ChapterProgressOrderByWithAggregationInput = {
    id?: SortOrder
    isCompleted?: SortOrder
    timeSpent?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    chapterId?: SortOrder
    studentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChapterProgressCountOrderByAggregateInput
    _avg?: ChapterProgressAvgOrderByAggregateInput
    _max?: ChapterProgressMaxOrderByAggregateInput
    _min?: ChapterProgressMinOrderByAggregateInput
    _sum?: ChapterProgressSumOrderByAggregateInput
  }

  export type ChapterProgressScalarWhereWithAggregatesInput = {
    AND?: ChapterProgressScalarWhereWithAggregatesInput | ChapterProgressScalarWhereWithAggregatesInput[]
    OR?: ChapterProgressScalarWhereWithAggregatesInput[]
    NOT?: ChapterProgressScalarWhereWithAggregatesInput | ChapterProgressScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ChapterProgress"> | string
    isCompleted?: BoolWithAggregatesFilter<"ChapterProgress"> | boolean
    timeSpent?: IntWithAggregatesFilter<"ChapterProgress"> | number
    completedAt?: DateTimeNullableWithAggregatesFilter<"ChapterProgress"> | Date | string | null
    chapterId?: StringWithAggregatesFilter<"ChapterProgress"> | string
    studentId?: StringWithAggregatesFilter<"ChapterProgress"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ChapterProgress"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ChapterProgress"> | Date | string
  }

  export type AssessmentWhereInput = {
    AND?: AssessmentWhereInput | AssessmentWhereInput[]
    OR?: AssessmentWhereInput[]
    NOT?: AssessmentWhereInput | AssessmentWhereInput[]
    id?: StringFilter<"Assessment"> | string
    title?: StringFilter<"Assessment"> | string
    type?: StringFilter<"Assessment"> | string
    scope?: StringFilter<"Assessment"> | string
    timeLimitSeconds?: IntNullableFilter<"Assessment"> | number | null
    maxAttempts?: IntFilter<"Assessment"> | number
    isPublished?: BoolFilter<"Assessment"> | boolean
    order?: IntNullableFilter<"Assessment"> | number | null
    courseId?: StringNullableFilter<"Assessment"> | string | null
    chapterId?: StringNullableFilter<"Assessment"> | string | null
    createdAt?: DateTimeFilter<"Assessment"> | Date | string
    updatedAt?: DateTimeFilter<"Assessment"> | Date | string
    questions?: AssessmentQuestionListRelationFilter
    attempts?: AssessmentAttemptListRelationFilter
    chapter?: XOR<ChapterNullableRelationFilter, ChapterWhereInput> | null
    course?: XOR<CourseNullableRelationFilter, CourseWhereInput> | null
  }

  export type AssessmentOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    type?: SortOrder
    scope?: SortOrder
    timeLimitSeconds?: SortOrderInput | SortOrder
    maxAttempts?: SortOrder
    isPublished?: SortOrder
    order?: SortOrderInput | SortOrder
    courseId?: SortOrderInput | SortOrder
    chapterId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    questions?: AssessmentQuestionOrderByRelationAggregateInput
    attempts?: AssessmentAttemptOrderByRelationAggregateInput
    chapter?: ChapterOrderByWithRelationInput
    course?: CourseOrderByWithRelationInput
  }

  export type AssessmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AssessmentWhereInput | AssessmentWhereInput[]
    OR?: AssessmentWhereInput[]
    NOT?: AssessmentWhereInput | AssessmentWhereInput[]
    title?: StringFilter<"Assessment"> | string
    type?: StringFilter<"Assessment"> | string
    scope?: StringFilter<"Assessment"> | string
    timeLimitSeconds?: IntNullableFilter<"Assessment"> | number | null
    maxAttempts?: IntFilter<"Assessment"> | number
    isPublished?: BoolFilter<"Assessment"> | boolean
    order?: IntNullableFilter<"Assessment"> | number | null
    courseId?: StringNullableFilter<"Assessment"> | string | null
    chapterId?: StringNullableFilter<"Assessment"> | string | null
    createdAt?: DateTimeFilter<"Assessment"> | Date | string
    updatedAt?: DateTimeFilter<"Assessment"> | Date | string
    questions?: AssessmentQuestionListRelationFilter
    attempts?: AssessmentAttemptListRelationFilter
    chapter?: XOR<ChapterNullableRelationFilter, ChapterWhereInput> | null
    course?: XOR<CourseNullableRelationFilter, CourseWhereInput> | null
  }, "id">

  export type AssessmentOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    type?: SortOrder
    scope?: SortOrder
    timeLimitSeconds?: SortOrderInput | SortOrder
    maxAttempts?: SortOrder
    isPublished?: SortOrder
    order?: SortOrderInput | SortOrder
    courseId?: SortOrderInput | SortOrder
    chapterId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AssessmentCountOrderByAggregateInput
    _avg?: AssessmentAvgOrderByAggregateInput
    _max?: AssessmentMaxOrderByAggregateInput
    _min?: AssessmentMinOrderByAggregateInput
    _sum?: AssessmentSumOrderByAggregateInput
  }

  export type AssessmentScalarWhereWithAggregatesInput = {
    AND?: AssessmentScalarWhereWithAggregatesInput | AssessmentScalarWhereWithAggregatesInput[]
    OR?: AssessmentScalarWhereWithAggregatesInput[]
    NOT?: AssessmentScalarWhereWithAggregatesInput | AssessmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Assessment"> | string
    title?: StringWithAggregatesFilter<"Assessment"> | string
    type?: StringWithAggregatesFilter<"Assessment"> | string
    scope?: StringWithAggregatesFilter<"Assessment"> | string
    timeLimitSeconds?: IntNullableWithAggregatesFilter<"Assessment"> | number | null
    maxAttempts?: IntWithAggregatesFilter<"Assessment"> | number
    isPublished?: BoolWithAggregatesFilter<"Assessment"> | boolean
    order?: IntNullableWithAggregatesFilter<"Assessment"> | number | null
    courseId?: StringNullableWithAggregatesFilter<"Assessment"> | string | null
    chapterId?: StringNullableWithAggregatesFilter<"Assessment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Assessment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Assessment"> | Date | string
  }

  export type AssessmentQuestionWhereInput = {
    AND?: AssessmentQuestionWhereInput | AssessmentQuestionWhereInput[]
    OR?: AssessmentQuestionWhereInput[]
    NOT?: AssessmentQuestionWhereInput | AssessmentQuestionWhereInput[]
    id?: StringFilter<"AssessmentQuestion"> | string
    assessmentId?: StringFilter<"AssessmentQuestion"> | string
    prompt?: StringFilter<"AssessmentQuestion"> | string
    type?: StringFilter<"AssessmentQuestion"> | string
    options?: StringNullableListFilter<"AssessmentQuestion">
    correctOptionIndex?: IntNullableFilter<"AssessmentQuestion"> | number | null
    correctOptionIndexes?: IntNullableListFilter<"AssessmentQuestion">
    correctText?: StringNullableFilter<"AssessmentQuestion"> | string | null
    pairs?: JsonNullableFilter<"AssessmentQuestion">
    sampleAnswer?: StringNullableFilter<"AssessmentQuestion"> | string | null
    points?: IntFilter<"AssessmentQuestion"> | number
    order?: IntFilter<"AssessmentQuestion"> | number
    assessment?: XOR<AssessmentRelationFilter, AssessmentWhereInput>
  }

  export type AssessmentQuestionOrderByWithRelationInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    prompt?: SortOrder
    type?: SortOrder
    options?: SortOrder
    correctOptionIndex?: SortOrderInput | SortOrder
    correctOptionIndexes?: SortOrder
    correctText?: SortOrderInput | SortOrder
    pairs?: SortOrderInput | SortOrder
    sampleAnswer?: SortOrderInput | SortOrder
    points?: SortOrder
    order?: SortOrder
    assessment?: AssessmentOrderByWithRelationInput
  }

  export type AssessmentQuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AssessmentQuestionWhereInput | AssessmentQuestionWhereInput[]
    OR?: AssessmentQuestionWhereInput[]
    NOT?: AssessmentQuestionWhereInput | AssessmentQuestionWhereInput[]
    assessmentId?: StringFilter<"AssessmentQuestion"> | string
    prompt?: StringFilter<"AssessmentQuestion"> | string
    type?: StringFilter<"AssessmentQuestion"> | string
    options?: StringNullableListFilter<"AssessmentQuestion">
    correctOptionIndex?: IntNullableFilter<"AssessmentQuestion"> | number | null
    correctOptionIndexes?: IntNullableListFilter<"AssessmentQuestion">
    correctText?: StringNullableFilter<"AssessmentQuestion"> | string | null
    pairs?: JsonNullableFilter<"AssessmentQuestion">
    sampleAnswer?: StringNullableFilter<"AssessmentQuestion"> | string | null
    points?: IntFilter<"AssessmentQuestion"> | number
    order?: IntFilter<"AssessmentQuestion"> | number
    assessment?: XOR<AssessmentRelationFilter, AssessmentWhereInput>
  }, "id">

  export type AssessmentQuestionOrderByWithAggregationInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    prompt?: SortOrder
    type?: SortOrder
    options?: SortOrder
    correctOptionIndex?: SortOrderInput | SortOrder
    correctOptionIndexes?: SortOrder
    correctText?: SortOrderInput | SortOrder
    pairs?: SortOrderInput | SortOrder
    sampleAnswer?: SortOrderInput | SortOrder
    points?: SortOrder
    order?: SortOrder
    _count?: AssessmentQuestionCountOrderByAggregateInput
    _avg?: AssessmentQuestionAvgOrderByAggregateInput
    _max?: AssessmentQuestionMaxOrderByAggregateInput
    _min?: AssessmentQuestionMinOrderByAggregateInput
    _sum?: AssessmentQuestionSumOrderByAggregateInput
  }

  export type AssessmentQuestionScalarWhereWithAggregatesInput = {
    AND?: AssessmentQuestionScalarWhereWithAggregatesInput | AssessmentQuestionScalarWhereWithAggregatesInput[]
    OR?: AssessmentQuestionScalarWhereWithAggregatesInput[]
    NOT?: AssessmentQuestionScalarWhereWithAggregatesInput | AssessmentQuestionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AssessmentQuestion"> | string
    assessmentId?: StringWithAggregatesFilter<"AssessmentQuestion"> | string
    prompt?: StringWithAggregatesFilter<"AssessmentQuestion"> | string
    type?: StringWithAggregatesFilter<"AssessmentQuestion"> | string
    options?: StringNullableListFilter<"AssessmentQuestion">
    correctOptionIndex?: IntNullableWithAggregatesFilter<"AssessmentQuestion"> | number | null
    correctOptionIndexes?: IntNullableListFilter<"AssessmentQuestion">
    correctText?: StringNullableWithAggregatesFilter<"AssessmentQuestion"> | string | null
    pairs?: JsonNullableWithAggregatesFilter<"AssessmentQuestion">
    sampleAnswer?: StringNullableWithAggregatesFilter<"AssessmentQuestion"> | string | null
    points?: IntWithAggregatesFilter<"AssessmentQuestion"> | number
    order?: IntWithAggregatesFilter<"AssessmentQuestion"> | number
  }

  export type AssessmentAttemptWhereInput = {
    AND?: AssessmentAttemptWhereInput | AssessmentAttemptWhereInput[]
    OR?: AssessmentAttemptWhereInput[]
    NOT?: AssessmentAttemptWhereInput | AssessmentAttemptWhereInput[]
    id?: StringFilter<"AssessmentAttempt"> | string
    assessmentId?: StringFilter<"AssessmentAttempt"> | string
    studentId?: StringFilter<"AssessmentAttempt"> | string
    startedAt?: DateTimeFilter<"AssessmentAttempt"> | Date | string
    submittedAt?: DateTimeNullableFilter<"AssessmentAttempt"> | Date | string | null
    status?: StringFilter<"AssessmentAttempt"> | string
    score?: IntNullableFilter<"AssessmentAttempt"> | number | null
    answers?: JsonNullableFilter<"AssessmentAttempt">
    departmentId?: StringNullableFilter<"AssessmentAttempt"> | string | null
    courseId?: StringNullableFilter<"AssessmentAttempt"> | string | null
    collegeId?: StringNullableFilter<"AssessmentAttempt"> | string | null
    assessment?: XOR<AssessmentRelationFilter, AssessmentWhereInput>
    student?: XOR<UserRelationFilter, UserWhereInput>
    department?: XOR<DepartmentNullableRelationFilter, DepartmentWhereInput> | null
    course?: XOR<CourseNullableRelationFilter, CourseWhereInput> | null
    college?: XOR<CollegeNullableRelationFilter, CollegeWhereInput> | null
  }

  export type AssessmentAttemptOrderByWithRelationInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    studentId?: SortOrder
    startedAt?: SortOrder
    submittedAt?: SortOrderInput | SortOrder
    status?: SortOrder
    score?: SortOrderInput | SortOrder
    answers?: SortOrderInput | SortOrder
    departmentId?: SortOrderInput | SortOrder
    courseId?: SortOrderInput | SortOrder
    collegeId?: SortOrderInput | SortOrder
    assessment?: AssessmentOrderByWithRelationInput
    student?: UserOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
    course?: CourseOrderByWithRelationInput
    college?: CollegeOrderByWithRelationInput
  }

  export type AssessmentAttemptWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AssessmentAttemptWhereInput | AssessmentAttemptWhereInput[]
    OR?: AssessmentAttemptWhereInput[]
    NOT?: AssessmentAttemptWhereInput | AssessmentAttemptWhereInput[]
    assessmentId?: StringFilter<"AssessmentAttempt"> | string
    studentId?: StringFilter<"AssessmentAttempt"> | string
    startedAt?: DateTimeFilter<"AssessmentAttempt"> | Date | string
    submittedAt?: DateTimeNullableFilter<"AssessmentAttempt"> | Date | string | null
    status?: StringFilter<"AssessmentAttempt"> | string
    score?: IntNullableFilter<"AssessmentAttempt"> | number | null
    answers?: JsonNullableFilter<"AssessmentAttempt">
    departmentId?: StringNullableFilter<"AssessmentAttempt"> | string | null
    courseId?: StringNullableFilter<"AssessmentAttempt"> | string | null
    collegeId?: StringNullableFilter<"AssessmentAttempt"> | string | null
    assessment?: XOR<AssessmentRelationFilter, AssessmentWhereInput>
    student?: XOR<UserRelationFilter, UserWhereInput>
    department?: XOR<DepartmentNullableRelationFilter, DepartmentWhereInput> | null
    course?: XOR<CourseNullableRelationFilter, CourseWhereInput> | null
    college?: XOR<CollegeNullableRelationFilter, CollegeWhereInput> | null
  }, "id">

  export type AssessmentAttemptOrderByWithAggregationInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    studentId?: SortOrder
    startedAt?: SortOrder
    submittedAt?: SortOrderInput | SortOrder
    status?: SortOrder
    score?: SortOrderInput | SortOrder
    answers?: SortOrderInput | SortOrder
    departmentId?: SortOrderInput | SortOrder
    courseId?: SortOrderInput | SortOrder
    collegeId?: SortOrderInput | SortOrder
    _count?: AssessmentAttemptCountOrderByAggregateInput
    _avg?: AssessmentAttemptAvgOrderByAggregateInput
    _max?: AssessmentAttemptMaxOrderByAggregateInput
    _min?: AssessmentAttemptMinOrderByAggregateInput
    _sum?: AssessmentAttemptSumOrderByAggregateInput
  }

  export type AssessmentAttemptScalarWhereWithAggregatesInput = {
    AND?: AssessmentAttemptScalarWhereWithAggregatesInput | AssessmentAttemptScalarWhereWithAggregatesInput[]
    OR?: AssessmentAttemptScalarWhereWithAggregatesInput[]
    NOT?: AssessmentAttemptScalarWhereWithAggregatesInput | AssessmentAttemptScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AssessmentAttempt"> | string
    assessmentId?: StringWithAggregatesFilter<"AssessmentAttempt"> | string
    studentId?: StringWithAggregatesFilter<"AssessmentAttempt"> | string
    startedAt?: DateTimeWithAggregatesFilter<"AssessmentAttempt"> | Date | string
    submittedAt?: DateTimeNullableWithAggregatesFilter<"AssessmentAttempt"> | Date | string | null
    status?: StringWithAggregatesFilter<"AssessmentAttempt"> | string
    score?: IntNullableWithAggregatesFilter<"AssessmentAttempt"> | number | null
    answers?: JsonNullableWithAggregatesFilter<"AssessmentAttempt">
    departmentId?: StringNullableWithAggregatesFilter<"AssessmentAttempt"> | string | null
    courseId?: StringNullableWithAggregatesFilter<"AssessmentAttempt"> | string | null
    collegeId?: StringNullableWithAggregatesFilter<"AssessmentAttempt"> | string | null
  }

  export type SettingWhereInput = {
    AND?: SettingWhereInput | SettingWhereInput[]
    OR?: SettingWhereInput[]
    NOT?: SettingWhereInput | SettingWhereInput[]
    id?: StringFilter<"Setting"> | string
    key?: StringFilter<"Setting"> | string
    value?: JsonFilter<"Setting">
    createdAt?: DateTimeFilter<"Setting"> | Date | string
    updatedAt?: DateTimeFilter<"Setting"> | Date | string
  }

  export type SettingOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    key?: string
    AND?: SettingWhereInput | SettingWhereInput[]
    OR?: SettingWhereInput[]
    NOT?: SettingWhereInput | SettingWhereInput[]
    value?: JsonFilter<"Setting">
    createdAt?: DateTimeFilter<"Setting"> | Date | string
    updatedAt?: DateTimeFilter<"Setting"> | Date | string
  }, "id" | "key">

  export type SettingOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SettingCountOrderByAggregateInput
    _max?: SettingMaxOrderByAggregateInput
    _min?: SettingMinOrderByAggregateInput
  }

  export type SettingScalarWhereWithAggregatesInput = {
    AND?: SettingScalarWhereWithAggregatesInput | SettingScalarWhereWithAggregatesInput[]
    OR?: SettingScalarWhereWithAggregatesInput[]
    NOT?: SettingScalarWhereWithAggregatesInput | SettingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Setting"> | string
    key?: StringWithAggregatesFilter<"Setting"> | string
    value?: JsonWithAggregatesFilter<"Setting">
    createdAt?: DateTimeWithAggregatesFilter<"Setting"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Setting"> | Date | string
  }

  export type CourseReviewWhereInput = {
    AND?: CourseReviewWhereInput | CourseReviewWhereInput[]
    OR?: CourseReviewWhereInput[]
    NOT?: CourseReviewWhereInput | CourseReviewWhereInput[]
    id?: StringFilter<"CourseReview"> | string
    rating?: IntFilter<"CourseReview"> | number
    comment?: StringNullableFilter<"CourseReview"> | string | null
    isPublic?: BoolFilter<"CourseReview"> | boolean
    courseId?: StringFilter<"CourseReview"> | string
    studentId?: StringFilter<"CourseReview"> | string
    createdAt?: DateTimeFilter<"CourseReview"> | Date | string
    updatedAt?: DateTimeFilter<"CourseReview"> | Date | string
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    student?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CourseReviewOrderByWithRelationInput = {
    id?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    courseId?: SortOrder
    studentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    course?: CourseOrderByWithRelationInput
    student?: UserOrderByWithRelationInput
  }

  export type CourseReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    courseId_studentId?: CourseReviewCourseIdStudentIdCompoundUniqueInput
    AND?: CourseReviewWhereInput | CourseReviewWhereInput[]
    OR?: CourseReviewWhereInput[]
    NOT?: CourseReviewWhereInput | CourseReviewWhereInput[]
    rating?: IntFilter<"CourseReview"> | number
    comment?: StringNullableFilter<"CourseReview"> | string | null
    isPublic?: BoolFilter<"CourseReview"> | boolean
    courseId?: StringFilter<"CourseReview"> | string
    studentId?: StringFilter<"CourseReview"> | string
    createdAt?: DateTimeFilter<"CourseReview"> | Date | string
    updatedAt?: DateTimeFilter<"CourseReview"> | Date | string
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    student?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "courseId_studentId">

  export type CourseReviewOrderByWithAggregationInput = {
    id?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    courseId?: SortOrder
    studentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CourseReviewCountOrderByAggregateInput
    _avg?: CourseReviewAvgOrderByAggregateInput
    _max?: CourseReviewMaxOrderByAggregateInput
    _min?: CourseReviewMinOrderByAggregateInput
    _sum?: CourseReviewSumOrderByAggregateInput
  }

  export type CourseReviewScalarWhereWithAggregatesInput = {
    AND?: CourseReviewScalarWhereWithAggregatesInput | CourseReviewScalarWhereWithAggregatesInput[]
    OR?: CourseReviewScalarWhereWithAggregatesInput[]
    NOT?: CourseReviewScalarWhereWithAggregatesInput | CourseReviewScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CourseReview"> | string
    rating?: IntWithAggregatesFilter<"CourseReview"> | number
    comment?: StringNullableWithAggregatesFilter<"CourseReview"> | string | null
    isPublic?: BoolWithAggregatesFilter<"CourseReview"> | boolean
    courseId?: StringWithAggregatesFilter<"CourseReview"> | string
    studentId?: StringWithAggregatesFilter<"CourseReview"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CourseReview"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CourseReview"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password?: string | null
    authProvider?: string
    role?: string
    tokenVersion?: number
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    lastLogin?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    fullName: string
    year?: string | null
    branch?: string | null
    mobile?: string | null
    mustChangePassword?: boolean
    permissions?: JsonNullValueInput | InputJsonValue
    createdCourses?: CourseCreateNestedManyWithoutCreatorInput
    enrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assessmentAttempts?: AssessmentAttemptCreateNestedManyWithoutStudentInput
    chapterProgress?: ChapterProgressCreateNestedManyWithoutStudentInput
    courseReviews?: CourseReviewCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password?: string | null
    authProvider?: string
    role?: string
    tokenVersion?: number
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    lastLogin?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    fullName: string
    year?: string | null
    branch?: string | null
    mobile?: string | null
    mustChangePassword?: boolean
    permissions?: JsonNullValueInput | InputJsonValue
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatorInput
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assessmentAttempts?: AssessmentAttemptUncheckedCreateNestedManyWithoutStudentInput
    chapterProgress?: ChapterProgressUncheckedCreateNestedManyWithoutStudentInput
    courseReviews?: CourseReviewUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    tokenVersion?: IntFieldUpdateOperationsInput | number
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fullName?: StringFieldUpdateOperationsInput | string
    year?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    createdCourses?: CourseUpdateManyWithoutCreatorNestedInput
    enrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assessmentAttempts?: AssessmentAttemptUpdateManyWithoutStudentNestedInput
    chapterProgress?: ChapterProgressUpdateManyWithoutStudentNestedInput
    courseReviews?: CourseReviewUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    tokenVersion?: IntFieldUpdateOperationsInput | number
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fullName?: StringFieldUpdateOperationsInput | string
    year?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatorNestedInput
    enrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assessmentAttempts?: AssessmentAttemptUncheckedUpdateManyWithoutStudentNestedInput
    chapterProgress?: ChapterProgressUncheckedUpdateManyWithoutStudentNestedInput
    courseReviews?: CourseReviewUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password?: string | null
    authProvider?: string
    role?: string
    tokenVersion?: number
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    lastLogin?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    fullName: string
    year?: string | null
    branch?: string | null
    mobile?: string | null
    mustChangePassword?: boolean
    permissions?: JsonNullValueInput | InputJsonValue
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    tokenVersion?: IntFieldUpdateOperationsInput | number
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fullName?: StringFieldUpdateOperationsInput | string
    year?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    tokenVersion?: IntFieldUpdateOperationsInput | number
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fullName?: StringFieldUpdateOperationsInput | string
    year?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
  }

  export type RegistrationCreateInput = {
    id?: string
    fullName: string
    email: string
    year?: string | null
    branch?: string | null
    academicYear?: string | null
    rollNumber?: string | null
    role?: string
    status?: string
    otpHash?: string | null
    otpExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    college: CollegeCreateNestedOneWithoutRegistrationInput
    department?: DepartmentCreateNestedOneWithoutRegistrationInput
  }

  export type RegistrationUncheckedCreateInput = {
    id?: string
    fullName: string
    email: string
    year?: string | null
    branch?: string | null
    academicYear?: string | null
    rollNumber?: string | null
    collegeId: string
    departmentId?: string | null
    role?: string
    status?: string
    otpHash?: string | null
    otpExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RegistrationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    year?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    rollNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    otpHash?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    college?: CollegeUpdateOneRequiredWithoutRegistrationNestedInput
    department?: DepartmentUpdateOneWithoutRegistrationNestedInput
  }

  export type RegistrationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    year?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    rollNumber?: NullableStringFieldUpdateOperationsInput | string | null
    collegeId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    otpHash?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistrationCreateManyInput = {
    id?: string
    fullName: string
    email: string
    year?: string | null
    branch?: string | null
    academicYear?: string | null
    rollNumber?: string | null
    collegeId: string
    departmentId?: string | null
    role?: string
    status?: string
    otpHash?: string | null
    otpExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RegistrationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    year?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    rollNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    otpHash?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistrationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    year?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    rollNumber?: NullableStringFieldUpdateOperationsInput | string | null
    collegeId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    otpHash?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CollegeCreateInput = {
    id?: string
    contactPerson: string
    name: string
    mobileNumber: string
    studentLimit?: number
    validity: Date | string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminLimit?: number
    instructorLimit?: number
    departments?: DepartmentCreateNestedManyWithoutCollegeInput
    Registration?: RegistrationCreateNestedManyWithoutCollegeInput
    CoursesAssigned?: CoursesAssignedCreateNestedManyWithoutCollegeInput
    AssessmentAttempt?: AssessmentAttemptCreateNestedManyWithoutCollegeInput
  }

  export type CollegeUncheckedCreateInput = {
    id?: string
    contactPerson: string
    name: string
    mobileNumber: string
    studentLimit?: number
    validity: Date | string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminLimit?: number
    instructorLimit?: number
    departments?: DepartmentUncheckedCreateNestedManyWithoutCollegeInput
    Registration?: RegistrationUncheckedCreateNestedManyWithoutCollegeInput
    CoursesAssigned?: CoursesAssignedUncheckedCreateNestedManyWithoutCollegeInput
    AssessmentAttempt?: AssessmentAttemptUncheckedCreateNestedManyWithoutCollegeInput
  }

  export type CollegeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    studentLimit?: IntFieldUpdateOperationsInput | number
    validity?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminLimit?: IntFieldUpdateOperationsInput | number
    instructorLimit?: IntFieldUpdateOperationsInput | number
    departments?: DepartmentUpdateManyWithoutCollegeNestedInput
    Registration?: RegistrationUpdateManyWithoutCollegeNestedInput
    CoursesAssigned?: CoursesAssignedUpdateManyWithoutCollegeNestedInput
    AssessmentAttempt?: AssessmentAttemptUpdateManyWithoutCollegeNestedInput
  }

  export type CollegeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    studentLimit?: IntFieldUpdateOperationsInput | number
    validity?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminLimit?: IntFieldUpdateOperationsInput | number
    instructorLimit?: IntFieldUpdateOperationsInput | number
    departments?: DepartmentUncheckedUpdateManyWithoutCollegeNestedInput
    Registration?: RegistrationUncheckedUpdateManyWithoutCollegeNestedInput
    CoursesAssigned?: CoursesAssignedUncheckedUpdateManyWithoutCollegeNestedInput
    AssessmentAttempt?: AssessmentAttemptUncheckedUpdateManyWithoutCollegeNestedInput
  }

  export type CollegeCreateManyInput = {
    id?: string
    contactPerson: string
    name: string
    mobileNumber: string
    studentLimit?: number
    validity: Date | string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminLimit?: number
    instructorLimit?: number
  }

  export type CollegeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    studentLimit?: IntFieldUpdateOperationsInput | number
    validity?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminLimit?: IntFieldUpdateOperationsInput | number
    instructorLimit?: IntFieldUpdateOperationsInput | number
  }

  export type CollegeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    studentLimit?: IntFieldUpdateOperationsInput | number
    validity?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminLimit?: IntFieldUpdateOperationsInput | number
    instructorLimit?: IntFieldUpdateOperationsInput | number
  }

  export type DepartmentCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    college: CollegeCreateNestedOneWithoutDepartmentsInput
    Registration?: RegistrationCreateNestedManyWithoutDepartmentInput
    CoursesAssigned?: CoursesAssignedCreateNestedManyWithoutDepartmentInput
    Enrollment?: EnrollmentCreateNestedManyWithoutDepartmentInput
    AssessmentAttempt?: AssessmentAttemptCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: string
    name: string
    collegeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Registration?: RegistrationUncheckedCreateNestedManyWithoutDepartmentInput
    CoursesAssigned?: CoursesAssignedUncheckedCreateNestedManyWithoutDepartmentInput
    Enrollment?: EnrollmentUncheckedCreateNestedManyWithoutDepartmentInput
    AssessmentAttempt?: AssessmentAttemptUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    college?: CollegeUpdateOneRequiredWithoutDepartmentsNestedInput
    Registration?: RegistrationUpdateManyWithoutDepartmentNestedInput
    CoursesAssigned?: CoursesAssignedUpdateManyWithoutDepartmentNestedInput
    Enrollment?: EnrollmentUpdateManyWithoutDepartmentNestedInput
    AssessmentAttempt?: AssessmentAttemptUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    collegeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Registration?: RegistrationUncheckedUpdateManyWithoutDepartmentNestedInput
    CoursesAssigned?: CoursesAssignedUncheckedUpdateManyWithoutDepartmentNestedInput
    Enrollment?: EnrollmentUncheckedUpdateManyWithoutDepartmentNestedInput
    AssessmentAttempt?: AssessmentAttemptUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentCreateManyInput = {
    id?: string
    name: string
    collegeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepartmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    collegeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseCreateInput = {
    id?: string
    title: string
    thumbnail?: string | null
    status?: string
    category?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    madeBySuperAdmin?: boolean
    creator: UserCreateNestedOneWithoutCreatedCoursesInput
    enrollments?: EnrollmentCreateNestedManyWithoutCourseInput
    assessments?: AssessmentCreateNestedManyWithoutCourseInput
    chapters?: ChapterCreateNestedManyWithoutCourseInput
    reviews?: CourseReviewCreateNestedManyWithoutCourseInput
    CoursesAssigned?: CoursesAssignedCreateNestedManyWithoutCourseInput
    AssessmentAttempt?: AssessmentAttemptCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateInput = {
    id?: string
    title: string
    thumbnail?: string | null
    status?: string
    creatorId: string
    category?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    madeBySuperAdmin?: boolean
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutCourseInput
    assessments?: AssessmentUncheckedCreateNestedManyWithoutCourseInput
    chapters?: ChapterUncheckedCreateNestedManyWithoutCourseInput
    reviews?: CourseReviewUncheckedCreateNestedManyWithoutCourseInput
    CoursesAssigned?: CoursesAssignedUncheckedCreateNestedManyWithoutCourseInput
    AssessmentAttempt?: AssessmentAttemptUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    madeBySuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    creator?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    enrollments?: EnrollmentUpdateManyWithoutCourseNestedInput
    assessments?: AssessmentUpdateManyWithoutCourseNestedInput
    chapters?: ChapterUpdateManyWithoutCourseNestedInput
    reviews?: CourseReviewUpdateManyWithoutCourseNestedInput
    CoursesAssigned?: CoursesAssignedUpdateManyWithoutCourseNestedInput
    AssessmentAttempt?: AssessmentAttemptUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    madeBySuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    enrollments?: EnrollmentUncheckedUpdateManyWithoutCourseNestedInput
    assessments?: AssessmentUncheckedUpdateManyWithoutCourseNestedInput
    chapters?: ChapterUncheckedUpdateManyWithoutCourseNestedInput
    reviews?: CourseReviewUncheckedUpdateManyWithoutCourseNestedInput
    CoursesAssigned?: CoursesAssignedUncheckedUpdateManyWithoutCourseNestedInput
    AssessmentAttempt?: AssessmentAttemptUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseCreateManyInput = {
    id?: string
    title: string
    thumbnail?: string | null
    status?: string
    creatorId: string
    category?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    madeBySuperAdmin?: boolean
  }

  export type CourseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    madeBySuperAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CourseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    madeBySuperAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CoursesAssignedCreateInput = {
    id?: string
    capacity?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    course: CourseCreateNestedOneWithoutCoursesAssignedInput
    college: CollegeCreateNestedOneWithoutCoursesAssignedInput
    department?: DepartmentCreateNestedOneWithoutCoursesAssignedInput
  }

  export type CoursesAssignedUncheckedCreateInput = {
    id?: string
    courseId: string
    collegeId: string
    departmentId?: string | null
    capacity?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoursesAssignedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutCoursesAssignedNestedInput
    college?: CollegeUpdateOneRequiredWithoutCoursesAssignedNestedInput
    department?: DepartmentUpdateOneWithoutCoursesAssignedNestedInput
  }

  export type CoursesAssignedUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    collegeId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoursesAssignedCreateManyInput = {
    id?: string
    courseId: string
    collegeId: string
    departmentId?: string | null
    capacity?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoursesAssignedUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoursesAssignedUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    collegeId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentCreateInput = {
    id?: string
    status?: string
    progress?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    duration?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: UserCreateNestedOneWithoutEnrollmentsInput
    course: CourseCreateNestedOneWithoutEnrollmentsInput
    department?: DepartmentCreateNestedOneWithoutEnrollmentInput
  }

  export type EnrollmentUncheckedCreateInput = {
    id?: string
    studentId: string
    courseId: string
    status?: string
    progress?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    duration?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentId?: string | null
  }

  export type EnrollmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutEnrollmentsNestedInput
    course?: CourseUpdateOneRequiredWithoutEnrollmentsNestedInput
    department?: DepartmentUpdateOneWithoutEnrollmentNestedInput
  }

  export type EnrollmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EnrollmentCreateManyInput = {
    id?: string
    studentId: string
    courseId: string
    status?: string
    progress?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    duration?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentId?: string | null
  }

  export type EnrollmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChapterCreateInput = {
    id?: string
    title: string
    slug?: string
    description?: string | null
    content?: string | null
    attachments?: ChapterCreateattachmentsInput | string[]
    order: number
    isPreview?: boolean
    isPublished?: boolean
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    assessments?: AssessmentCreateNestedManyWithoutChapterInput
    progress?: ChapterProgressCreateNestedManyWithoutChapterInput
    course: CourseCreateNestedOneWithoutChaptersInput
  }

  export type ChapterUncheckedCreateInput = {
    id?: string
    title: string
    slug?: string
    description?: string | null
    content?: string | null
    attachments?: ChapterCreateattachmentsInput | string[]
    order: number
    isPreview?: boolean
    isPublished?: boolean
    courseId: string
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    assessments?: AssessmentUncheckedCreateNestedManyWithoutChapterInput
    progress?: ChapterProgressUncheckedCreateNestedManyWithoutChapterInput
  }

  export type ChapterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: ChapterUpdateattachmentsInput | string[]
    order?: IntFieldUpdateOperationsInput | number
    isPreview?: BoolFieldUpdateOperationsInput | boolean
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessments?: AssessmentUpdateManyWithoutChapterNestedInput
    progress?: ChapterProgressUpdateManyWithoutChapterNestedInput
    course?: CourseUpdateOneRequiredWithoutChaptersNestedInput
  }

  export type ChapterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: ChapterUpdateattachmentsInput | string[]
    order?: IntFieldUpdateOperationsInput | number
    isPreview?: BoolFieldUpdateOperationsInput | boolean
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    courseId?: StringFieldUpdateOperationsInput | string
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessments?: AssessmentUncheckedUpdateManyWithoutChapterNestedInput
    progress?: ChapterProgressUncheckedUpdateManyWithoutChapterNestedInput
  }

  export type ChapterCreateManyInput = {
    id?: string
    title: string
    slug?: string
    description?: string | null
    content?: string | null
    attachments?: ChapterCreateattachmentsInput | string[]
    order: number
    isPreview?: boolean
    isPublished?: boolean
    courseId: string
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChapterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: ChapterUpdateattachmentsInput | string[]
    order?: IntFieldUpdateOperationsInput | number
    isPreview?: BoolFieldUpdateOperationsInput | boolean
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChapterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: ChapterUpdateattachmentsInput | string[]
    order?: IntFieldUpdateOperationsInput | number
    isPreview?: BoolFieldUpdateOperationsInput | boolean
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    courseId?: StringFieldUpdateOperationsInput | string
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChapterProgressCreateInput = {
    id?: string
    isCompleted?: boolean
    timeSpent?: number
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chapter: ChapterCreateNestedOneWithoutProgressInput
    student: UserCreateNestedOneWithoutChapterProgressInput
  }

  export type ChapterProgressUncheckedCreateInput = {
    id?: string
    isCompleted?: boolean
    timeSpent?: number
    completedAt?: Date | string | null
    chapterId: string
    studentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChapterProgressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    timeSpent?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chapter?: ChapterUpdateOneRequiredWithoutProgressNestedInput
    student?: UserUpdateOneRequiredWithoutChapterProgressNestedInput
  }

  export type ChapterProgressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    timeSpent?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    chapterId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChapterProgressCreateManyInput = {
    id?: string
    isCompleted?: boolean
    timeSpent?: number
    completedAt?: Date | string | null
    chapterId: string
    studentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChapterProgressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    timeSpent?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChapterProgressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    timeSpent?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    chapterId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssessmentCreateInput = {
    id?: string
    title: string
    type?: string
    scope?: string
    timeLimitSeconds?: number | null
    maxAttempts?: number
    isPublished?: boolean
    order?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questions?: AssessmentQuestionCreateNestedManyWithoutAssessmentInput
    attempts?: AssessmentAttemptCreateNestedManyWithoutAssessmentInput
    chapter?: ChapterCreateNestedOneWithoutAssessmentsInput
    course?: CourseCreateNestedOneWithoutAssessmentsInput
  }

  export type AssessmentUncheckedCreateInput = {
    id?: string
    title: string
    type?: string
    scope?: string
    timeLimitSeconds?: number | null
    maxAttempts?: number
    isPublished?: boolean
    order?: number | null
    courseId?: string | null
    chapterId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questions?: AssessmentQuestionUncheckedCreateNestedManyWithoutAssessmentInput
    attempts?: AssessmentAttemptUncheckedCreateNestedManyWithoutAssessmentInput
  }

  export type AssessmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    timeLimitSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    maxAttempts?: IntFieldUpdateOperationsInput | number
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    order?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: AssessmentQuestionUpdateManyWithoutAssessmentNestedInput
    attempts?: AssessmentAttemptUpdateManyWithoutAssessmentNestedInput
    chapter?: ChapterUpdateOneWithoutAssessmentsNestedInput
    course?: CourseUpdateOneWithoutAssessmentsNestedInput
  }

  export type AssessmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    timeLimitSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    maxAttempts?: IntFieldUpdateOperationsInput | number
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    order?: NullableIntFieldUpdateOperationsInput | number | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    chapterId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: AssessmentQuestionUncheckedUpdateManyWithoutAssessmentNestedInput
    attempts?: AssessmentAttemptUncheckedUpdateManyWithoutAssessmentNestedInput
  }

  export type AssessmentCreateManyInput = {
    id?: string
    title: string
    type?: string
    scope?: string
    timeLimitSeconds?: number | null
    maxAttempts?: number
    isPublished?: boolean
    order?: number | null
    courseId?: string | null
    chapterId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssessmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    timeLimitSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    maxAttempts?: IntFieldUpdateOperationsInput | number
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    order?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssessmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    timeLimitSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    maxAttempts?: IntFieldUpdateOperationsInput | number
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    order?: NullableIntFieldUpdateOperationsInput | number | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    chapterId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssessmentQuestionCreateInput = {
    id?: string
    prompt: string
    type: string
    options?: AssessmentQuestionCreateoptionsInput | string[]
    correctOptionIndex?: number | null
    correctOptionIndexes?: AssessmentQuestionCreatecorrectOptionIndexesInput | number[]
    correctText?: string | null
    pairs?: NullableJsonNullValueInput | InputJsonValue
    sampleAnswer?: string | null
    points?: number
    order?: number
    assessment: AssessmentCreateNestedOneWithoutQuestionsInput
  }

  export type AssessmentQuestionUncheckedCreateInput = {
    id?: string
    assessmentId: string
    prompt: string
    type: string
    options?: AssessmentQuestionCreateoptionsInput | string[]
    correctOptionIndex?: number | null
    correctOptionIndexes?: AssessmentQuestionCreatecorrectOptionIndexesInput | number[]
    correctText?: string | null
    pairs?: NullableJsonNullValueInput | InputJsonValue
    sampleAnswer?: string | null
    points?: number
    order?: number
  }

  export type AssessmentQuestionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    options?: AssessmentQuestionUpdateoptionsInput | string[]
    correctOptionIndex?: NullableIntFieldUpdateOperationsInput | number | null
    correctOptionIndexes?: AssessmentQuestionUpdatecorrectOptionIndexesInput | number[]
    correctText?: NullableStringFieldUpdateOperationsInput | string | null
    pairs?: NullableJsonNullValueInput | InputJsonValue
    sampleAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
    assessment?: AssessmentUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type AssessmentQuestionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assessmentId?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    options?: AssessmentQuestionUpdateoptionsInput | string[]
    correctOptionIndex?: NullableIntFieldUpdateOperationsInput | number | null
    correctOptionIndexes?: AssessmentQuestionUpdatecorrectOptionIndexesInput | number[]
    correctText?: NullableStringFieldUpdateOperationsInput | string | null
    pairs?: NullableJsonNullValueInput | InputJsonValue
    sampleAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
  }

  export type AssessmentQuestionCreateManyInput = {
    id?: string
    assessmentId: string
    prompt: string
    type: string
    options?: AssessmentQuestionCreateoptionsInput | string[]
    correctOptionIndex?: number | null
    correctOptionIndexes?: AssessmentQuestionCreatecorrectOptionIndexesInput | number[]
    correctText?: string | null
    pairs?: NullableJsonNullValueInput | InputJsonValue
    sampleAnswer?: string | null
    points?: number
    order?: number
  }

  export type AssessmentQuestionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    options?: AssessmentQuestionUpdateoptionsInput | string[]
    correctOptionIndex?: NullableIntFieldUpdateOperationsInput | number | null
    correctOptionIndexes?: AssessmentQuestionUpdatecorrectOptionIndexesInput | number[]
    correctText?: NullableStringFieldUpdateOperationsInput | string | null
    pairs?: NullableJsonNullValueInput | InputJsonValue
    sampleAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
  }

  export type AssessmentQuestionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    assessmentId?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    options?: AssessmentQuestionUpdateoptionsInput | string[]
    correctOptionIndex?: NullableIntFieldUpdateOperationsInput | number | null
    correctOptionIndexes?: AssessmentQuestionUpdatecorrectOptionIndexesInput | number[]
    correctText?: NullableStringFieldUpdateOperationsInput | string | null
    pairs?: NullableJsonNullValueInput | InputJsonValue
    sampleAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
  }

  export type AssessmentAttemptCreateInput = {
    id?: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    status?: string
    score?: number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    assessment: AssessmentCreateNestedOneWithoutAttemptsInput
    student: UserCreateNestedOneWithoutAssessmentAttemptsInput
    department?: DepartmentCreateNestedOneWithoutAssessmentAttemptInput
    course?: CourseCreateNestedOneWithoutAssessmentAttemptInput
    college?: CollegeCreateNestedOneWithoutAssessmentAttemptInput
  }

  export type AssessmentAttemptUncheckedCreateInput = {
    id?: string
    assessmentId: string
    studentId: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    status?: string
    score?: number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    departmentId?: string | null
    courseId?: string | null
    collegeId?: string | null
  }

  export type AssessmentAttemptUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    assessment?: AssessmentUpdateOneRequiredWithoutAttemptsNestedInput
    student?: UserUpdateOneRequiredWithoutAssessmentAttemptsNestedInput
    department?: DepartmentUpdateOneWithoutAssessmentAttemptNestedInput
    course?: CourseUpdateOneWithoutAssessmentAttemptNestedInput
    college?: CollegeUpdateOneWithoutAssessmentAttemptNestedInput
  }

  export type AssessmentAttemptUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assessmentId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    collegeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssessmentAttemptCreateManyInput = {
    id?: string
    assessmentId: string
    studentId: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    status?: string
    score?: number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    departmentId?: string | null
    courseId?: string | null
    collegeId?: string | null
  }

  export type AssessmentAttemptUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AssessmentAttemptUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    assessmentId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    collegeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SettingCreateInput = {
    id?: string
    key: string
    value: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SettingUncheckedCreateInput = {
    id?: string
    key: string
    value: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SettingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingCreateManyInput = {
    id?: string
    key: string
    value: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SettingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseReviewCreateInput = {
    id?: string
    rating: number
    comment?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    course: CourseCreateNestedOneWithoutReviewsInput
    student: UserCreateNestedOneWithoutCourseReviewsInput
  }

  export type CourseReviewUncheckedCreateInput = {
    id?: string
    rating: number
    comment?: string | null
    isPublic?: boolean
    courseId: string
    studentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseReviewUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutReviewsNestedInput
    student?: UserUpdateOneRequiredWithoutCourseReviewsNestedInput
  }

  export type CourseReviewUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    courseId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseReviewCreateManyInput = {
    id?: string
    rating: number
    comment?: string | null
    isPublic?: boolean
    courseId: string
    studentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseReviewUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseReviewUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    courseId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type CourseListRelationFilter = {
    every?: CourseWhereInput
    some?: CourseWhereInput
    none?: CourseWhereInput
  }

  export type EnrollmentListRelationFilter = {
    every?: EnrollmentWhereInput
    some?: EnrollmentWhereInput
    none?: EnrollmentWhereInput
  }

  export type AssessmentAttemptListRelationFilter = {
    every?: AssessmentAttemptWhereInput
    some?: AssessmentAttemptWhereInput
    none?: AssessmentAttemptWhereInput
  }

  export type ChapterProgressListRelationFilter = {
    every?: ChapterProgressWhereInput
    some?: ChapterProgressWhereInput
    none?: ChapterProgressWhereInput
  }

  export type CourseReviewListRelationFilter = {
    every?: CourseReviewWhereInput
    some?: CourseReviewWhereInput
    none?: CourseReviewWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CourseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EnrollmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssessmentAttemptOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChapterProgressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    authProvider?: SortOrder
    role?: SortOrder
    tokenVersion?: SortOrder
    isEmailVerified?: SortOrder
    emailVerificationToken?: SortOrder
    emailVerificationExpires?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetExpires?: SortOrder
    lastLogin?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fullName?: SortOrder
    year?: SortOrder
    branch?: SortOrder
    mobile?: SortOrder
    mustChangePassword?: SortOrder
    permissions?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    tokenVersion?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    authProvider?: SortOrder
    role?: SortOrder
    tokenVersion?: SortOrder
    isEmailVerified?: SortOrder
    emailVerificationToken?: SortOrder
    emailVerificationExpires?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetExpires?: SortOrder
    lastLogin?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fullName?: SortOrder
    year?: SortOrder
    branch?: SortOrder
    mobile?: SortOrder
    mustChangePassword?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    authProvider?: SortOrder
    role?: SortOrder
    tokenVersion?: SortOrder
    isEmailVerified?: SortOrder
    emailVerificationToken?: SortOrder
    emailVerificationExpires?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetExpires?: SortOrder
    lastLogin?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fullName?: SortOrder
    year?: SortOrder
    branch?: SortOrder
    mobile?: SortOrder
    mustChangePassword?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    tokenVersion?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type CollegeRelationFilter = {
    is?: CollegeWhereInput
    isNot?: CollegeWhereInput
  }

  export type DepartmentNullableRelationFilter = {
    is?: DepartmentWhereInput | null
    isNot?: DepartmentWhereInput | null
  }

  export type RegistrationCollegeIdRollNumberCompoundUniqueInput = {
    collegeId: string
    rollNumber: string
  }

  export type RegistrationCountOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    year?: SortOrder
    branch?: SortOrder
    academicYear?: SortOrder
    rollNumber?: SortOrder
    collegeId?: SortOrder
    departmentId?: SortOrder
    role?: SortOrder
    status?: SortOrder
    otpHash?: SortOrder
    otpExpires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RegistrationMaxOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    year?: SortOrder
    branch?: SortOrder
    academicYear?: SortOrder
    rollNumber?: SortOrder
    collegeId?: SortOrder
    departmentId?: SortOrder
    role?: SortOrder
    status?: SortOrder
    otpHash?: SortOrder
    otpExpires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RegistrationMinOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    year?: SortOrder
    branch?: SortOrder
    academicYear?: SortOrder
    rollNumber?: SortOrder
    collegeId?: SortOrder
    departmentId?: SortOrder
    role?: SortOrder
    status?: SortOrder
    otpHash?: SortOrder
    otpExpires?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentListRelationFilter = {
    every?: DepartmentWhereInput
    some?: DepartmentWhereInput
    none?: DepartmentWhereInput
  }

  export type RegistrationListRelationFilter = {
    every?: RegistrationWhereInput
    some?: RegistrationWhereInput
    none?: RegistrationWhereInput
  }

  export type CoursesAssignedListRelationFilter = {
    every?: CoursesAssignedWhereInput
    some?: CoursesAssignedWhereInput
    none?: CoursesAssignedWhereInput
  }

  export type DepartmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RegistrationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CoursesAssignedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CollegeCountOrderByAggregateInput = {
    id?: SortOrder
    contactPerson?: SortOrder
    name?: SortOrder
    mobileNumber?: SortOrder
    studentLimit?: SortOrder
    validity?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminLimit?: SortOrder
    instructorLimit?: SortOrder
  }

  export type CollegeAvgOrderByAggregateInput = {
    studentLimit?: SortOrder
    adminLimit?: SortOrder
    instructorLimit?: SortOrder
  }

  export type CollegeMaxOrderByAggregateInput = {
    id?: SortOrder
    contactPerson?: SortOrder
    name?: SortOrder
    mobileNumber?: SortOrder
    studentLimit?: SortOrder
    validity?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminLimit?: SortOrder
    instructorLimit?: SortOrder
  }

  export type CollegeMinOrderByAggregateInput = {
    id?: SortOrder
    contactPerson?: SortOrder
    name?: SortOrder
    mobileNumber?: SortOrder
    studentLimit?: SortOrder
    validity?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    adminLimit?: SortOrder
    instructorLimit?: SortOrder
  }

  export type CollegeSumOrderByAggregateInput = {
    studentLimit?: SortOrder
    adminLimit?: SortOrder
    instructorLimit?: SortOrder
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    collegeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    collegeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    collegeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AssessmentListRelationFilter = {
    every?: AssessmentWhereInput
    some?: AssessmentWhereInput
    none?: AssessmentWhereInput
  }

  export type ChapterListRelationFilter = {
    every?: ChapterWhereInput
    some?: ChapterWhereInput
    none?: ChapterWhereInput
  }

  export type AssessmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChapterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    thumbnail?: SortOrder
    status?: SortOrder
    creatorId?: SortOrder
    category?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    madeBySuperAdmin?: SortOrder
  }

  export type CourseMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    thumbnail?: SortOrder
    status?: SortOrder
    creatorId?: SortOrder
    category?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    madeBySuperAdmin?: SortOrder
  }

  export type CourseMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    thumbnail?: SortOrder
    status?: SortOrder
    creatorId?: SortOrder
    category?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    madeBySuperAdmin?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CourseRelationFilter = {
    is?: CourseWhereInput
    isNot?: CourseWhereInput
  }

  export type CoursesAssignedCourseIdCollegeIdDepartmentIdCompoundUniqueInput = {
    courseId: string
    collegeId: string
    departmentId: string
  }

  export type CoursesAssignedCountOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    collegeId?: SortOrder
    departmentId?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoursesAssignedAvgOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type CoursesAssignedMaxOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    collegeId?: SortOrder
    departmentId?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoursesAssignedMinOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    collegeId?: SortOrder
    departmentId?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CoursesAssignedSumOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnrollmentStudentIdCourseIdCompoundUniqueInput = {
    studentId: string
    courseId: string
  }

  export type EnrollmentCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    courseId?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    departmentId?: SortOrder
  }

  export type EnrollmentAvgOrderByAggregateInput = {
    progress?: SortOrder
    duration?: SortOrder
  }

  export type EnrollmentMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    courseId?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    departmentId?: SortOrder
  }

  export type EnrollmentMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    courseId?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    duration?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    departmentId?: SortOrder
  }

  export type EnrollmentSumOrderByAggregateInput = {
    progress?: SortOrder
    duration?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ChapterCourseIdSlugCompoundUniqueInput = {
    courseId: string
    slug: string
  }

  export type ChapterCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    content?: SortOrder
    attachments?: SortOrder
    order?: SortOrder
    isPreview?: SortOrder
    isPublished?: SortOrder
    courseId?: SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChapterAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type ChapterMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    content?: SortOrder
    order?: SortOrder
    isPreview?: SortOrder
    isPublished?: SortOrder
    courseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChapterMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    content?: SortOrder
    order?: SortOrder
    isPreview?: SortOrder
    isPublished?: SortOrder
    courseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChapterSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type ChapterRelationFilter = {
    is?: ChapterWhereInput
    isNot?: ChapterWhereInput
  }

  export type ChapterProgressChapterIdStudentIdCompoundUniqueInput = {
    chapterId: string
    studentId: string
  }

  export type ChapterProgressCountOrderByAggregateInput = {
    id?: SortOrder
    isCompleted?: SortOrder
    timeSpent?: SortOrder
    completedAt?: SortOrder
    chapterId?: SortOrder
    studentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChapterProgressAvgOrderByAggregateInput = {
    timeSpent?: SortOrder
  }

  export type ChapterProgressMaxOrderByAggregateInput = {
    id?: SortOrder
    isCompleted?: SortOrder
    timeSpent?: SortOrder
    completedAt?: SortOrder
    chapterId?: SortOrder
    studentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChapterProgressMinOrderByAggregateInput = {
    id?: SortOrder
    isCompleted?: SortOrder
    timeSpent?: SortOrder
    completedAt?: SortOrder
    chapterId?: SortOrder
    studentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChapterProgressSumOrderByAggregateInput = {
    timeSpent?: SortOrder
  }

  export type AssessmentQuestionListRelationFilter = {
    every?: AssessmentQuestionWhereInput
    some?: AssessmentQuestionWhereInput
    none?: AssessmentQuestionWhereInput
  }

  export type ChapterNullableRelationFilter = {
    is?: ChapterWhereInput | null
    isNot?: ChapterWhereInput | null
  }

  export type CourseNullableRelationFilter = {
    is?: CourseWhereInput | null
    isNot?: CourseWhereInput | null
  }

  export type AssessmentQuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssessmentCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    type?: SortOrder
    scope?: SortOrder
    timeLimitSeconds?: SortOrder
    maxAttempts?: SortOrder
    isPublished?: SortOrder
    order?: SortOrder
    courseId?: SortOrder
    chapterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssessmentAvgOrderByAggregateInput = {
    timeLimitSeconds?: SortOrder
    maxAttempts?: SortOrder
    order?: SortOrder
  }

  export type AssessmentMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    type?: SortOrder
    scope?: SortOrder
    timeLimitSeconds?: SortOrder
    maxAttempts?: SortOrder
    isPublished?: SortOrder
    order?: SortOrder
    courseId?: SortOrder
    chapterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssessmentMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    type?: SortOrder
    scope?: SortOrder
    timeLimitSeconds?: SortOrder
    maxAttempts?: SortOrder
    isPublished?: SortOrder
    order?: SortOrder
    courseId?: SortOrder
    chapterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssessmentSumOrderByAggregateInput = {
    timeLimitSeconds?: SortOrder
    maxAttempts?: SortOrder
    order?: SortOrder
  }

  export type IntNullableListFilter<$PrismaModel = never> = {
    equals?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    has?: number | IntFieldRefInput<$PrismaModel> | null
    hasEvery?: number[] | ListIntFieldRefInput<$PrismaModel>
    hasSome?: number[] | ListIntFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type AssessmentRelationFilter = {
    is?: AssessmentWhereInput
    isNot?: AssessmentWhereInput
  }

  export type AssessmentQuestionCountOrderByAggregateInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    prompt?: SortOrder
    type?: SortOrder
    options?: SortOrder
    correctOptionIndex?: SortOrder
    correctOptionIndexes?: SortOrder
    correctText?: SortOrder
    pairs?: SortOrder
    sampleAnswer?: SortOrder
    points?: SortOrder
    order?: SortOrder
  }

  export type AssessmentQuestionAvgOrderByAggregateInput = {
    correctOptionIndex?: SortOrder
    correctOptionIndexes?: SortOrder
    points?: SortOrder
    order?: SortOrder
  }

  export type AssessmentQuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    prompt?: SortOrder
    type?: SortOrder
    correctOptionIndex?: SortOrder
    correctText?: SortOrder
    sampleAnswer?: SortOrder
    points?: SortOrder
    order?: SortOrder
  }

  export type AssessmentQuestionMinOrderByAggregateInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    prompt?: SortOrder
    type?: SortOrder
    correctOptionIndex?: SortOrder
    correctText?: SortOrder
    sampleAnswer?: SortOrder
    points?: SortOrder
    order?: SortOrder
  }

  export type AssessmentQuestionSumOrderByAggregateInput = {
    correctOptionIndex?: SortOrder
    correctOptionIndexes?: SortOrder
    points?: SortOrder
    order?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type CollegeNullableRelationFilter = {
    is?: CollegeWhereInput | null
    isNot?: CollegeWhereInput | null
  }

  export type AssessmentAttemptCountOrderByAggregateInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    studentId?: SortOrder
    startedAt?: SortOrder
    submittedAt?: SortOrder
    status?: SortOrder
    score?: SortOrder
    answers?: SortOrder
    departmentId?: SortOrder
    courseId?: SortOrder
    collegeId?: SortOrder
  }

  export type AssessmentAttemptAvgOrderByAggregateInput = {
    score?: SortOrder
  }

  export type AssessmentAttemptMaxOrderByAggregateInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    studentId?: SortOrder
    startedAt?: SortOrder
    submittedAt?: SortOrder
    status?: SortOrder
    score?: SortOrder
    departmentId?: SortOrder
    courseId?: SortOrder
    collegeId?: SortOrder
  }

  export type AssessmentAttemptMinOrderByAggregateInput = {
    id?: SortOrder
    assessmentId?: SortOrder
    studentId?: SortOrder
    startedAt?: SortOrder
    submittedAt?: SortOrder
    status?: SortOrder
    score?: SortOrder
    departmentId?: SortOrder
    courseId?: SortOrder
    collegeId?: SortOrder
  }

  export type AssessmentAttemptSumOrderByAggregateInput = {
    score?: SortOrder
  }

  export type SettingCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseReviewCourseIdStudentIdCompoundUniqueInput = {
    courseId: string
    studentId: string
  }

  export type CourseReviewCountOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    isPublic?: SortOrder
    courseId?: SortOrder
    studentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseReviewAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type CourseReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    isPublic?: SortOrder
    courseId?: SortOrder
    studentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseReviewMinOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    isPublic?: SortOrder
    courseId?: SortOrder
    studentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseReviewSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type CourseCreateNestedManyWithoutCreatorInput = {
    create?: XOR<CourseCreateWithoutCreatorInput, CourseUncheckedCreateWithoutCreatorInput> | CourseCreateWithoutCreatorInput[] | CourseUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCreatorInput | CourseCreateOrConnectWithoutCreatorInput[]
    createMany?: CourseCreateManyCreatorInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type EnrollmentCreateNestedManyWithoutStudentInput = {
    create?: XOR<EnrollmentCreateWithoutStudentInput, EnrollmentUncheckedCreateWithoutStudentInput> | EnrollmentCreateWithoutStudentInput[] | EnrollmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutStudentInput | EnrollmentCreateOrConnectWithoutStudentInput[]
    createMany?: EnrollmentCreateManyStudentInputEnvelope
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
  }

  export type AssessmentAttemptCreateNestedManyWithoutStudentInput = {
    create?: XOR<AssessmentAttemptCreateWithoutStudentInput, AssessmentAttemptUncheckedCreateWithoutStudentInput> | AssessmentAttemptCreateWithoutStudentInput[] | AssessmentAttemptUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AssessmentAttemptCreateOrConnectWithoutStudentInput | AssessmentAttemptCreateOrConnectWithoutStudentInput[]
    createMany?: AssessmentAttemptCreateManyStudentInputEnvelope
    connect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
  }

  export type ChapterProgressCreateNestedManyWithoutStudentInput = {
    create?: XOR<ChapterProgressCreateWithoutStudentInput, ChapterProgressUncheckedCreateWithoutStudentInput> | ChapterProgressCreateWithoutStudentInput[] | ChapterProgressUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ChapterProgressCreateOrConnectWithoutStudentInput | ChapterProgressCreateOrConnectWithoutStudentInput[]
    createMany?: ChapterProgressCreateManyStudentInputEnvelope
    connect?: ChapterProgressWhereUniqueInput | ChapterProgressWhereUniqueInput[]
  }

  export type CourseReviewCreateNestedManyWithoutStudentInput = {
    create?: XOR<CourseReviewCreateWithoutStudentInput, CourseReviewUncheckedCreateWithoutStudentInput> | CourseReviewCreateWithoutStudentInput[] | CourseReviewUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: CourseReviewCreateOrConnectWithoutStudentInput | CourseReviewCreateOrConnectWithoutStudentInput[]
    createMany?: CourseReviewCreateManyStudentInputEnvelope
    connect?: CourseReviewWhereUniqueInput | CourseReviewWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<CourseCreateWithoutCreatorInput, CourseUncheckedCreateWithoutCreatorInput> | CourseCreateWithoutCreatorInput[] | CourseUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCreatorInput | CourseCreateOrConnectWithoutCreatorInput[]
    createMany?: CourseCreateManyCreatorInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type EnrollmentUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<EnrollmentCreateWithoutStudentInput, EnrollmentUncheckedCreateWithoutStudentInput> | EnrollmentCreateWithoutStudentInput[] | EnrollmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutStudentInput | EnrollmentCreateOrConnectWithoutStudentInput[]
    createMany?: EnrollmentCreateManyStudentInputEnvelope
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
  }

  export type AssessmentAttemptUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<AssessmentAttemptCreateWithoutStudentInput, AssessmentAttemptUncheckedCreateWithoutStudentInput> | AssessmentAttemptCreateWithoutStudentInput[] | AssessmentAttemptUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AssessmentAttemptCreateOrConnectWithoutStudentInput | AssessmentAttemptCreateOrConnectWithoutStudentInput[]
    createMany?: AssessmentAttemptCreateManyStudentInputEnvelope
    connect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
  }

  export type ChapterProgressUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<ChapterProgressCreateWithoutStudentInput, ChapterProgressUncheckedCreateWithoutStudentInput> | ChapterProgressCreateWithoutStudentInput[] | ChapterProgressUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ChapterProgressCreateOrConnectWithoutStudentInput | ChapterProgressCreateOrConnectWithoutStudentInput[]
    createMany?: ChapterProgressCreateManyStudentInputEnvelope
    connect?: ChapterProgressWhereUniqueInput | ChapterProgressWhereUniqueInput[]
  }

  export type CourseReviewUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<CourseReviewCreateWithoutStudentInput, CourseReviewUncheckedCreateWithoutStudentInput> | CourseReviewCreateWithoutStudentInput[] | CourseReviewUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: CourseReviewCreateOrConnectWithoutStudentInput | CourseReviewCreateOrConnectWithoutStudentInput[]
    createMany?: CourseReviewCreateManyStudentInputEnvelope
    connect?: CourseReviewWhereUniqueInput | CourseReviewWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CourseUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<CourseCreateWithoutCreatorInput, CourseUncheckedCreateWithoutCreatorInput> | CourseCreateWithoutCreatorInput[] | CourseUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCreatorInput | CourseCreateOrConnectWithoutCreatorInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutCreatorInput | CourseUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: CourseCreateManyCreatorInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutCreatorInput | CourseUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutCreatorInput | CourseUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type EnrollmentUpdateManyWithoutStudentNestedInput = {
    create?: XOR<EnrollmentCreateWithoutStudentInput, EnrollmentUncheckedCreateWithoutStudentInput> | EnrollmentCreateWithoutStudentInput[] | EnrollmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutStudentInput | EnrollmentCreateOrConnectWithoutStudentInput[]
    upsert?: EnrollmentUpsertWithWhereUniqueWithoutStudentInput | EnrollmentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: EnrollmentCreateManyStudentInputEnvelope
    set?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    disconnect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    delete?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    update?: EnrollmentUpdateWithWhereUniqueWithoutStudentInput | EnrollmentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: EnrollmentUpdateManyWithWhereWithoutStudentInput | EnrollmentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
  }

  export type AssessmentAttemptUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AssessmentAttemptCreateWithoutStudentInput, AssessmentAttemptUncheckedCreateWithoutStudentInput> | AssessmentAttemptCreateWithoutStudentInput[] | AssessmentAttemptUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AssessmentAttemptCreateOrConnectWithoutStudentInput | AssessmentAttemptCreateOrConnectWithoutStudentInput[]
    upsert?: AssessmentAttemptUpsertWithWhereUniqueWithoutStudentInput | AssessmentAttemptUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AssessmentAttemptCreateManyStudentInputEnvelope
    set?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    disconnect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    delete?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    connect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    update?: AssessmentAttemptUpdateWithWhereUniqueWithoutStudentInput | AssessmentAttemptUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AssessmentAttemptUpdateManyWithWhereWithoutStudentInput | AssessmentAttemptUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AssessmentAttemptScalarWhereInput | AssessmentAttemptScalarWhereInput[]
  }

  export type ChapterProgressUpdateManyWithoutStudentNestedInput = {
    create?: XOR<ChapterProgressCreateWithoutStudentInput, ChapterProgressUncheckedCreateWithoutStudentInput> | ChapterProgressCreateWithoutStudentInput[] | ChapterProgressUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ChapterProgressCreateOrConnectWithoutStudentInput | ChapterProgressCreateOrConnectWithoutStudentInput[]
    upsert?: ChapterProgressUpsertWithWhereUniqueWithoutStudentInput | ChapterProgressUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: ChapterProgressCreateManyStudentInputEnvelope
    set?: ChapterProgressWhereUniqueInput | ChapterProgressWhereUniqueInput[]
    disconnect?: ChapterProgressWhereUniqueInput | ChapterProgressWhereUniqueInput[]
    delete?: ChapterProgressWhereUniqueInput | ChapterProgressWhereUniqueInput[]
    connect?: ChapterProgressWhereUniqueInput | ChapterProgressWhereUniqueInput[]
    update?: ChapterProgressUpdateWithWhereUniqueWithoutStudentInput | ChapterProgressUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: ChapterProgressUpdateManyWithWhereWithoutStudentInput | ChapterProgressUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: ChapterProgressScalarWhereInput | ChapterProgressScalarWhereInput[]
  }

  export type CourseReviewUpdateManyWithoutStudentNestedInput = {
    create?: XOR<CourseReviewCreateWithoutStudentInput, CourseReviewUncheckedCreateWithoutStudentInput> | CourseReviewCreateWithoutStudentInput[] | CourseReviewUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: CourseReviewCreateOrConnectWithoutStudentInput | CourseReviewCreateOrConnectWithoutStudentInput[]
    upsert?: CourseReviewUpsertWithWhereUniqueWithoutStudentInput | CourseReviewUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: CourseReviewCreateManyStudentInputEnvelope
    set?: CourseReviewWhereUniqueInput | CourseReviewWhereUniqueInput[]
    disconnect?: CourseReviewWhereUniqueInput | CourseReviewWhereUniqueInput[]
    delete?: CourseReviewWhereUniqueInput | CourseReviewWhereUniqueInput[]
    connect?: CourseReviewWhereUniqueInput | CourseReviewWhereUniqueInput[]
    update?: CourseReviewUpdateWithWhereUniqueWithoutStudentInput | CourseReviewUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: CourseReviewUpdateManyWithWhereWithoutStudentInput | CourseReviewUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: CourseReviewScalarWhereInput | CourseReviewScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<CourseCreateWithoutCreatorInput, CourseUncheckedCreateWithoutCreatorInput> | CourseCreateWithoutCreatorInput[] | CourseUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCreatorInput | CourseCreateOrConnectWithoutCreatorInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutCreatorInput | CourseUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: CourseCreateManyCreatorInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutCreatorInput | CourseUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutCreatorInput | CourseUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type EnrollmentUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<EnrollmentCreateWithoutStudentInput, EnrollmentUncheckedCreateWithoutStudentInput> | EnrollmentCreateWithoutStudentInput[] | EnrollmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutStudentInput | EnrollmentCreateOrConnectWithoutStudentInput[]
    upsert?: EnrollmentUpsertWithWhereUniqueWithoutStudentInput | EnrollmentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: EnrollmentCreateManyStudentInputEnvelope
    set?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    disconnect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    delete?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    update?: EnrollmentUpdateWithWhereUniqueWithoutStudentInput | EnrollmentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: EnrollmentUpdateManyWithWhereWithoutStudentInput | EnrollmentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
  }

  export type AssessmentAttemptUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AssessmentAttemptCreateWithoutStudentInput, AssessmentAttemptUncheckedCreateWithoutStudentInput> | AssessmentAttemptCreateWithoutStudentInput[] | AssessmentAttemptUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AssessmentAttemptCreateOrConnectWithoutStudentInput | AssessmentAttemptCreateOrConnectWithoutStudentInput[]
    upsert?: AssessmentAttemptUpsertWithWhereUniqueWithoutStudentInput | AssessmentAttemptUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AssessmentAttemptCreateManyStudentInputEnvelope
    set?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    disconnect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    delete?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    connect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    update?: AssessmentAttemptUpdateWithWhereUniqueWithoutStudentInput | AssessmentAttemptUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AssessmentAttemptUpdateManyWithWhereWithoutStudentInput | AssessmentAttemptUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AssessmentAttemptScalarWhereInput | AssessmentAttemptScalarWhereInput[]
  }

  export type ChapterProgressUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<ChapterProgressCreateWithoutStudentInput, ChapterProgressUncheckedCreateWithoutStudentInput> | ChapterProgressCreateWithoutStudentInput[] | ChapterProgressUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ChapterProgressCreateOrConnectWithoutStudentInput | ChapterProgressCreateOrConnectWithoutStudentInput[]
    upsert?: ChapterProgressUpsertWithWhereUniqueWithoutStudentInput | ChapterProgressUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: ChapterProgressCreateManyStudentInputEnvelope
    set?: ChapterProgressWhereUniqueInput | ChapterProgressWhereUniqueInput[]
    disconnect?: ChapterProgressWhereUniqueInput | ChapterProgressWhereUniqueInput[]
    delete?: ChapterProgressWhereUniqueInput | ChapterProgressWhereUniqueInput[]
    connect?: ChapterProgressWhereUniqueInput | ChapterProgressWhereUniqueInput[]
    update?: ChapterProgressUpdateWithWhereUniqueWithoutStudentInput | ChapterProgressUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: ChapterProgressUpdateManyWithWhereWithoutStudentInput | ChapterProgressUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: ChapterProgressScalarWhereInput | ChapterProgressScalarWhereInput[]
  }

  export type CourseReviewUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<CourseReviewCreateWithoutStudentInput, CourseReviewUncheckedCreateWithoutStudentInput> | CourseReviewCreateWithoutStudentInput[] | CourseReviewUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: CourseReviewCreateOrConnectWithoutStudentInput | CourseReviewCreateOrConnectWithoutStudentInput[]
    upsert?: CourseReviewUpsertWithWhereUniqueWithoutStudentInput | CourseReviewUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: CourseReviewCreateManyStudentInputEnvelope
    set?: CourseReviewWhereUniqueInput | CourseReviewWhereUniqueInput[]
    disconnect?: CourseReviewWhereUniqueInput | CourseReviewWhereUniqueInput[]
    delete?: CourseReviewWhereUniqueInput | CourseReviewWhereUniqueInput[]
    connect?: CourseReviewWhereUniqueInput | CourseReviewWhereUniqueInput[]
    update?: CourseReviewUpdateWithWhereUniqueWithoutStudentInput | CourseReviewUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: CourseReviewUpdateManyWithWhereWithoutStudentInput | CourseReviewUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: CourseReviewScalarWhereInput | CourseReviewScalarWhereInput[]
  }

  export type CollegeCreateNestedOneWithoutRegistrationInput = {
    create?: XOR<CollegeCreateWithoutRegistrationInput, CollegeUncheckedCreateWithoutRegistrationInput>
    connectOrCreate?: CollegeCreateOrConnectWithoutRegistrationInput
    connect?: CollegeWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutRegistrationInput = {
    create?: XOR<DepartmentCreateWithoutRegistrationInput, DepartmentUncheckedCreateWithoutRegistrationInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutRegistrationInput
    connect?: DepartmentWhereUniqueInput
  }

  export type CollegeUpdateOneRequiredWithoutRegistrationNestedInput = {
    create?: XOR<CollegeCreateWithoutRegistrationInput, CollegeUncheckedCreateWithoutRegistrationInput>
    connectOrCreate?: CollegeCreateOrConnectWithoutRegistrationInput
    upsert?: CollegeUpsertWithoutRegistrationInput
    connect?: CollegeWhereUniqueInput
    update?: XOR<XOR<CollegeUpdateToOneWithWhereWithoutRegistrationInput, CollegeUpdateWithoutRegistrationInput>, CollegeUncheckedUpdateWithoutRegistrationInput>
  }

  export type DepartmentUpdateOneWithoutRegistrationNestedInput = {
    create?: XOR<DepartmentCreateWithoutRegistrationInput, DepartmentUncheckedCreateWithoutRegistrationInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutRegistrationInput
    upsert?: DepartmentUpsertWithoutRegistrationInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutRegistrationInput, DepartmentUpdateWithoutRegistrationInput>, DepartmentUncheckedUpdateWithoutRegistrationInput>
  }

  export type DepartmentCreateNestedManyWithoutCollegeInput = {
    create?: XOR<DepartmentCreateWithoutCollegeInput, DepartmentUncheckedCreateWithoutCollegeInput> | DepartmentCreateWithoutCollegeInput[] | DepartmentUncheckedCreateWithoutCollegeInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutCollegeInput | DepartmentCreateOrConnectWithoutCollegeInput[]
    createMany?: DepartmentCreateManyCollegeInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type RegistrationCreateNestedManyWithoutCollegeInput = {
    create?: XOR<RegistrationCreateWithoutCollegeInput, RegistrationUncheckedCreateWithoutCollegeInput> | RegistrationCreateWithoutCollegeInput[] | RegistrationUncheckedCreateWithoutCollegeInput[]
    connectOrCreate?: RegistrationCreateOrConnectWithoutCollegeInput | RegistrationCreateOrConnectWithoutCollegeInput[]
    createMany?: RegistrationCreateManyCollegeInputEnvelope
    connect?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
  }

  export type CoursesAssignedCreateNestedManyWithoutCollegeInput = {
    create?: XOR<CoursesAssignedCreateWithoutCollegeInput, CoursesAssignedUncheckedCreateWithoutCollegeInput> | CoursesAssignedCreateWithoutCollegeInput[] | CoursesAssignedUncheckedCreateWithoutCollegeInput[]
    connectOrCreate?: CoursesAssignedCreateOrConnectWithoutCollegeInput | CoursesAssignedCreateOrConnectWithoutCollegeInput[]
    createMany?: CoursesAssignedCreateManyCollegeInputEnvelope
    connect?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
  }

  export type AssessmentAttemptCreateNestedManyWithoutCollegeInput = {
    create?: XOR<AssessmentAttemptCreateWithoutCollegeInput, AssessmentAttemptUncheckedCreateWithoutCollegeInput> | AssessmentAttemptCreateWithoutCollegeInput[] | AssessmentAttemptUncheckedCreateWithoutCollegeInput[]
    connectOrCreate?: AssessmentAttemptCreateOrConnectWithoutCollegeInput | AssessmentAttemptCreateOrConnectWithoutCollegeInput[]
    createMany?: AssessmentAttemptCreateManyCollegeInputEnvelope
    connect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedManyWithoutCollegeInput = {
    create?: XOR<DepartmentCreateWithoutCollegeInput, DepartmentUncheckedCreateWithoutCollegeInput> | DepartmentCreateWithoutCollegeInput[] | DepartmentUncheckedCreateWithoutCollegeInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutCollegeInput | DepartmentCreateOrConnectWithoutCollegeInput[]
    createMany?: DepartmentCreateManyCollegeInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type RegistrationUncheckedCreateNestedManyWithoutCollegeInput = {
    create?: XOR<RegistrationCreateWithoutCollegeInput, RegistrationUncheckedCreateWithoutCollegeInput> | RegistrationCreateWithoutCollegeInput[] | RegistrationUncheckedCreateWithoutCollegeInput[]
    connectOrCreate?: RegistrationCreateOrConnectWithoutCollegeInput | RegistrationCreateOrConnectWithoutCollegeInput[]
    createMany?: RegistrationCreateManyCollegeInputEnvelope
    connect?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
  }

  export type CoursesAssignedUncheckedCreateNestedManyWithoutCollegeInput = {
    create?: XOR<CoursesAssignedCreateWithoutCollegeInput, CoursesAssignedUncheckedCreateWithoutCollegeInput> | CoursesAssignedCreateWithoutCollegeInput[] | CoursesAssignedUncheckedCreateWithoutCollegeInput[]
    connectOrCreate?: CoursesAssignedCreateOrConnectWithoutCollegeInput | CoursesAssignedCreateOrConnectWithoutCollegeInput[]
    createMany?: CoursesAssignedCreateManyCollegeInputEnvelope
    connect?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
  }

  export type AssessmentAttemptUncheckedCreateNestedManyWithoutCollegeInput = {
    create?: XOR<AssessmentAttemptCreateWithoutCollegeInput, AssessmentAttemptUncheckedCreateWithoutCollegeInput> | AssessmentAttemptCreateWithoutCollegeInput[] | AssessmentAttemptUncheckedCreateWithoutCollegeInput[]
    connectOrCreate?: AssessmentAttemptCreateOrConnectWithoutCollegeInput | AssessmentAttemptCreateOrConnectWithoutCollegeInput[]
    createMany?: AssessmentAttemptCreateManyCollegeInputEnvelope
    connect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
  }

  export type DepartmentUpdateManyWithoutCollegeNestedInput = {
    create?: XOR<DepartmentCreateWithoutCollegeInput, DepartmentUncheckedCreateWithoutCollegeInput> | DepartmentCreateWithoutCollegeInput[] | DepartmentUncheckedCreateWithoutCollegeInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutCollegeInput | DepartmentCreateOrConnectWithoutCollegeInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutCollegeInput | DepartmentUpsertWithWhereUniqueWithoutCollegeInput[]
    createMany?: DepartmentCreateManyCollegeInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutCollegeInput | DepartmentUpdateWithWhereUniqueWithoutCollegeInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutCollegeInput | DepartmentUpdateManyWithWhereWithoutCollegeInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type RegistrationUpdateManyWithoutCollegeNestedInput = {
    create?: XOR<RegistrationCreateWithoutCollegeInput, RegistrationUncheckedCreateWithoutCollegeInput> | RegistrationCreateWithoutCollegeInput[] | RegistrationUncheckedCreateWithoutCollegeInput[]
    connectOrCreate?: RegistrationCreateOrConnectWithoutCollegeInput | RegistrationCreateOrConnectWithoutCollegeInput[]
    upsert?: RegistrationUpsertWithWhereUniqueWithoutCollegeInput | RegistrationUpsertWithWhereUniqueWithoutCollegeInput[]
    createMany?: RegistrationCreateManyCollegeInputEnvelope
    set?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    disconnect?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    delete?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    connect?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    update?: RegistrationUpdateWithWhereUniqueWithoutCollegeInput | RegistrationUpdateWithWhereUniqueWithoutCollegeInput[]
    updateMany?: RegistrationUpdateManyWithWhereWithoutCollegeInput | RegistrationUpdateManyWithWhereWithoutCollegeInput[]
    deleteMany?: RegistrationScalarWhereInput | RegistrationScalarWhereInput[]
  }

  export type CoursesAssignedUpdateManyWithoutCollegeNestedInput = {
    create?: XOR<CoursesAssignedCreateWithoutCollegeInput, CoursesAssignedUncheckedCreateWithoutCollegeInput> | CoursesAssignedCreateWithoutCollegeInput[] | CoursesAssignedUncheckedCreateWithoutCollegeInput[]
    connectOrCreate?: CoursesAssignedCreateOrConnectWithoutCollegeInput | CoursesAssignedCreateOrConnectWithoutCollegeInput[]
    upsert?: CoursesAssignedUpsertWithWhereUniqueWithoutCollegeInput | CoursesAssignedUpsertWithWhereUniqueWithoutCollegeInput[]
    createMany?: CoursesAssignedCreateManyCollegeInputEnvelope
    set?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
    disconnect?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
    delete?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
    connect?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
    update?: CoursesAssignedUpdateWithWhereUniqueWithoutCollegeInput | CoursesAssignedUpdateWithWhereUniqueWithoutCollegeInput[]
    updateMany?: CoursesAssignedUpdateManyWithWhereWithoutCollegeInput | CoursesAssignedUpdateManyWithWhereWithoutCollegeInput[]
    deleteMany?: CoursesAssignedScalarWhereInput | CoursesAssignedScalarWhereInput[]
  }

  export type AssessmentAttemptUpdateManyWithoutCollegeNestedInput = {
    create?: XOR<AssessmentAttemptCreateWithoutCollegeInput, AssessmentAttemptUncheckedCreateWithoutCollegeInput> | AssessmentAttemptCreateWithoutCollegeInput[] | AssessmentAttemptUncheckedCreateWithoutCollegeInput[]
    connectOrCreate?: AssessmentAttemptCreateOrConnectWithoutCollegeInput | AssessmentAttemptCreateOrConnectWithoutCollegeInput[]
    upsert?: AssessmentAttemptUpsertWithWhereUniqueWithoutCollegeInput | AssessmentAttemptUpsertWithWhereUniqueWithoutCollegeInput[]
    createMany?: AssessmentAttemptCreateManyCollegeInputEnvelope
    set?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    disconnect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    delete?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    connect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    update?: AssessmentAttemptUpdateWithWhereUniqueWithoutCollegeInput | AssessmentAttemptUpdateWithWhereUniqueWithoutCollegeInput[]
    updateMany?: AssessmentAttemptUpdateManyWithWhereWithoutCollegeInput | AssessmentAttemptUpdateManyWithWhereWithoutCollegeInput[]
    deleteMany?: AssessmentAttemptScalarWhereInput | AssessmentAttemptScalarWhereInput[]
  }

  export type DepartmentUncheckedUpdateManyWithoutCollegeNestedInput = {
    create?: XOR<DepartmentCreateWithoutCollegeInput, DepartmentUncheckedCreateWithoutCollegeInput> | DepartmentCreateWithoutCollegeInput[] | DepartmentUncheckedCreateWithoutCollegeInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutCollegeInput | DepartmentCreateOrConnectWithoutCollegeInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutCollegeInput | DepartmentUpsertWithWhereUniqueWithoutCollegeInput[]
    createMany?: DepartmentCreateManyCollegeInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutCollegeInput | DepartmentUpdateWithWhereUniqueWithoutCollegeInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutCollegeInput | DepartmentUpdateManyWithWhereWithoutCollegeInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type RegistrationUncheckedUpdateManyWithoutCollegeNestedInput = {
    create?: XOR<RegistrationCreateWithoutCollegeInput, RegistrationUncheckedCreateWithoutCollegeInput> | RegistrationCreateWithoutCollegeInput[] | RegistrationUncheckedCreateWithoutCollegeInput[]
    connectOrCreate?: RegistrationCreateOrConnectWithoutCollegeInput | RegistrationCreateOrConnectWithoutCollegeInput[]
    upsert?: RegistrationUpsertWithWhereUniqueWithoutCollegeInput | RegistrationUpsertWithWhereUniqueWithoutCollegeInput[]
    createMany?: RegistrationCreateManyCollegeInputEnvelope
    set?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    disconnect?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    delete?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    connect?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    update?: RegistrationUpdateWithWhereUniqueWithoutCollegeInput | RegistrationUpdateWithWhereUniqueWithoutCollegeInput[]
    updateMany?: RegistrationUpdateManyWithWhereWithoutCollegeInput | RegistrationUpdateManyWithWhereWithoutCollegeInput[]
    deleteMany?: RegistrationScalarWhereInput | RegistrationScalarWhereInput[]
  }

  export type CoursesAssignedUncheckedUpdateManyWithoutCollegeNestedInput = {
    create?: XOR<CoursesAssignedCreateWithoutCollegeInput, CoursesAssignedUncheckedCreateWithoutCollegeInput> | CoursesAssignedCreateWithoutCollegeInput[] | CoursesAssignedUncheckedCreateWithoutCollegeInput[]
    connectOrCreate?: CoursesAssignedCreateOrConnectWithoutCollegeInput | CoursesAssignedCreateOrConnectWithoutCollegeInput[]
    upsert?: CoursesAssignedUpsertWithWhereUniqueWithoutCollegeInput | CoursesAssignedUpsertWithWhereUniqueWithoutCollegeInput[]
    createMany?: CoursesAssignedCreateManyCollegeInputEnvelope
    set?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
    disconnect?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
    delete?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
    connect?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
    update?: CoursesAssignedUpdateWithWhereUniqueWithoutCollegeInput | CoursesAssignedUpdateWithWhereUniqueWithoutCollegeInput[]
    updateMany?: CoursesAssignedUpdateManyWithWhereWithoutCollegeInput | CoursesAssignedUpdateManyWithWhereWithoutCollegeInput[]
    deleteMany?: CoursesAssignedScalarWhereInput | CoursesAssignedScalarWhereInput[]
  }

  export type AssessmentAttemptUncheckedUpdateManyWithoutCollegeNestedInput = {
    create?: XOR<AssessmentAttemptCreateWithoutCollegeInput, AssessmentAttemptUncheckedCreateWithoutCollegeInput> | AssessmentAttemptCreateWithoutCollegeInput[] | AssessmentAttemptUncheckedCreateWithoutCollegeInput[]
    connectOrCreate?: AssessmentAttemptCreateOrConnectWithoutCollegeInput | AssessmentAttemptCreateOrConnectWithoutCollegeInput[]
    upsert?: AssessmentAttemptUpsertWithWhereUniqueWithoutCollegeInput | AssessmentAttemptUpsertWithWhereUniqueWithoutCollegeInput[]
    createMany?: AssessmentAttemptCreateManyCollegeInputEnvelope
    set?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    disconnect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    delete?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    connect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    update?: AssessmentAttemptUpdateWithWhereUniqueWithoutCollegeInput | AssessmentAttemptUpdateWithWhereUniqueWithoutCollegeInput[]
    updateMany?: AssessmentAttemptUpdateManyWithWhereWithoutCollegeInput | AssessmentAttemptUpdateManyWithWhereWithoutCollegeInput[]
    deleteMany?: AssessmentAttemptScalarWhereInput | AssessmentAttemptScalarWhereInput[]
  }

  export type CollegeCreateNestedOneWithoutDepartmentsInput = {
    create?: XOR<CollegeCreateWithoutDepartmentsInput, CollegeUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: CollegeCreateOrConnectWithoutDepartmentsInput
    connect?: CollegeWhereUniqueInput
  }

  export type RegistrationCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<RegistrationCreateWithoutDepartmentInput, RegistrationUncheckedCreateWithoutDepartmentInput> | RegistrationCreateWithoutDepartmentInput[] | RegistrationUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: RegistrationCreateOrConnectWithoutDepartmentInput | RegistrationCreateOrConnectWithoutDepartmentInput[]
    createMany?: RegistrationCreateManyDepartmentInputEnvelope
    connect?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
  }

  export type CoursesAssignedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<CoursesAssignedCreateWithoutDepartmentInput, CoursesAssignedUncheckedCreateWithoutDepartmentInput> | CoursesAssignedCreateWithoutDepartmentInput[] | CoursesAssignedUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: CoursesAssignedCreateOrConnectWithoutDepartmentInput | CoursesAssignedCreateOrConnectWithoutDepartmentInput[]
    createMany?: CoursesAssignedCreateManyDepartmentInputEnvelope
    connect?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
  }

  export type EnrollmentCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<EnrollmentCreateWithoutDepartmentInput, EnrollmentUncheckedCreateWithoutDepartmentInput> | EnrollmentCreateWithoutDepartmentInput[] | EnrollmentUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutDepartmentInput | EnrollmentCreateOrConnectWithoutDepartmentInput[]
    createMany?: EnrollmentCreateManyDepartmentInputEnvelope
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
  }

  export type AssessmentAttemptCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<AssessmentAttemptCreateWithoutDepartmentInput, AssessmentAttemptUncheckedCreateWithoutDepartmentInput> | AssessmentAttemptCreateWithoutDepartmentInput[] | AssessmentAttemptUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: AssessmentAttemptCreateOrConnectWithoutDepartmentInput | AssessmentAttemptCreateOrConnectWithoutDepartmentInput[]
    createMany?: AssessmentAttemptCreateManyDepartmentInputEnvelope
    connect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
  }

  export type RegistrationUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<RegistrationCreateWithoutDepartmentInput, RegistrationUncheckedCreateWithoutDepartmentInput> | RegistrationCreateWithoutDepartmentInput[] | RegistrationUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: RegistrationCreateOrConnectWithoutDepartmentInput | RegistrationCreateOrConnectWithoutDepartmentInput[]
    createMany?: RegistrationCreateManyDepartmentInputEnvelope
    connect?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
  }

  export type CoursesAssignedUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<CoursesAssignedCreateWithoutDepartmentInput, CoursesAssignedUncheckedCreateWithoutDepartmentInput> | CoursesAssignedCreateWithoutDepartmentInput[] | CoursesAssignedUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: CoursesAssignedCreateOrConnectWithoutDepartmentInput | CoursesAssignedCreateOrConnectWithoutDepartmentInput[]
    createMany?: CoursesAssignedCreateManyDepartmentInputEnvelope
    connect?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
  }

  export type EnrollmentUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<EnrollmentCreateWithoutDepartmentInput, EnrollmentUncheckedCreateWithoutDepartmentInput> | EnrollmentCreateWithoutDepartmentInput[] | EnrollmentUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutDepartmentInput | EnrollmentCreateOrConnectWithoutDepartmentInput[]
    createMany?: EnrollmentCreateManyDepartmentInputEnvelope
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
  }

  export type AssessmentAttemptUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<AssessmentAttemptCreateWithoutDepartmentInput, AssessmentAttemptUncheckedCreateWithoutDepartmentInput> | AssessmentAttemptCreateWithoutDepartmentInput[] | AssessmentAttemptUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: AssessmentAttemptCreateOrConnectWithoutDepartmentInput | AssessmentAttemptCreateOrConnectWithoutDepartmentInput[]
    createMany?: AssessmentAttemptCreateManyDepartmentInputEnvelope
    connect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
  }

  export type CollegeUpdateOneRequiredWithoutDepartmentsNestedInput = {
    create?: XOR<CollegeCreateWithoutDepartmentsInput, CollegeUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: CollegeCreateOrConnectWithoutDepartmentsInput
    upsert?: CollegeUpsertWithoutDepartmentsInput
    connect?: CollegeWhereUniqueInput
    update?: XOR<XOR<CollegeUpdateToOneWithWhereWithoutDepartmentsInput, CollegeUpdateWithoutDepartmentsInput>, CollegeUncheckedUpdateWithoutDepartmentsInput>
  }

  export type RegistrationUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<RegistrationCreateWithoutDepartmentInput, RegistrationUncheckedCreateWithoutDepartmentInput> | RegistrationCreateWithoutDepartmentInput[] | RegistrationUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: RegistrationCreateOrConnectWithoutDepartmentInput | RegistrationCreateOrConnectWithoutDepartmentInput[]
    upsert?: RegistrationUpsertWithWhereUniqueWithoutDepartmentInput | RegistrationUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: RegistrationCreateManyDepartmentInputEnvelope
    set?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    disconnect?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    delete?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    connect?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    update?: RegistrationUpdateWithWhereUniqueWithoutDepartmentInput | RegistrationUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: RegistrationUpdateManyWithWhereWithoutDepartmentInput | RegistrationUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: RegistrationScalarWhereInput | RegistrationScalarWhereInput[]
  }

  export type CoursesAssignedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<CoursesAssignedCreateWithoutDepartmentInput, CoursesAssignedUncheckedCreateWithoutDepartmentInput> | CoursesAssignedCreateWithoutDepartmentInput[] | CoursesAssignedUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: CoursesAssignedCreateOrConnectWithoutDepartmentInput | CoursesAssignedCreateOrConnectWithoutDepartmentInput[]
    upsert?: CoursesAssignedUpsertWithWhereUniqueWithoutDepartmentInput | CoursesAssignedUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: CoursesAssignedCreateManyDepartmentInputEnvelope
    set?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
    disconnect?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
    delete?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
    connect?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
    update?: CoursesAssignedUpdateWithWhereUniqueWithoutDepartmentInput | CoursesAssignedUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: CoursesAssignedUpdateManyWithWhereWithoutDepartmentInput | CoursesAssignedUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: CoursesAssignedScalarWhereInput | CoursesAssignedScalarWhereInput[]
  }

  export type EnrollmentUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<EnrollmentCreateWithoutDepartmentInput, EnrollmentUncheckedCreateWithoutDepartmentInput> | EnrollmentCreateWithoutDepartmentInput[] | EnrollmentUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutDepartmentInput | EnrollmentCreateOrConnectWithoutDepartmentInput[]
    upsert?: EnrollmentUpsertWithWhereUniqueWithoutDepartmentInput | EnrollmentUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: EnrollmentCreateManyDepartmentInputEnvelope
    set?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    disconnect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    delete?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    update?: EnrollmentUpdateWithWhereUniqueWithoutDepartmentInput | EnrollmentUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: EnrollmentUpdateManyWithWhereWithoutDepartmentInput | EnrollmentUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
  }

  export type AssessmentAttemptUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<AssessmentAttemptCreateWithoutDepartmentInput, AssessmentAttemptUncheckedCreateWithoutDepartmentInput> | AssessmentAttemptCreateWithoutDepartmentInput[] | AssessmentAttemptUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: AssessmentAttemptCreateOrConnectWithoutDepartmentInput | AssessmentAttemptCreateOrConnectWithoutDepartmentInput[]
    upsert?: AssessmentAttemptUpsertWithWhereUniqueWithoutDepartmentInput | AssessmentAttemptUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: AssessmentAttemptCreateManyDepartmentInputEnvelope
    set?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    disconnect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    delete?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    connect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    update?: AssessmentAttemptUpdateWithWhereUniqueWithoutDepartmentInput | AssessmentAttemptUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: AssessmentAttemptUpdateManyWithWhereWithoutDepartmentInput | AssessmentAttemptUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: AssessmentAttemptScalarWhereInput | AssessmentAttemptScalarWhereInput[]
  }

  export type RegistrationUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<RegistrationCreateWithoutDepartmentInput, RegistrationUncheckedCreateWithoutDepartmentInput> | RegistrationCreateWithoutDepartmentInput[] | RegistrationUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: RegistrationCreateOrConnectWithoutDepartmentInput | RegistrationCreateOrConnectWithoutDepartmentInput[]
    upsert?: RegistrationUpsertWithWhereUniqueWithoutDepartmentInput | RegistrationUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: RegistrationCreateManyDepartmentInputEnvelope
    set?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    disconnect?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    delete?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    connect?: RegistrationWhereUniqueInput | RegistrationWhereUniqueInput[]
    update?: RegistrationUpdateWithWhereUniqueWithoutDepartmentInput | RegistrationUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: RegistrationUpdateManyWithWhereWithoutDepartmentInput | RegistrationUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: RegistrationScalarWhereInput | RegistrationScalarWhereInput[]
  }

  export type CoursesAssignedUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<CoursesAssignedCreateWithoutDepartmentInput, CoursesAssignedUncheckedCreateWithoutDepartmentInput> | CoursesAssignedCreateWithoutDepartmentInput[] | CoursesAssignedUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: CoursesAssignedCreateOrConnectWithoutDepartmentInput | CoursesAssignedCreateOrConnectWithoutDepartmentInput[]
    upsert?: CoursesAssignedUpsertWithWhereUniqueWithoutDepartmentInput | CoursesAssignedUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: CoursesAssignedCreateManyDepartmentInputEnvelope
    set?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
    disconnect?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
    delete?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
    connect?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
    update?: CoursesAssignedUpdateWithWhereUniqueWithoutDepartmentInput | CoursesAssignedUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: CoursesAssignedUpdateManyWithWhereWithoutDepartmentInput | CoursesAssignedUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: CoursesAssignedScalarWhereInput | CoursesAssignedScalarWhereInput[]
  }

  export type EnrollmentUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<EnrollmentCreateWithoutDepartmentInput, EnrollmentUncheckedCreateWithoutDepartmentInput> | EnrollmentCreateWithoutDepartmentInput[] | EnrollmentUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutDepartmentInput | EnrollmentCreateOrConnectWithoutDepartmentInput[]
    upsert?: EnrollmentUpsertWithWhereUniqueWithoutDepartmentInput | EnrollmentUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: EnrollmentCreateManyDepartmentInputEnvelope
    set?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    disconnect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    delete?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    update?: EnrollmentUpdateWithWhereUniqueWithoutDepartmentInput | EnrollmentUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: EnrollmentUpdateManyWithWhereWithoutDepartmentInput | EnrollmentUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
  }

  export type AssessmentAttemptUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<AssessmentAttemptCreateWithoutDepartmentInput, AssessmentAttemptUncheckedCreateWithoutDepartmentInput> | AssessmentAttemptCreateWithoutDepartmentInput[] | AssessmentAttemptUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: AssessmentAttemptCreateOrConnectWithoutDepartmentInput | AssessmentAttemptCreateOrConnectWithoutDepartmentInput[]
    upsert?: AssessmentAttemptUpsertWithWhereUniqueWithoutDepartmentInput | AssessmentAttemptUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: AssessmentAttemptCreateManyDepartmentInputEnvelope
    set?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    disconnect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    delete?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    connect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    update?: AssessmentAttemptUpdateWithWhereUniqueWithoutDepartmentInput | AssessmentAttemptUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: AssessmentAttemptUpdateManyWithWhereWithoutDepartmentInput | AssessmentAttemptUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: AssessmentAttemptScalarWhereInput | AssessmentAttemptScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatedCoursesInput = {
    create?: XOR<UserCreateWithoutCreatedCoursesInput, UserUncheckedCreateWithoutCreatedCoursesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedCoursesInput
    connect?: UserWhereUniqueInput
  }

  export type EnrollmentCreateNestedManyWithoutCourseInput = {
    create?: XOR<EnrollmentCreateWithoutCourseInput, EnrollmentUncheckedCreateWithoutCourseInput> | EnrollmentCreateWithoutCourseInput[] | EnrollmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutCourseInput | EnrollmentCreateOrConnectWithoutCourseInput[]
    createMany?: EnrollmentCreateManyCourseInputEnvelope
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
  }

  export type AssessmentCreateNestedManyWithoutCourseInput = {
    create?: XOR<AssessmentCreateWithoutCourseInput, AssessmentUncheckedCreateWithoutCourseInput> | AssessmentCreateWithoutCourseInput[] | AssessmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: AssessmentCreateOrConnectWithoutCourseInput | AssessmentCreateOrConnectWithoutCourseInput[]
    createMany?: AssessmentCreateManyCourseInputEnvelope
    connect?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
  }

  export type ChapterCreateNestedManyWithoutCourseInput = {
    create?: XOR<ChapterCreateWithoutCourseInput, ChapterUncheckedCreateWithoutCourseInput> | ChapterCreateWithoutCourseInput[] | ChapterUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutCourseInput | ChapterCreateOrConnectWithoutCourseInput[]
    createMany?: ChapterCreateManyCourseInputEnvelope
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
  }

  export type CourseReviewCreateNestedManyWithoutCourseInput = {
    create?: XOR<CourseReviewCreateWithoutCourseInput, CourseReviewUncheckedCreateWithoutCourseInput> | CourseReviewCreateWithoutCourseInput[] | CourseReviewUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseReviewCreateOrConnectWithoutCourseInput | CourseReviewCreateOrConnectWithoutCourseInput[]
    createMany?: CourseReviewCreateManyCourseInputEnvelope
    connect?: CourseReviewWhereUniqueInput | CourseReviewWhereUniqueInput[]
  }

  export type CoursesAssignedCreateNestedManyWithoutCourseInput = {
    create?: XOR<CoursesAssignedCreateWithoutCourseInput, CoursesAssignedUncheckedCreateWithoutCourseInput> | CoursesAssignedCreateWithoutCourseInput[] | CoursesAssignedUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CoursesAssignedCreateOrConnectWithoutCourseInput | CoursesAssignedCreateOrConnectWithoutCourseInput[]
    createMany?: CoursesAssignedCreateManyCourseInputEnvelope
    connect?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
  }

  export type AssessmentAttemptCreateNestedManyWithoutCourseInput = {
    create?: XOR<AssessmentAttemptCreateWithoutCourseInput, AssessmentAttemptUncheckedCreateWithoutCourseInput> | AssessmentAttemptCreateWithoutCourseInput[] | AssessmentAttemptUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: AssessmentAttemptCreateOrConnectWithoutCourseInput | AssessmentAttemptCreateOrConnectWithoutCourseInput[]
    createMany?: AssessmentAttemptCreateManyCourseInputEnvelope
    connect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
  }

  export type EnrollmentUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<EnrollmentCreateWithoutCourseInput, EnrollmentUncheckedCreateWithoutCourseInput> | EnrollmentCreateWithoutCourseInput[] | EnrollmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutCourseInput | EnrollmentCreateOrConnectWithoutCourseInput[]
    createMany?: EnrollmentCreateManyCourseInputEnvelope
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
  }

  export type AssessmentUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<AssessmentCreateWithoutCourseInput, AssessmentUncheckedCreateWithoutCourseInput> | AssessmentCreateWithoutCourseInput[] | AssessmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: AssessmentCreateOrConnectWithoutCourseInput | AssessmentCreateOrConnectWithoutCourseInput[]
    createMany?: AssessmentCreateManyCourseInputEnvelope
    connect?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
  }

  export type ChapterUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<ChapterCreateWithoutCourseInput, ChapterUncheckedCreateWithoutCourseInput> | ChapterCreateWithoutCourseInput[] | ChapterUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutCourseInput | ChapterCreateOrConnectWithoutCourseInput[]
    createMany?: ChapterCreateManyCourseInputEnvelope
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
  }

  export type CourseReviewUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<CourseReviewCreateWithoutCourseInput, CourseReviewUncheckedCreateWithoutCourseInput> | CourseReviewCreateWithoutCourseInput[] | CourseReviewUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseReviewCreateOrConnectWithoutCourseInput | CourseReviewCreateOrConnectWithoutCourseInput[]
    createMany?: CourseReviewCreateManyCourseInputEnvelope
    connect?: CourseReviewWhereUniqueInput | CourseReviewWhereUniqueInput[]
  }

  export type CoursesAssignedUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<CoursesAssignedCreateWithoutCourseInput, CoursesAssignedUncheckedCreateWithoutCourseInput> | CoursesAssignedCreateWithoutCourseInput[] | CoursesAssignedUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CoursesAssignedCreateOrConnectWithoutCourseInput | CoursesAssignedCreateOrConnectWithoutCourseInput[]
    createMany?: CoursesAssignedCreateManyCourseInputEnvelope
    connect?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
  }

  export type AssessmentAttemptUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<AssessmentAttemptCreateWithoutCourseInput, AssessmentAttemptUncheckedCreateWithoutCourseInput> | AssessmentAttemptCreateWithoutCourseInput[] | AssessmentAttemptUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: AssessmentAttemptCreateOrConnectWithoutCourseInput | AssessmentAttemptCreateOrConnectWithoutCourseInput[]
    createMany?: AssessmentAttemptCreateManyCourseInputEnvelope
    connect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCreatedCoursesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedCoursesInput, UserUncheckedCreateWithoutCreatedCoursesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedCoursesInput
    upsert?: UserUpsertWithoutCreatedCoursesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedCoursesInput, UserUpdateWithoutCreatedCoursesInput>, UserUncheckedUpdateWithoutCreatedCoursesInput>
  }

  export type EnrollmentUpdateManyWithoutCourseNestedInput = {
    create?: XOR<EnrollmentCreateWithoutCourseInput, EnrollmentUncheckedCreateWithoutCourseInput> | EnrollmentCreateWithoutCourseInput[] | EnrollmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutCourseInput | EnrollmentCreateOrConnectWithoutCourseInput[]
    upsert?: EnrollmentUpsertWithWhereUniqueWithoutCourseInput | EnrollmentUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: EnrollmentCreateManyCourseInputEnvelope
    set?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    disconnect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    delete?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    update?: EnrollmentUpdateWithWhereUniqueWithoutCourseInput | EnrollmentUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: EnrollmentUpdateManyWithWhereWithoutCourseInput | EnrollmentUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
  }

  export type AssessmentUpdateManyWithoutCourseNestedInput = {
    create?: XOR<AssessmentCreateWithoutCourseInput, AssessmentUncheckedCreateWithoutCourseInput> | AssessmentCreateWithoutCourseInput[] | AssessmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: AssessmentCreateOrConnectWithoutCourseInput | AssessmentCreateOrConnectWithoutCourseInput[]
    upsert?: AssessmentUpsertWithWhereUniqueWithoutCourseInput | AssessmentUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: AssessmentCreateManyCourseInputEnvelope
    set?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    disconnect?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    delete?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    connect?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    update?: AssessmentUpdateWithWhereUniqueWithoutCourseInput | AssessmentUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: AssessmentUpdateManyWithWhereWithoutCourseInput | AssessmentUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: AssessmentScalarWhereInput | AssessmentScalarWhereInput[]
  }

  export type ChapterUpdateManyWithoutCourseNestedInput = {
    create?: XOR<ChapterCreateWithoutCourseInput, ChapterUncheckedCreateWithoutCourseInput> | ChapterCreateWithoutCourseInput[] | ChapterUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutCourseInput | ChapterCreateOrConnectWithoutCourseInput[]
    upsert?: ChapterUpsertWithWhereUniqueWithoutCourseInput | ChapterUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: ChapterCreateManyCourseInputEnvelope
    set?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    disconnect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    delete?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    update?: ChapterUpdateWithWhereUniqueWithoutCourseInput | ChapterUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: ChapterUpdateManyWithWhereWithoutCourseInput | ChapterUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: ChapterScalarWhereInput | ChapterScalarWhereInput[]
  }

  export type CourseReviewUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CourseReviewCreateWithoutCourseInput, CourseReviewUncheckedCreateWithoutCourseInput> | CourseReviewCreateWithoutCourseInput[] | CourseReviewUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseReviewCreateOrConnectWithoutCourseInput | CourseReviewCreateOrConnectWithoutCourseInput[]
    upsert?: CourseReviewUpsertWithWhereUniqueWithoutCourseInput | CourseReviewUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CourseReviewCreateManyCourseInputEnvelope
    set?: CourseReviewWhereUniqueInput | CourseReviewWhereUniqueInput[]
    disconnect?: CourseReviewWhereUniqueInput | CourseReviewWhereUniqueInput[]
    delete?: CourseReviewWhereUniqueInput | CourseReviewWhereUniqueInput[]
    connect?: CourseReviewWhereUniqueInput | CourseReviewWhereUniqueInput[]
    update?: CourseReviewUpdateWithWhereUniqueWithoutCourseInput | CourseReviewUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CourseReviewUpdateManyWithWhereWithoutCourseInput | CourseReviewUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CourseReviewScalarWhereInput | CourseReviewScalarWhereInput[]
  }

  export type CoursesAssignedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CoursesAssignedCreateWithoutCourseInput, CoursesAssignedUncheckedCreateWithoutCourseInput> | CoursesAssignedCreateWithoutCourseInput[] | CoursesAssignedUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CoursesAssignedCreateOrConnectWithoutCourseInput | CoursesAssignedCreateOrConnectWithoutCourseInput[]
    upsert?: CoursesAssignedUpsertWithWhereUniqueWithoutCourseInput | CoursesAssignedUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CoursesAssignedCreateManyCourseInputEnvelope
    set?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
    disconnect?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
    delete?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
    connect?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
    update?: CoursesAssignedUpdateWithWhereUniqueWithoutCourseInput | CoursesAssignedUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CoursesAssignedUpdateManyWithWhereWithoutCourseInput | CoursesAssignedUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CoursesAssignedScalarWhereInput | CoursesAssignedScalarWhereInput[]
  }

  export type AssessmentAttemptUpdateManyWithoutCourseNestedInput = {
    create?: XOR<AssessmentAttemptCreateWithoutCourseInput, AssessmentAttemptUncheckedCreateWithoutCourseInput> | AssessmentAttemptCreateWithoutCourseInput[] | AssessmentAttemptUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: AssessmentAttemptCreateOrConnectWithoutCourseInput | AssessmentAttemptCreateOrConnectWithoutCourseInput[]
    upsert?: AssessmentAttemptUpsertWithWhereUniqueWithoutCourseInput | AssessmentAttemptUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: AssessmentAttemptCreateManyCourseInputEnvelope
    set?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    disconnect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    delete?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    connect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    update?: AssessmentAttemptUpdateWithWhereUniqueWithoutCourseInput | AssessmentAttemptUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: AssessmentAttemptUpdateManyWithWhereWithoutCourseInput | AssessmentAttemptUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: AssessmentAttemptScalarWhereInput | AssessmentAttemptScalarWhereInput[]
  }

  export type EnrollmentUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<EnrollmentCreateWithoutCourseInput, EnrollmentUncheckedCreateWithoutCourseInput> | EnrollmentCreateWithoutCourseInput[] | EnrollmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutCourseInput | EnrollmentCreateOrConnectWithoutCourseInput[]
    upsert?: EnrollmentUpsertWithWhereUniqueWithoutCourseInput | EnrollmentUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: EnrollmentCreateManyCourseInputEnvelope
    set?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    disconnect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    delete?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    update?: EnrollmentUpdateWithWhereUniqueWithoutCourseInput | EnrollmentUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: EnrollmentUpdateManyWithWhereWithoutCourseInput | EnrollmentUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
  }

  export type AssessmentUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<AssessmentCreateWithoutCourseInput, AssessmentUncheckedCreateWithoutCourseInput> | AssessmentCreateWithoutCourseInput[] | AssessmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: AssessmentCreateOrConnectWithoutCourseInput | AssessmentCreateOrConnectWithoutCourseInput[]
    upsert?: AssessmentUpsertWithWhereUniqueWithoutCourseInput | AssessmentUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: AssessmentCreateManyCourseInputEnvelope
    set?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    disconnect?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    delete?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    connect?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    update?: AssessmentUpdateWithWhereUniqueWithoutCourseInput | AssessmentUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: AssessmentUpdateManyWithWhereWithoutCourseInput | AssessmentUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: AssessmentScalarWhereInput | AssessmentScalarWhereInput[]
  }

  export type ChapterUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<ChapterCreateWithoutCourseInput, ChapterUncheckedCreateWithoutCourseInput> | ChapterCreateWithoutCourseInput[] | ChapterUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutCourseInput | ChapterCreateOrConnectWithoutCourseInput[]
    upsert?: ChapterUpsertWithWhereUniqueWithoutCourseInput | ChapterUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: ChapterCreateManyCourseInputEnvelope
    set?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    disconnect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    delete?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    update?: ChapterUpdateWithWhereUniqueWithoutCourseInput | ChapterUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: ChapterUpdateManyWithWhereWithoutCourseInput | ChapterUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: ChapterScalarWhereInput | ChapterScalarWhereInput[]
  }

  export type CourseReviewUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CourseReviewCreateWithoutCourseInput, CourseReviewUncheckedCreateWithoutCourseInput> | CourseReviewCreateWithoutCourseInput[] | CourseReviewUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseReviewCreateOrConnectWithoutCourseInput | CourseReviewCreateOrConnectWithoutCourseInput[]
    upsert?: CourseReviewUpsertWithWhereUniqueWithoutCourseInput | CourseReviewUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CourseReviewCreateManyCourseInputEnvelope
    set?: CourseReviewWhereUniqueInput | CourseReviewWhereUniqueInput[]
    disconnect?: CourseReviewWhereUniqueInput | CourseReviewWhereUniqueInput[]
    delete?: CourseReviewWhereUniqueInput | CourseReviewWhereUniqueInput[]
    connect?: CourseReviewWhereUniqueInput | CourseReviewWhereUniqueInput[]
    update?: CourseReviewUpdateWithWhereUniqueWithoutCourseInput | CourseReviewUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CourseReviewUpdateManyWithWhereWithoutCourseInput | CourseReviewUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CourseReviewScalarWhereInput | CourseReviewScalarWhereInput[]
  }

  export type CoursesAssignedUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CoursesAssignedCreateWithoutCourseInput, CoursesAssignedUncheckedCreateWithoutCourseInput> | CoursesAssignedCreateWithoutCourseInput[] | CoursesAssignedUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CoursesAssignedCreateOrConnectWithoutCourseInput | CoursesAssignedCreateOrConnectWithoutCourseInput[]
    upsert?: CoursesAssignedUpsertWithWhereUniqueWithoutCourseInput | CoursesAssignedUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CoursesAssignedCreateManyCourseInputEnvelope
    set?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
    disconnect?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
    delete?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
    connect?: CoursesAssignedWhereUniqueInput | CoursesAssignedWhereUniqueInput[]
    update?: CoursesAssignedUpdateWithWhereUniqueWithoutCourseInput | CoursesAssignedUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CoursesAssignedUpdateManyWithWhereWithoutCourseInput | CoursesAssignedUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CoursesAssignedScalarWhereInput | CoursesAssignedScalarWhereInput[]
  }

  export type AssessmentAttemptUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<AssessmentAttemptCreateWithoutCourseInput, AssessmentAttemptUncheckedCreateWithoutCourseInput> | AssessmentAttemptCreateWithoutCourseInput[] | AssessmentAttemptUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: AssessmentAttemptCreateOrConnectWithoutCourseInput | AssessmentAttemptCreateOrConnectWithoutCourseInput[]
    upsert?: AssessmentAttemptUpsertWithWhereUniqueWithoutCourseInput | AssessmentAttemptUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: AssessmentAttemptCreateManyCourseInputEnvelope
    set?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    disconnect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    delete?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    connect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    update?: AssessmentAttemptUpdateWithWhereUniqueWithoutCourseInput | AssessmentAttemptUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: AssessmentAttemptUpdateManyWithWhereWithoutCourseInput | AssessmentAttemptUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: AssessmentAttemptScalarWhereInput | AssessmentAttemptScalarWhereInput[]
  }

  export type CourseCreateNestedOneWithoutCoursesAssignedInput = {
    create?: XOR<CourseCreateWithoutCoursesAssignedInput, CourseUncheckedCreateWithoutCoursesAssignedInput>
    connectOrCreate?: CourseCreateOrConnectWithoutCoursesAssignedInput
    connect?: CourseWhereUniqueInput
  }

  export type CollegeCreateNestedOneWithoutCoursesAssignedInput = {
    create?: XOR<CollegeCreateWithoutCoursesAssignedInput, CollegeUncheckedCreateWithoutCoursesAssignedInput>
    connectOrCreate?: CollegeCreateOrConnectWithoutCoursesAssignedInput
    connect?: CollegeWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutCoursesAssignedInput = {
    create?: XOR<DepartmentCreateWithoutCoursesAssignedInput, DepartmentUncheckedCreateWithoutCoursesAssignedInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutCoursesAssignedInput
    connect?: DepartmentWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CourseUpdateOneRequiredWithoutCoursesAssignedNestedInput = {
    create?: XOR<CourseCreateWithoutCoursesAssignedInput, CourseUncheckedCreateWithoutCoursesAssignedInput>
    connectOrCreate?: CourseCreateOrConnectWithoutCoursesAssignedInput
    upsert?: CourseUpsertWithoutCoursesAssignedInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutCoursesAssignedInput, CourseUpdateWithoutCoursesAssignedInput>, CourseUncheckedUpdateWithoutCoursesAssignedInput>
  }

  export type CollegeUpdateOneRequiredWithoutCoursesAssignedNestedInput = {
    create?: XOR<CollegeCreateWithoutCoursesAssignedInput, CollegeUncheckedCreateWithoutCoursesAssignedInput>
    connectOrCreate?: CollegeCreateOrConnectWithoutCoursesAssignedInput
    upsert?: CollegeUpsertWithoutCoursesAssignedInput
    connect?: CollegeWhereUniqueInput
    update?: XOR<XOR<CollegeUpdateToOneWithWhereWithoutCoursesAssignedInput, CollegeUpdateWithoutCoursesAssignedInput>, CollegeUncheckedUpdateWithoutCoursesAssignedInput>
  }

  export type DepartmentUpdateOneWithoutCoursesAssignedNestedInput = {
    create?: XOR<DepartmentCreateWithoutCoursesAssignedInput, DepartmentUncheckedCreateWithoutCoursesAssignedInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutCoursesAssignedInput
    upsert?: DepartmentUpsertWithoutCoursesAssignedInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutCoursesAssignedInput, DepartmentUpdateWithoutCoursesAssignedInput>, DepartmentUncheckedUpdateWithoutCoursesAssignedInput>
  }

  export type UserCreateNestedOneWithoutEnrollmentsInput = {
    create?: XOR<UserCreateWithoutEnrollmentsInput, UserUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEnrollmentsInput
    connect?: UserWhereUniqueInput
  }

  export type CourseCreateNestedOneWithoutEnrollmentsInput = {
    create?: XOR<CourseCreateWithoutEnrollmentsInput, CourseUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutEnrollmentsInput
    connect?: CourseWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutEnrollmentInput = {
    create?: XOR<DepartmentCreateWithoutEnrollmentInput, DepartmentUncheckedCreateWithoutEnrollmentInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutEnrollmentInput
    connect?: DepartmentWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutEnrollmentsNestedInput = {
    create?: XOR<UserCreateWithoutEnrollmentsInput, UserUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEnrollmentsInput
    upsert?: UserUpsertWithoutEnrollmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEnrollmentsInput, UserUpdateWithoutEnrollmentsInput>, UserUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type CourseUpdateOneRequiredWithoutEnrollmentsNestedInput = {
    create?: XOR<CourseCreateWithoutEnrollmentsInput, CourseUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutEnrollmentsInput
    upsert?: CourseUpsertWithoutEnrollmentsInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutEnrollmentsInput, CourseUpdateWithoutEnrollmentsInput>, CourseUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type DepartmentUpdateOneWithoutEnrollmentNestedInput = {
    create?: XOR<DepartmentCreateWithoutEnrollmentInput, DepartmentUncheckedCreateWithoutEnrollmentInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutEnrollmentInput
    upsert?: DepartmentUpsertWithoutEnrollmentInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutEnrollmentInput, DepartmentUpdateWithoutEnrollmentInput>, DepartmentUncheckedUpdateWithoutEnrollmentInput>
  }

  export type ChapterCreateattachmentsInput = {
    set: string[]
  }

  export type AssessmentCreateNestedManyWithoutChapterInput = {
    create?: XOR<AssessmentCreateWithoutChapterInput, AssessmentUncheckedCreateWithoutChapterInput> | AssessmentCreateWithoutChapterInput[] | AssessmentUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: AssessmentCreateOrConnectWithoutChapterInput | AssessmentCreateOrConnectWithoutChapterInput[]
    createMany?: AssessmentCreateManyChapterInputEnvelope
    connect?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
  }

  export type ChapterProgressCreateNestedManyWithoutChapterInput = {
    create?: XOR<ChapterProgressCreateWithoutChapterInput, ChapterProgressUncheckedCreateWithoutChapterInput> | ChapterProgressCreateWithoutChapterInput[] | ChapterProgressUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: ChapterProgressCreateOrConnectWithoutChapterInput | ChapterProgressCreateOrConnectWithoutChapterInput[]
    createMany?: ChapterProgressCreateManyChapterInputEnvelope
    connect?: ChapterProgressWhereUniqueInput | ChapterProgressWhereUniqueInput[]
  }

  export type CourseCreateNestedOneWithoutChaptersInput = {
    create?: XOR<CourseCreateWithoutChaptersInput, CourseUncheckedCreateWithoutChaptersInput>
    connectOrCreate?: CourseCreateOrConnectWithoutChaptersInput
    connect?: CourseWhereUniqueInput
  }

  export type AssessmentUncheckedCreateNestedManyWithoutChapterInput = {
    create?: XOR<AssessmentCreateWithoutChapterInput, AssessmentUncheckedCreateWithoutChapterInput> | AssessmentCreateWithoutChapterInput[] | AssessmentUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: AssessmentCreateOrConnectWithoutChapterInput | AssessmentCreateOrConnectWithoutChapterInput[]
    createMany?: AssessmentCreateManyChapterInputEnvelope
    connect?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
  }

  export type ChapterProgressUncheckedCreateNestedManyWithoutChapterInput = {
    create?: XOR<ChapterProgressCreateWithoutChapterInput, ChapterProgressUncheckedCreateWithoutChapterInput> | ChapterProgressCreateWithoutChapterInput[] | ChapterProgressUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: ChapterProgressCreateOrConnectWithoutChapterInput | ChapterProgressCreateOrConnectWithoutChapterInput[]
    createMany?: ChapterProgressCreateManyChapterInputEnvelope
    connect?: ChapterProgressWhereUniqueInput | ChapterProgressWhereUniqueInput[]
  }

  export type ChapterUpdateattachmentsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type AssessmentUpdateManyWithoutChapterNestedInput = {
    create?: XOR<AssessmentCreateWithoutChapterInput, AssessmentUncheckedCreateWithoutChapterInput> | AssessmentCreateWithoutChapterInput[] | AssessmentUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: AssessmentCreateOrConnectWithoutChapterInput | AssessmentCreateOrConnectWithoutChapterInput[]
    upsert?: AssessmentUpsertWithWhereUniqueWithoutChapterInput | AssessmentUpsertWithWhereUniqueWithoutChapterInput[]
    createMany?: AssessmentCreateManyChapterInputEnvelope
    set?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    disconnect?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    delete?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    connect?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    update?: AssessmentUpdateWithWhereUniqueWithoutChapterInput | AssessmentUpdateWithWhereUniqueWithoutChapterInput[]
    updateMany?: AssessmentUpdateManyWithWhereWithoutChapterInput | AssessmentUpdateManyWithWhereWithoutChapterInput[]
    deleteMany?: AssessmentScalarWhereInput | AssessmentScalarWhereInput[]
  }

  export type ChapterProgressUpdateManyWithoutChapterNestedInput = {
    create?: XOR<ChapterProgressCreateWithoutChapterInput, ChapterProgressUncheckedCreateWithoutChapterInput> | ChapterProgressCreateWithoutChapterInput[] | ChapterProgressUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: ChapterProgressCreateOrConnectWithoutChapterInput | ChapterProgressCreateOrConnectWithoutChapterInput[]
    upsert?: ChapterProgressUpsertWithWhereUniqueWithoutChapterInput | ChapterProgressUpsertWithWhereUniqueWithoutChapterInput[]
    createMany?: ChapterProgressCreateManyChapterInputEnvelope
    set?: ChapterProgressWhereUniqueInput | ChapterProgressWhereUniqueInput[]
    disconnect?: ChapterProgressWhereUniqueInput | ChapterProgressWhereUniqueInput[]
    delete?: ChapterProgressWhereUniqueInput | ChapterProgressWhereUniqueInput[]
    connect?: ChapterProgressWhereUniqueInput | ChapterProgressWhereUniqueInput[]
    update?: ChapterProgressUpdateWithWhereUniqueWithoutChapterInput | ChapterProgressUpdateWithWhereUniqueWithoutChapterInput[]
    updateMany?: ChapterProgressUpdateManyWithWhereWithoutChapterInput | ChapterProgressUpdateManyWithWhereWithoutChapterInput[]
    deleteMany?: ChapterProgressScalarWhereInput | ChapterProgressScalarWhereInput[]
  }

  export type CourseUpdateOneRequiredWithoutChaptersNestedInput = {
    create?: XOR<CourseCreateWithoutChaptersInput, CourseUncheckedCreateWithoutChaptersInput>
    connectOrCreate?: CourseCreateOrConnectWithoutChaptersInput
    upsert?: CourseUpsertWithoutChaptersInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutChaptersInput, CourseUpdateWithoutChaptersInput>, CourseUncheckedUpdateWithoutChaptersInput>
  }

  export type AssessmentUncheckedUpdateManyWithoutChapterNestedInput = {
    create?: XOR<AssessmentCreateWithoutChapterInput, AssessmentUncheckedCreateWithoutChapterInput> | AssessmentCreateWithoutChapterInput[] | AssessmentUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: AssessmentCreateOrConnectWithoutChapterInput | AssessmentCreateOrConnectWithoutChapterInput[]
    upsert?: AssessmentUpsertWithWhereUniqueWithoutChapterInput | AssessmentUpsertWithWhereUniqueWithoutChapterInput[]
    createMany?: AssessmentCreateManyChapterInputEnvelope
    set?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    disconnect?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    delete?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    connect?: AssessmentWhereUniqueInput | AssessmentWhereUniqueInput[]
    update?: AssessmentUpdateWithWhereUniqueWithoutChapterInput | AssessmentUpdateWithWhereUniqueWithoutChapterInput[]
    updateMany?: AssessmentUpdateManyWithWhereWithoutChapterInput | AssessmentUpdateManyWithWhereWithoutChapterInput[]
    deleteMany?: AssessmentScalarWhereInput | AssessmentScalarWhereInput[]
  }

  export type ChapterProgressUncheckedUpdateManyWithoutChapterNestedInput = {
    create?: XOR<ChapterProgressCreateWithoutChapterInput, ChapterProgressUncheckedCreateWithoutChapterInput> | ChapterProgressCreateWithoutChapterInput[] | ChapterProgressUncheckedCreateWithoutChapterInput[]
    connectOrCreate?: ChapterProgressCreateOrConnectWithoutChapterInput | ChapterProgressCreateOrConnectWithoutChapterInput[]
    upsert?: ChapterProgressUpsertWithWhereUniqueWithoutChapterInput | ChapterProgressUpsertWithWhereUniqueWithoutChapterInput[]
    createMany?: ChapterProgressCreateManyChapterInputEnvelope
    set?: ChapterProgressWhereUniqueInput | ChapterProgressWhereUniqueInput[]
    disconnect?: ChapterProgressWhereUniqueInput | ChapterProgressWhereUniqueInput[]
    delete?: ChapterProgressWhereUniqueInput | ChapterProgressWhereUniqueInput[]
    connect?: ChapterProgressWhereUniqueInput | ChapterProgressWhereUniqueInput[]
    update?: ChapterProgressUpdateWithWhereUniqueWithoutChapterInput | ChapterProgressUpdateWithWhereUniqueWithoutChapterInput[]
    updateMany?: ChapterProgressUpdateManyWithWhereWithoutChapterInput | ChapterProgressUpdateManyWithWhereWithoutChapterInput[]
    deleteMany?: ChapterProgressScalarWhereInput | ChapterProgressScalarWhereInput[]
  }

  export type ChapterCreateNestedOneWithoutProgressInput = {
    create?: XOR<ChapterCreateWithoutProgressInput, ChapterUncheckedCreateWithoutProgressInput>
    connectOrCreate?: ChapterCreateOrConnectWithoutProgressInput
    connect?: ChapterWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChapterProgressInput = {
    create?: XOR<UserCreateWithoutChapterProgressInput, UserUncheckedCreateWithoutChapterProgressInput>
    connectOrCreate?: UserCreateOrConnectWithoutChapterProgressInput
    connect?: UserWhereUniqueInput
  }

  export type ChapterUpdateOneRequiredWithoutProgressNestedInput = {
    create?: XOR<ChapterCreateWithoutProgressInput, ChapterUncheckedCreateWithoutProgressInput>
    connectOrCreate?: ChapterCreateOrConnectWithoutProgressInput
    upsert?: ChapterUpsertWithoutProgressInput
    connect?: ChapterWhereUniqueInput
    update?: XOR<XOR<ChapterUpdateToOneWithWhereWithoutProgressInput, ChapterUpdateWithoutProgressInput>, ChapterUncheckedUpdateWithoutProgressInput>
  }

  export type UserUpdateOneRequiredWithoutChapterProgressNestedInput = {
    create?: XOR<UserCreateWithoutChapterProgressInput, UserUncheckedCreateWithoutChapterProgressInput>
    connectOrCreate?: UserCreateOrConnectWithoutChapterProgressInput
    upsert?: UserUpsertWithoutChapterProgressInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChapterProgressInput, UserUpdateWithoutChapterProgressInput>, UserUncheckedUpdateWithoutChapterProgressInput>
  }

  export type AssessmentQuestionCreateNestedManyWithoutAssessmentInput = {
    create?: XOR<AssessmentQuestionCreateWithoutAssessmentInput, AssessmentQuestionUncheckedCreateWithoutAssessmentInput> | AssessmentQuestionCreateWithoutAssessmentInput[] | AssessmentQuestionUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: AssessmentQuestionCreateOrConnectWithoutAssessmentInput | AssessmentQuestionCreateOrConnectWithoutAssessmentInput[]
    createMany?: AssessmentQuestionCreateManyAssessmentInputEnvelope
    connect?: AssessmentQuestionWhereUniqueInput | AssessmentQuestionWhereUniqueInput[]
  }

  export type AssessmentAttemptCreateNestedManyWithoutAssessmentInput = {
    create?: XOR<AssessmentAttemptCreateWithoutAssessmentInput, AssessmentAttemptUncheckedCreateWithoutAssessmentInput> | AssessmentAttemptCreateWithoutAssessmentInput[] | AssessmentAttemptUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: AssessmentAttemptCreateOrConnectWithoutAssessmentInput | AssessmentAttemptCreateOrConnectWithoutAssessmentInput[]
    createMany?: AssessmentAttemptCreateManyAssessmentInputEnvelope
    connect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
  }

  export type ChapterCreateNestedOneWithoutAssessmentsInput = {
    create?: XOR<ChapterCreateWithoutAssessmentsInput, ChapterUncheckedCreateWithoutAssessmentsInput>
    connectOrCreate?: ChapterCreateOrConnectWithoutAssessmentsInput
    connect?: ChapterWhereUniqueInput
  }

  export type CourseCreateNestedOneWithoutAssessmentsInput = {
    create?: XOR<CourseCreateWithoutAssessmentsInput, CourseUncheckedCreateWithoutAssessmentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutAssessmentsInput
    connect?: CourseWhereUniqueInput
  }

  export type AssessmentQuestionUncheckedCreateNestedManyWithoutAssessmentInput = {
    create?: XOR<AssessmentQuestionCreateWithoutAssessmentInput, AssessmentQuestionUncheckedCreateWithoutAssessmentInput> | AssessmentQuestionCreateWithoutAssessmentInput[] | AssessmentQuestionUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: AssessmentQuestionCreateOrConnectWithoutAssessmentInput | AssessmentQuestionCreateOrConnectWithoutAssessmentInput[]
    createMany?: AssessmentQuestionCreateManyAssessmentInputEnvelope
    connect?: AssessmentQuestionWhereUniqueInput | AssessmentQuestionWhereUniqueInput[]
  }

  export type AssessmentAttemptUncheckedCreateNestedManyWithoutAssessmentInput = {
    create?: XOR<AssessmentAttemptCreateWithoutAssessmentInput, AssessmentAttemptUncheckedCreateWithoutAssessmentInput> | AssessmentAttemptCreateWithoutAssessmentInput[] | AssessmentAttemptUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: AssessmentAttemptCreateOrConnectWithoutAssessmentInput | AssessmentAttemptCreateOrConnectWithoutAssessmentInput[]
    createMany?: AssessmentAttemptCreateManyAssessmentInputEnvelope
    connect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
  }

  export type AssessmentQuestionUpdateManyWithoutAssessmentNestedInput = {
    create?: XOR<AssessmentQuestionCreateWithoutAssessmentInput, AssessmentQuestionUncheckedCreateWithoutAssessmentInput> | AssessmentQuestionCreateWithoutAssessmentInput[] | AssessmentQuestionUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: AssessmentQuestionCreateOrConnectWithoutAssessmentInput | AssessmentQuestionCreateOrConnectWithoutAssessmentInput[]
    upsert?: AssessmentQuestionUpsertWithWhereUniqueWithoutAssessmentInput | AssessmentQuestionUpsertWithWhereUniqueWithoutAssessmentInput[]
    createMany?: AssessmentQuestionCreateManyAssessmentInputEnvelope
    set?: AssessmentQuestionWhereUniqueInput | AssessmentQuestionWhereUniqueInput[]
    disconnect?: AssessmentQuestionWhereUniqueInput | AssessmentQuestionWhereUniqueInput[]
    delete?: AssessmentQuestionWhereUniqueInput | AssessmentQuestionWhereUniqueInput[]
    connect?: AssessmentQuestionWhereUniqueInput | AssessmentQuestionWhereUniqueInput[]
    update?: AssessmentQuestionUpdateWithWhereUniqueWithoutAssessmentInput | AssessmentQuestionUpdateWithWhereUniqueWithoutAssessmentInput[]
    updateMany?: AssessmentQuestionUpdateManyWithWhereWithoutAssessmentInput | AssessmentQuestionUpdateManyWithWhereWithoutAssessmentInput[]
    deleteMany?: AssessmentQuestionScalarWhereInput | AssessmentQuestionScalarWhereInput[]
  }

  export type AssessmentAttemptUpdateManyWithoutAssessmentNestedInput = {
    create?: XOR<AssessmentAttemptCreateWithoutAssessmentInput, AssessmentAttemptUncheckedCreateWithoutAssessmentInput> | AssessmentAttemptCreateWithoutAssessmentInput[] | AssessmentAttemptUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: AssessmentAttemptCreateOrConnectWithoutAssessmentInput | AssessmentAttemptCreateOrConnectWithoutAssessmentInput[]
    upsert?: AssessmentAttemptUpsertWithWhereUniqueWithoutAssessmentInput | AssessmentAttemptUpsertWithWhereUniqueWithoutAssessmentInput[]
    createMany?: AssessmentAttemptCreateManyAssessmentInputEnvelope
    set?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    disconnect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    delete?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    connect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    update?: AssessmentAttemptUpdateWithWhereUniqueWithoutAssessmentInput | AssessmentAttemptUpdateWithWhereUniqueWithoutAssessmentInput[]
    updateMany?: AssessmentAttemptUpdateManyWithWhereWithoutAssessmentInput | AssessmentAttemptUpdateManyWithWhereWithoutAssessmentInput[]
    deleteMany?: AssessmentAttemptScalarWhereInput | AssessmentAttemptScalarWhereInput[]
  }

  export type ChapterUpdateOneWithoutAssessmentsNestedInput = {
    create?: XOR<ChapterCreateWithoutAssessmentsInput, ChapterUncheckedCreateWithoutAssessmentsInput>
    connectOrCreate?: ChapterCreateOrConnectWithoutAssessmentsInput
    upsert?: ChapterUpsertWithoutAssessmentsInput
    disconnect?: ChapterWhereInput | boolean
    delete?: ChapterWhereInput | boolean
    connect?: ChapterWhereUniqueInput
    update?: XOR<XOR<ChapterUpdateToOneWithWhereWithoutAssessmentsInput, ChapterUpdateWithoutAssessmentsInput>, ChapterUncheckedUpdateWithoutAssessmentsInput>
  }

  export type CourseUpdateOneWithoutAssessmentsNestedInput = {
    create?: XOR<CourseCreateWithoutAssessmentsInput, CourseUncheckedCreateWithoutAssessmentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutAssessmentsInput
    upsert?: CourseUpsertWithoutAssessmentsInput
    disconnect?: CourseWhereInput | boolean
    delete?: CourseWhereInput | boolean
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutAssessmentsInput, CourseUpdateWithoutAssessmentsInput>, CourseUncheckedUpdateWithoutAssessmentsInput>
  }

  export type AssessmentQuestionUncheckedUpdateManyWithoutAssessmentNestedInput = {
    create?: XOR<AssessmentQuestionCreateWithoutAssessmentInput, AssessmentQuestionUncheckedCreateWithoutAssessmentInput> | AssessmentQuestionCreateWithoutAssessmentInput[] | AssessmentQuestionUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: AssessmentQuestionCreateOrConnectWithoutAssessmentInput | AssessmentQuestionCreateOrConnectWithoutAssessmentInput[]
    upsert?: AssessmentQuestionUpsertWithWhereUniqueWithoutAssessmentInput | AssessmentQuestionUpsertWithWhereUniqueWithoutAssessmentInput[]
    createMany?: AssessmentQuestionCreateManyAssessmentInputEnvelope
    set?: AssessmentQuestionWhereUniqueInput | AssessmentQuestionWhereUniqueInput[]
    disconnect?: AssessmentQuestionWhereUniqueInput | AssessmentQuestionWhereUniqueInput[]
    delete?: AssessmentQuestionWhereUniqueInput | AssessmentQuestionWhereUniqueInput[]
    connect?: AssessmentQuestionWhereUniqueInput | AssessmentQuestionWhereUniqueInput[]
    update?: AssessmentQuestionUpdateWithWhereUniqueWithoutAssessmentInput | AssessmentQuestionUpdateWithWhereUniqueWithoutAssessmentInput[]
    updateMany?: AssessmentQuestionUpdateManyWithWhereWithoutAssessmentInput | AssessmentQuestionUpdateManyWithWhereWithoutAssessmentInput[]
    deleteMany?: AssessmentQuestionScalarWhereInput | AssessmentQuestionScalarWhereInput[]
  }

  export type AssessmentAttemptUncheckedUpdateManyWithoutAssessmentNestedInput = {
    create?: XOR<AssessmentAttemptCreateWithoutAssessmentInput, AssessmentAttemptUncheckedCreateWithoutAssessmentInput> | AssessmentAttemptCreateWithoutAssessmentInput[] | AssessmentAttemptUncheckedCreateWithoutAssessmentInput[]
    connectOrCreate?: AssessmentAttemptCreateOrConnectWithoutAssessmentInput | AssessmentAttemptCreateOrConnectWithoutAssessmentInput[]
    upsert?: AssessmentAttemptUpsertWithWhereUniqueWithoutAssessmentInput | AssessmentAttemptUpsertWithWhereUniqueWithoutAssessmentInput[]
    createMany?: AssessmentAttemptCreateManyAssessmentInputEnvelope
    set?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    disconnect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    delete?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    connect?: AssessmentAttemptWhereUniqueInput | AssessmentAttemptWhereUniqueInput[]
    update?: AssessmentAttemptUpdateWithWhereUniqueWithoutAssessmentInput | AssessmentAttemptUpdateWithWhereUniqueWithoutAssessmentInput[]
    updateMany?: AssessmentAttemptUpdateManyWithWhereWithoutAssessmentInput | AssessmentAttemptUpdateManyWithWhereWithoutAssessmentInput[]
    deleteMany?: AssessmentAttemptScalarWhereInput | AssessmentAttemptScalarWhereInput[]
  }

  export type AssessmentQuestionCreateoptionsInput = {
    set: string[]
  }

  export type AssessmentQuestionCreatecorrectOptionIndexesInput = {
    set: number[]
  }

  export type AssessmentCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<AssessmentCreateWithoutQuestionsInput, AssessmentUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: AssessmentCreateOrConnectWithoutQuestionsInput
    connect?: AssessmentWhereUniqueInput
  }

  export type AssessmentQuestionUpdateoptionsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type AssessmentQuestionUpdatecorrectOptionIndexesInput = {
    set?: number[]
    push?: number | number[]
  }

  export type AssessmentUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<AssessmentCreateWithoutQuestionsInput, AssessmentUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: AssessmentCreateOrConnectWithoutQuestionsInput
    upsert?: AssessmentUpsertWithoutQuestionsInput
    connect?: AssessmentWhereUniqueInput
    update?: XOR<XOR<AssessmentUpdateToOneWithWhereWithoutQuestionsInput, AssessmentUpdateWithoutQuestionsInput>, AssessmentUncheckedUpdateWithoutQuestionsInput>
  }

  export type AssessmentCreateNestedOneWithoutAttemptsInput = {
    create?: XOR<AssessmentCreateWithoutAttemptsInput, AssessmentUncheckedCreateWithoutAttemptsInput>
    connectOrCreate?: AssessmentCreateOrConnectWithoutAttemptsInput
    connect?: AssessmentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssessmentAttemptsInput = {
    create?: XOR<UserCreateWithoutAssessmentAttemptsInput, UserUncheckedCreateWithoutAssessmentAttemptsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssessmentAttemptsInput
    connect?: UserWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutAssessmentAttemptInput = {
    create?: XOR<DepartmentCreateWithoutAssessmentAttemptInput, DepartmentUncheckedCreateWithoutAssessmentAttemptInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutAssessmentAttemptInput
    connect?: DepartmentWhereUniqueInput
  }

  export type CourseCreateNestedOneWithoutAssessmentAttemptInput = {
    create?: XOR<CourseCreateWithoutAssessmentAttemptInput, CourseUncheckedCreateWithoutAssessmentAttemptInput>
    connectOrCreate?: CourseCreateOrConnectWithoutAssessmentAttemptInput
    connect?: CourseWhereUniqueInput
  }

  export type CollegeCreateNestedOneWithoutAssessmentAttemptInput = {
    create?: XOR<CollegeCreateWithoutAssessmentAttemptInput, CollegeUncheckedCreateWithoutAssessmentAttemptInput>
    connectOrCreate?: CollegeCreateOrConnectWithoutAssessmentAttemptInput
    connect?: CollegeWhereUniqueInput
  }

  export type AssessmentUpdateOneRequiredWithoutAttemptsNestedInput = {
    create?: XOR<AssessmentCreateWithoutAttemptsInput, AssessmentUncheckedCreateWithoutAttemptsInput>
    connectOrCreate?: AssessmentCreateOrConnectWithoutAttemptsInput
    upsert?: AssessmentUpsertWithoutAttemptsInput
    connect?: AssessmentWhereUniqueInput
    update?: XOR<XOR<AssessmentUpdateToOneWithWhereWithoutAttemptsInput, AssessmentUpdateWithoutAttemptsInput>, AssessmentUncheckedUpdateWithoutAttemptsInput>
  }

  export type UserUpdateOneRequiredWithoutAssessmentAttemptsNestedInput = {
    create?: XOR<UserCreateWithoutAssessmentAttemptsInput, UserUncheckedCreateWithoutAssessmentAttemptsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssessmentAttemptsInput
    upsert?: UserUpsertWithoutAssessmentAttemptsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssessmentAttemptsInput, UserUpdateWithoutAssessmentAttemptsInput>, UserUncheckedUpdateWithoutAssessmentAttemptsInput>
  }

  export type DepartmentUpdateOneWithoutAssessmentAttemptNestedInput = {
    create?: XOR<DepartmentCreateWithoutAssessmentAttemptInput, DepartmentUncheckedCreateWithoutAssessmentAttemptInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutAssessmentAttemptInput
    upsert?: DepartmentUpsertWithoutAssessmentAttemptInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutAssessmentAttemptInput, DepartmentUpdateWithoutAssessmentAttemptInput>, DepartmentUncheckedUpdateWithoutAssessmentAttemptInput>
  }

  export type CourseUpdateOneWithoutAssessmentAttemptNestedInput = {
    create?: XOR<CourseCreateWithoutAssessmentAttemptInput, CourseUncheckedCreateWithoutAssessmentAttemptInput>
    connectOrCreate?: CourseCreateOrConnectWithoutAssessmentAttemptInput
    upsert?: CourseUpsertWithoutAssessmentAttemptInput
    disconnect?: CourseWhereInput | boolean
    delete?: CourseWhereInput | boolean
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutAssessmentAttemptInput, CourseUpdateWithoutAssessmentAttemptInput>, CourseUncheckedUpdateWithoutAssessmentAttemptInput>
  }

  export type CollegeUpdateOneWithoutAssessmentAttemptNestedInput = {
    create?: XOR<CollegeCreateWithoutAssessmentAttemptInput, CollegeUncheckedCreateWithoutAssessmentAttemptInput>
    connectOrCreate?: CollegeCreateOrConnectWithoutAssessmentAttemptInput
    upsert?: CollegeUpsertWithoutAssessmentAttemptInput
    disconnect?: CollegeWhereInput | boolean
    delete?: CollegeWhereInput | boolean
    connect?: CollegeWhereUniqueInput
    update?: XOR<XOR<CollegeUpdateToOneWithWhereWithoutAssessmentAttemptInput, CollegeUpdateWithoutAssessmentAttemptInput>, CollegeUncheckedUpdateWithoutAssessmentAttemptInput>
  }

  export type CourseCreateNestedOneWithoutReviewsInput = {
    create?: XOR<CourseCreateWithoutReviewsInput, CourseUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutReviewsInput
    connect?: CourseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCourseReviewsInput = {
    create?: XOR<UserCreateWithoutCourseReviewsInput, UserUncheckedCreateWithoutCourseReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourseReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type CourseUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<CourseCreateWithoutReviewsInput, CourseUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutReviewsInput
    upsert?: CourseUpsertWithoutReviewsInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutReviewsInput, CourseUpdateWithoutReviewsInput>, CourseUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateOneRequiredWithoutCourseReviewsNestedInput = {
    create?: XOR<UserCreateWithoutCourseReviewsInput, UserUncheckedCreateWithoutCourseReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourseReviewsInput
    upsert?: UserUpsertWithoutCourseReviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCourseReviewsInput, UserUpdateWithoutCourseReviewsInput>, UserUncheckedUpdateWithoutCourseReviewsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type CourseCreateWithoutCreatorInput = {
    id?: string
    title: string
    thumbnail?: string | null
    status?: string
    category?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    madeBySuperAdmin?: boolean
    enrollments?: EnrollmentCreateNestedManyWithoutCourseInput
    assessments?: AssessmentCreateNestedManyWithoutCourseInput
    chapters?: ChapterCreateNestedManyWithoutCourseInput
    reviews?: CourseReviewCreateNestedManyWithoutCourseInput
    CoursesAssigned?: CoursesAssignedCreateNestedManyWithoutCourseInput
    AssessmentAttempt?: AssessmentAttemptCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutCreatorInput = {
    id?: string
    title: string
    thumbnail?: string | null
    status?: string
    category?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    madeBySuperAdmin?: boolean
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutCourseInput
    assessments?: AssessmentUncheckedCreateNestedManyWithoutCourseInput
    chapters?: ChapterUncheckedCreateNestedManyWithoutCourseInput
    reviews?: CourseReviewUncheckedCreateNestedManyWithoutCourseInput
    CoursesAssigned?: CoursesAssignedUncheckedCreateNestedManyWithoutCourseInput
    AssessmentAttempt?: AssessmentAttemptUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutCreatorInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutCreatorInput, CourseUncheckedCreateWithoutCreatorInput>
  }

  export type CourseCreateManyCreatorInputEnvelope = {
    data: CourseCreateManyCreatorInput | CourseCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type EnrollmentCreateWithoutStudentInput = {
    id?: string
    status?: string
    progress?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    duration?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    course: CourseCreateNestedOneWithoutEnrollmentsInput
    department?: DepartmentCreateNestedOneWithoutEnrollmentInput
  }

  export type EnrollmentUncheckedCreateWithoutStudentInput = {
    id?: string
    courseId: string
    status?: string
    progress?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    duration?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentId?: string | null
  }

  export type EnrollmentCreateOrConnectWithoutStudentInput = {
    where: EnrollmentWhereUniqueInput
    create: XOR<EnrollmentCreateWithoutStudentInput, EnrollmentUncheckedCreateWithoutStudentInput>
  }

  export type EnrollmentCreateManyStudentInputEnvelope = {
    data: EnrollmentCreateManyStudentInput | EnrollmentCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type AssessmentAttemptCreateWithoutStudentInput = {
    id?: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    status?: string
    score?: number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    assessment: AssessmentCreateNestedOneWithoutAttemptsInput
    department?: DepartmentCreateNestedOneWithoutAssessmentAttemptInput
    course?: CourseCreateNestedOneWithoutAssessmentAttemptInput
    college?: CollegeCreateNestedOneWithoutAssessmentAttemptInput
  }

  export type AssessmentAttemptUncheckedCreateWithoutStudentInput = {
    id?: string
    assessmentId: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    status?: string
    score?: number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    departmentId?: string | null
    courseId?: string | null
    collegeId?: string | null
  }

  export type AssessmentAttemptCreateOrConnectWithoutStudentInput = {
    where: AssessmentAttemptWhereUniqueInput
    create: XOR<AssessmentAttemptCreateWithoutStudentInput, AssessmentAttemptUncheckedCreateWithoutStudentInput>
  }

  export type AssessmentAttemptCreateManyStudentInputEnvelope = {
    data: AssessmentAttemptCreateManyStudentInput | AssessmentAttemptCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type ChapterProgressCreateWithoutStudentInput = {
    id?: string
    isCompleted?: boolean
    timeSpent?: number
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    chapter: ChapterCreateNestedOneWithoutProgressInput
  }

  export type ChapterProgressUncheckedCreateWithoutStudentInput = {
    id?: string
    isCompleted?: boolean
    timeSpent?: number
    completedAt?: Date | string | null
    chapterId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChapterProgressCreateOrConnectWithoutStudentInput = {
    where: ChapterProgressWhereUniqueInput
    create: XOR<ChapterProgressCreateWithoutStudentInput, ChapterProgressUncheckedCreateWithoutStudentInput>
  }

  export type ChapterProgressCreateManyStudentInputEnvelope = {
    data: ChapterProgressCreateManyStudentInput | ChapterProgressCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type CourseReviewCreateWithoutStudentInput = {
    id?: string
    rating: number
    comment?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    course: CourseCreateNestedOneWithoutReviewsInput
  }

  export type CourseReviewUncheckedCreateWithoutStudentInput = {
    id?: string
    rating: number
    comment?: string | null
    isPublic?: boolean
    courseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseReviewCreateOrConnectWithoutStudentInput = {
    where: CourseReviewWhereUniqueInput
    create: XOR<CourseReviewCreateWithoutStudentInput, CourseReviewUncheckedCreateWithoutStudentInput>
  }

  export type CourseReviewCreateManyStudentInputEnvelope = {
    data: CourseReviewCreateManyStudentInput | CourseReviewCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type CourseUpsertWithWhereUniqueWithoutCreatorInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutCreatorInput, CourseUncheckedUpdateWithoutCreatorInput>
    create: XOR<CourseCreateWithoutCreatorInput, CourseUncheckedCreateWithoutCreatorInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutCreatorInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutCreatorInput, CourseUncheckedUpdateWithoutCreatorInput>
  }

  export type CourseUpdateManyWithWhereWithoutCreatorInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutCreatorInput>
  }

  export type CourseScalarWhereInput = {
    AND?: CourseScalarWhereInput | CourseScalarWhereInput[]
    OR?: CourseScalarWhereInput[]
    NOT?: CourseScalarWhereInput | CourseScalarWhereInput[]
    id?: StringFilter<"Course"> | string
    title?: StringFilter<"Course"> | string
    thumbnail?: StringNullableFilter<"Course"> | string | null
    status?: StringFilter<"Course"> | string
    creatorId?: StringFilter<"Course"> | string
    category?: StringNullableFilter<"Course"> | string | null
    description?: StringNullableFilter<"Course"> | string | null
    createdAt?: DateTimeFilter<"Course"> | Date | string
    updatedAt?: DateTimeFilter<"Course"> | Date | string
    madeBySuperAdmin?: BoolFilter<"Course"> | boolean
  }

  export type EnrollmentUpsertWithWhereUniqueWithoutStudentInput = {
    where: EnrollmentWhereUniqueInput
    update: XOR<EnrollmentUpdateWithoutStudentInput, EnrollmentUncheckedUpdateWithoutStudentInput>
    create: XOR<EnrollmentCreateWithoutStudentInput, EnrollmentUncheckedCreateWithoutStudentInput>
  }

  export type EnrollmentUpdateWithWhereUniqueWithoutStudentInput = {
    where: EnrollmentWhereUniqueInput
    data: XOR<EnrollmentUpdateWithoutStudentInput, EnrollmentUncheckedUpdateWithoutStudentInput>
  }

  export type EnrollmentUpdateManyWithWhereWithoutStudentInput = {
    where: EnrollmentScalarWhereInput
    data: XOR<EnrollmentUpdateManyMutationInput, EnrollmentUncheckedUpdateManyWithoutStudentInput>
  }

  export type EnrollmentScalarWhereInput = {
    AND?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
    OR?: EnrollmentScalarWhereInput[]
    NOT?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
    id?: StringFilter<"Enrollment"> | string
    studentId?: StringFilter<"Enrollment"> | string
    courseId?: StringFilter<"Enrollment"> | string
    status?: StringFilter<"Enrollment"> | string
    progress?: IntFilter<"Enrollment"> | number
    startedAt?: DateTimeNullableFilter<"Enrollment"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"Enrollment"> | Date | string | null
    duration?: IntNullableFilter<"Enrollment"> | number | null
    createdAt?: DateTimeFilter<"Enrollment"> | Date | string
    updatedAt?: DateTimeFilter<"Enrollment"> | Date | string
    departmentId?: StringNullableFilter<"Enrollment"> | string | null
  }

  export type AssessmentAttemptUpsertWithWhereUniqueWithoutStudentInput = {
    where: AssessmentAttemptWhereUniqueInput
    update: XOR<AssessmentAttemptUpdateWithoutStudentInput, AssessmentAttemptUncheckedUpdateWithoutStudentInput>
    create: XOR<AssessmentAttemptCreateWithoutStudentInput, AssessmentAttemptUncheckedCreateWithoutStudentInput>
  }

  export type AssessmentAttemptUpdateWithWhereUniqueWithoutStudentInput = {
    where: AssessmentAttemptWhereUniqueInput
    data: XOR<AssessmentAttemptUpdateWithoutStudentInput, AssessmentAttemptUncheckedUpdateWithoutStudentInput>
  }

  export type AssessmentAttemptUpdateManyWithWhereWithoutStudentInput = {
    where: AssessmentAttemptScalarWhereInput
    data: XOR<AssessmentAttemptUpdateManyMutationInput, AssessmentAttemptUncheckedUpdateManyWithoutStudentInput>
  }

  export type AssessmentAttemptScalarWhereInput = {
    AND?: AssessmentAttemptScalarWhereInput | AssessmentAttemptScalarWhereInput[]
    OR?: AssessmentAttemptScalarWhereInput[]
    NOT?: AssessmentAttemptScalarWhereInput | AssessmentAttemptScalarWhereInput[]
    id?: StringFilter<"AssessmentAttempt"> | string
    assessmentId?: StringFilter<"AssessmentAttempt"> | string
    studentId?: StringFilter<"AssessmentAttempt"> | string
    startedAt?: DateTimeFilter<"AssessmentAttempt"> | Date | string
    submittedAt?: DateTimeNullableFilter<"AssessmentAttempt"> | Date | string | null
    status?: StringFilter<"AssessmentAttempt"> | string
    score?: IntNullableFilter<"AssessmentAttempt"> | number | null
    answers?: JsonNullableFilter<"AssessmentAttempt">
    departmentId?: StringNullableFilter<"AssessmentAttempt"> | string | null
    courseId?: StringNullableFilter<"AssessmentAttempt"> | string | null
    collegeId?: StringNullableFilter<"AssessmentAttempt"> | string | null
  }

  export type ChapterProgressUpsertWithWhereUniqueWithoutStudentInput = {
    where: ChapterProgressWhereUniqueInput
    update: XOR<ChapterProgressUpdateWithoutStudentInput, ChapterProgressUncheckedUpdateWithoutStudentInput>
    create: XOR<ChapterProgressCreateWithoutStudentInput, ChapterProgressUncheckedCreateWithoutStudentInput>
  }

  export type ChapterProgressUpdateWithWhereUniqueWithoutStudentInput = {
    where: ChapterProgressWhereUniqueInput
    data: XOR<ChapterProgressUpdateWithoutStudentInput, ChapterProgressUncheckedUpdateWithoutStudentInput>
  }

  export type ChapterProgressUpdateManyWithWhereWithoutStudentInput = {
    where: ChapterProgressScalarWhereInput
    data: XOR<ChapterProgressUpdateManyMutationInput, ChapterProgressUncheckedUpdateManyWithoutStudentInput>
  }

  export type ChapterProgressScalarWhereInput = {
    AND?: ChapterProgressScalarWhereInput | ChapterProgressScalarWhereInput[]
    OR?: ChapterProgressScalarWhereInput[]
    NOT?: ChapterProgressScalarWhereInput | ChapterProgressScalarWhereInput[]
    id?: StringFilter<"ChapterProgress"> | string
    isCompleted?: BoolFilter<"ChapterProgress"> | boolean
    timeSpent?: IntFilter<"ChapterProgress"> | number
    completedAt?: DateTimeNullableFilter<"ChapterProgress"> | Date | string | null
    chapterId?: StringFilter<"ChapterProgress"> | string
    studentId?: StringFilter<"ChapterProgress"> | string
    createdAt?: DateTimeFilter<"ChapterProgress"> | Date | string
    updatedAt?: DateTimeFilter<"ChapterProgress"> | Date | string
  }

  export type CourseReviewUpsertWithWhereUniqueWithoutStudentInput = {
    where: CourseReviewWhereUniqueInput
    update: XOR<CourseReviewUpdateWithoutStudentInput, CourseReviewUncheckedUpdateWithoutStudentInput>
    create: XOR<CourseReviewCreateWithoutStudentInput, CourseReviewUncheckedCreateWithoutStudentInput>
  }

  export type CourseReviewUpdateWithWhereUniqueWithoutStudentInput = {
    where: CourseReviewWhereUniqueInput
    data: XOR<CourseReviewUpdateWithoutStudentInput, CourseReviewUncheckedUpdateWithoutStudentInput>
  }

  export type CourseReviewUpdateManyWithWhereWithoutStudentInput = {
    where: CourseReviewScalarWhereInput
    data: XOR<CourseReviewUpdateManyMutationInput, CourseReviewUncheckedUpdateManyWithoutStudentInput>
  }

  export type CourseReviewScalarWhereInput = {
    AND?: CourseReviewScalarWhereInput | CourseReviewScalarWhereInput[]
    OR?: CourseReviewScalarWhereInput[]
    NOT?: CourseReviewScalarWhereInput | CourseReviewScalarWhereInput[]
    id?: StringFilter<"CourseReview"> | string
    rating?: IntFilter<"CourseReview"> | number
    comment?: StringNullableFilter<"CourseReview"> | string | null
    isPublic?: BoolFilter<"CourseReview"> | boolean
    courseId?: StringFilter<"CourseReview"> | string
    studentId?: StringFilter<"CourseReview"> | string
    createdAt?: DateTimeFilter<"CourseReview"> | Date | string
    updatedAt?: DateTimeFilter<"CourseReview"> | Date | string
  }

  export type CollegeCreateWithoutRegistrationInput = {
    id?: string
    contactPerson: string
    name: string
    mobileNumber: string
    studentLimit?: number
    validity: Date | string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminLimit?: number
    instructorLimit?: number
    departments?: DepartmentCreateNestedManyWithoutCollegeInput
    CoursesAssigned?: CoursesAssignedCreateNestedManyWithoutCollegeInput
    AssessmentAttempt?: AssessmentAttemptCreateNestedManyWithoutCollegeInput
  }

  export type CollegeUncheckedCreateWithoutRegistrationInput = {
    id?: string
    contactPerson: string
    name: string
    mobileNumber: string
    studentLimit?: number
    validity: Date | string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminLimit?: number
    instructorLimit?: number
    departments?: DepartmentUncheckedCreateNestedManyWithoutCollegeInput
    CoursesAssigned?: CoursesAssignedUncheckedCreateNestedManyWithoutCollegeInput
    AssessmentAttempt?: AssessmentAttemptUncheckedCreateNestedManyWithoutCollegeInput
  }

  export type CollegeCreateOrConnectWithoutRegistrationInput = {
    where: CollegeWhereUniqueInput
    create: XOR<CollegeCreateWithoutRegistrationInput, CollegeUncheckedCreateWithoutRegistrationInput>
  }

  export type DepartmentCreateWithoutRegistrationInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    college: CollegeCreateNestedOneWithoutDepartmentsInput
    CoursesAssigned?: CoursesAssignedCreateNestedManyWithoutDepartmentInput
    Enrollment?: EnrollmentCreateNestedManyWithoutDepartmentInput
    AssessmentAttempt?: AssessmentAttemptCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutRegistrationInput = {
    id?: string
    name: string
    collegeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    CoursesAssigned?: CoursesAssignedUncheckedCreateNestedManyWithoutDepartmentInput
    Enrollment?: EnrollmentUncheckedCreateNestedManyWithoutDepartmentInput
    AssessmentAttempt?: AssessmentAttemptUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutRegistrationInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutRegistrationInput, DepartmentUncheckedCreateWithoutRegistrationInput>
  }

  export type CollegeUpsertWithoutRegistrationInput = {
    update: XOR<CollegeUpdateWithoutRegistrationInput, CollegeUncheckedUpdateWithoutRegistrationInput>
    create: XOR<CollegeCreateWithoutRegistrationInput, CollegeUncheckedCreateWithoutRegistrationInput>
    where?: CollegeWhereInput
  }

  export type CollegeUpdateToOneWithWhereWithoutRegistrationInput = {
    where?: CollegeWhereInput
    data: XOR<CollegeUpdateWithoutRegistrationInput, CollegeUncheckedUpdateWithoutRegistrationInput>
  }

  export type CollegeUpdateWithoutRegistrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    studentLimit?: IntFieldUpdateOperationsInput | number
    validity?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminLimit?: IntFieldUpdateOperationsInput | number
    instructorLimit?: IntFieldUpdateOperationsInput | number
    departments?: DepartmentUpdateManyWithoutCollegeNestedInput
    CoursesAssigned?: CoursesAssignedUpdateManyWithoutCollegeNestedInput
    AssessmentAttempt?: AssessmentAttemptUpdateManyWithoutCollegeNestedInput
  }

  export type CollegeUncheckedUpdateWithoutRegistrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    studentLimit?: IntFieldUpdateOperationsInput | number
    validity?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminLimit?: IntFieldUpdateOperationsInput | number
    instructorLimit?: IntFieldUpdateOperationsInput | number
    departments?: DepartmentUncheckedUpdateManyWithoutCollegeNestedInput
    CoursesAssigned?: CoursesAssignedUncheckedUpdateManyWithoutCollegeNestedInput
    AssessmentAttempt?: AssessmentAttemptUncheckedUpdateManyWithoutCollegeNestedInput
  }

  export type DepartmentUpsertWithoutRegistrationInput = {
    update: XOR<DepartmentUpdateWithoutRegistrationInput, DepartmentUncheckedUpdateWithoutRegistrationInput>
    create: XOR<DepartmentCreateWithoutRegistrationInput, DepartmentUncheckedCreateWithoutRegistrationInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutRegistrationInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutRegistrationInput, DepartmentUncheckedUpdateWithoutRegistrationInput>
  }

  export type DepartmentUpdateWithoutRegistrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    college?: CollegeUpdateOneRequiredWithoutDepartmentsNestedInput
    CoursesAssigned?: CoursesAssignedUpdateManyWithoutDepartmentNestedInput
    Enrollment?: EnrollmentUpdateManyWithoutDepartmentNestedInput
    AssessmentAttempt?: AssessmentAttemptUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutRegistrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    collegeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    CoursesAssigned?: CoursesAssignedUncheckedUpdateManyWithoutDepartmentNestedInput
    Enrollment?: EnrollmentUncheckedUpdateManyWithoutDepartmentNestedInput
    AssessmentAttempt?: AssessmentAttemptUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentCreateWithoutCollegeInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Registration?: RegistrationCreateNestedManyWithoutDepartmentInput
    CoursesAssigned?: CoursesAssignedCreateNestedManyWithoutDepartmentInput
    Enrollment?: EnrollmentCreateNestedManyWithoutDepartmentInput
    AssessmentAttempt?: AssessmentAttemptCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutCollegeInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Registration?: RegistrationUncheckedCreateNestedManyWithoutDepartmentInput
    CoursesAssigned?: CoursesAssignedUncheckedCreateNestedManyWithoutDepartmentInput
    Enrollment?: EnrollmentUncheckedCreateNestedManyWithoutDepartmentInput
    AssessmentAttempt?: AssessmentAttemptUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutCollegeInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutCollegeInput, DepartmentUncheckedCreateWithoutCollegeInput>
  }

  export type DepartmentCreateManyCollegeInputEnvelope = {
    data: DepartmentCreateManyCollegeInput | DepartmentCreateManyCollegeInput[]
    skipDuplicates?: boolean
  }

  export type RegistrationCreateWithoutCollegeInput = {
    id?: string
    fullName: string
    email: string
    year?: string | null
    branch?: string | null
    academicYear?: string | null
    rollNumber?: string | null
    role?: string
    status?: string
    otpHash?: string | null
    otpExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: DepartmentCreateNestedOneWithoutRegistrationInput
  }

  export type RegistrationUncheckedCreateWithoutCollegeInput = {
    id?: string
    fullName: string
    email: string
    year?: string | null
    branch?: string | null
    academicYear?: string | null
    rollNumber?: string | null
    departmentId?: string | null
    role?: string
    status?: string
    otpHash?: string | null
    otpExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RegistrationCreateOrConnectWithoutCollegeInput = {
    where: RegistrationWhereUniqueInput
    create: XOR<RegistrationCreateWithoutCollegeInput, RegistrationUncheckedCreateWithoutCollegeInput>
  }

  export type RegistrationCreateManyCollegeInputEnvelope = {
    data: RegistrationCreateManyCollegeInput | RegistrationCreateManyCollegeInput[]
    skipDuplicates?: boolean
  }

  export type CoursesAssignedCreateWithoutCollegeInput = {
    id?: string
    capacity?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    course: CourseCreateNestedOneWithoutCoursesAssignedInput
    department?: DepartmentCreateNestedOneWithoutCoursesAssignedInput
  }

  export type CoursesAssignedUncheckedCreateWithoutCollegeInput = {
    id?: string
    courseId: string
    departmentId?: string | null
    capacity?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoursesAssignedCreateOrConnectWithoutCollegeInput = {
    where: CoursesAssignedWhereUniqueInput
    create: XOR<CoursesAssignedCreateWithoutCollegeInput, CoursesAssignedUncheckedCreateWithoutCollegeInput>
  }

  export type CoursesAssignedCreateManyCollegeInputEnvelope = {
    data: CoursesAssignedCreateManyCollegeInput | CoursesAssignedCreateManyCollegeInput[]
    skipDuplicates?: boolean
  }

  export type AssessmentAttemptCreateWithoutCollegeInput = {
    id?: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    status?: string
    score?: number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    assessment: AssessmentCreateNestedOneWithoutAttemptsInput
    student: UserCreateNestedOneWithoutAssessmentAttemptsInput
    department?: DepartmentCreateNestedOneWithoutAssessmentAttemptInput
    course?: CourseCreateNestedOneWithoutAssessmentAttemptInput
  }

  export type AssessmentAttemptUncheckedCreateWithoutCollegeInput = {
    id?: string
    assessmentId: string
    studentId: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    status?: string
    score?: number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    departmentId?: string | null
    courseId?: string | null
  }

  export type AssessmentAttemptCreateOrConnectWithoutCollegeInput = {
    where: AssessmentAttemptWhereUniqueInput
    create: XOR<AssessmentAttemptCreateWithoutCollegeInput, AssessmentAttemptUncheckedCreateWithoutCollegeInput>
  }

  export type AssessmentAttemptCreateManyCollegeInputEnvelope = {
    data: AssessmentAttemptCreateManyCollegeInput | AssessmentAttemptCreateManyCollegeInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentUpsertWithWhereUniqueWithoutCollegeInput = {
    where: DepartmentWhereUniqueInput
    update: XOR<DepartmentUpdateWithoutCollegeInput, DepartmentUncheckedUpdateWithoutCollegeInput>
    create: XOR<DepartmentCreateWithoutCollegeInput, DepartmentUncheckedCreateWithoutCollegeInput>
  }

  export type DepartmentUpdateWithWhereUniqueWithoutCollegeInput = {
    where: DepartmentWhereUniqueInput
    data: XOR<DepartmentUpdateWithoutCollegeInput, DepartmentUncheckedUpdateWithoutCollegeInput>
  }

  export type DepartmentUpdateManyWithWhereWithoutCollegeInput = {
    where: DepartmentScalarWhereInput
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyWithoutCollegeInput>
  }

  export type DepartmentScalarWhereInput = {
    AND?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    OR?: DepartmentScalarWhereInput[]
    NOT?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    collegeId?: StringFilter<"Department"> | string
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
  }

  export type RegistrationUpsertWithWhereUniqueWithoutCollegeInput = {
    where: RegistrationWhereUniqueInput
    update: XOR<RegistrationUpdateWithoutCollegeInput, RegistrationUncheckedUpdateWithoutCollegeInput>
    create: XOR<RegistrationCreateWithoutCollegeInput, RegistrationUncheckedCreateWithoutCollegeInput>
  }

  export type RegistrationUpdateWithWhereUniqueWithoutCollegeInput = {
    where: RegistrationWhereUniqueInput
    data: XOR<RegistrationUpdateWithoutCollegeInput, RegistrationUncheckedUpdateWithoutCollegeInput>
  }

  export type RegistrationUpdateManyWithWhereWithoutCollegeInput = {
    where: RegistrationScalarWhereInput
    data: XOR<RegistrationUpdateManyMutationInput, RegistrationUncheckedUpdateManyWithoutCollegeInput>
  }

  export type RegistrationScalarWhereInput = {
    AND?: RegistrationScalarWhereInput | RegistrationScalarWhereInput[]
    OR?: RegistrationScalarWhereInput[]
    NOT?: RegistrationScalarWhereInput | RegistrationScalarWhereInput[]
    id?: StringFilter<"Registration"> | string
    fullName?: StringFilter<"Registration"> | string
    email?: StringFilter<"Registration"> | string
    year?: StringNullableFilter<"Registration"> | string | null
    branch?: StringNullableFilter<"Registration"> | string | null
    academicYear?: StringNullableFilter<"Registration"> | string | null
    rollNumber?: StringNullableFilter<"Registration"> | string | null
    collegeId?: StringFilter<"Registration"> | string
    departmentId?: StringNullableFilter<"Registration"> | string | null
    role?: StringFilter<"Registration"> | string
    status?: StringFilter<"Registration"> | string
    otpHash?: StringNullableFilter<"Registration"> | string | null
    otpExpires?: DateTimeNullableFilter<"Registration"> | Date | string | null
    createdAt?: DateTimeFilter<"Registration"> | Date | string
    updatedAt?: DateTimeFilter<"Registration"> | Date | string
  }

  export type CoursesAssignedUpsertWithWhereUniqueWithoutCollegeInput = {
    where: CoursesAssignedWhereUniqueInput
    update: XOR<CoursesAssignedUpdateWithoutCollegeInput, CoursesAssignedUncheckedUpdateWithoutCollegeInput>
    create: XOR<CoursesAssignedCreateWithoutCollegeInput, CoursesAssignedUncheckedCreateWithoutCollegeInput>
  }

  export type CoursesAssignedUpdateWithWhereUniqueWithoutCollegeInput = {
    where: CoursesAssignedWhereUniqueInput
    data: XOR<CoursesAssignedUpdateWithoutCollegeInput, CoursesAssignedUncheckedUpdateWithoutCollegeInput>
  }

  export type CoursesAssignedUpdateManyWithWhereWithoutCollegeInput = {
    where: CoursesAssignedScalarWhereInput
    data: XOR<CoursesAssignedUpdateManyMutationInput, CoursesAssignedUncheckedUpdateManyWithoutCollegeInput>
  }

  export type CoursesAssignedScalarWhereInput = {
    AND?: CoursesAssignedScalarWhereInput | CoursesAssignedScalarWhereInput[]
    OR?: CoursesAssignedScalarWhereInput[]
    NOT?: CoursesAssignedScalarWhereInput | CoursesAssignedScalarWhereInput[]
    id?: StringFilter<"CoursesAssigned"> | string
    courseId?: StringFilter<"CoursesAssigned"> | string
    collegeId?: StringFilter<"CoursesAssigned"> | string
    departmentId?: StringNullableFilter<"CoursesAssigned"> | string | null
    capacity?: IntNullableFilter<"CoursesAssigned"> | number | null
    createdAt?: DateTimeFilter<"CoursesAssigned"> | Date | string
    updatedAt?: DateTimeFilter<"CoursesAssigned"> | Date | string
  }

  export type AssessmentAttemptUpsertWithWhereUniqueWithoutCollegeInput = {
    where: AssessmentAttemptWhereUniqueInput
    update: XOR<AssessmentAttemptUpdateWithoutCollegeInput, AssessmentAttemptUncheckedUpdateWithoutCollegeInput>
    create: XOR<AssessmentAttemptCreateWithoutCollegeInput, AssessmentAttemptUncheckedCreateWithoutCollegeInput>
  }

  export type AssessmentAttemptUpdateWithWhereUniqueWithoutCollegeInput = {
    where: AssessmentAttemptWhereUniqueInput
    data: XOR<AssessmentAttemptUpdateWithoutCollegeInput, AssessmentAttemptUncheckedUpdateWithoutCollegeInput>
  }

  export type AssessmentAttemptUpdateManyWithWhereWithoutCollegeInput = {
    where: AssessmentAttemptScalarWhereInput
    data: XOR<AssessmentAttemptUpdateManyMutationInput, AssessmentAttemptUncheckedUpdateManyWithoutCollegeInput>
  }

  export type CollegeCreateWithoutDepartmentsInput = {
    id?: string
    contactPerson: string
    name: string
    mobileNumber: string
    studentLimit?: number
    validity: Date | string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminLimit?: number
    instructorLimit?: number
    Registration?: RegistrationCreateNestedManyWithoutCollegeInput
    CoursesAssigned?: CoursesAssignedCreateNestedManyWithoutCollegeInput
    AssessmentAttempt?: AssessmentAttemptCreateNestedManyWithoutCollegeInput
  }

  export type CollegeUncheckedCreateWithoutDepartmentsInput = {
    id?: string
    contactPerson: string
    name: string
    mobileNumber: string
    studentLimit?: number
    validity: Date | string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminLimit?: number
    instructorLimit?: number
    Registration?: RegistrationUncheckedCreateNestedManyWithoutCollegeInput
    CoursesAssigned?: CoursesAssignedUncheckedCreateNestedManyWithoutCollegeInput
    AssessmentAttempt?: AssessmentAttemptUncheckedCreateNestedManyWithoutCollegeInput
  }

  export type CollegeCreateOrConnectWithoutDepartmentsInput = {
    where: CollegeWhereUniqueInput
    create: XOR<CollegeCreateWithoutDepartmentsInput, CollegeUncheckedCreateWithoutDepartmentsInput>
  }

  export type RegistrationCreateWithoutDepartmentInput = {
    id?: string
    fullName: string
    email: string
    year?: string | null
    branch?: string | null
    academicYear?: string | null
    rollNumber?: string | null
    role?: string
    status?: string
    otpHash?: string | null
    otpExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    college: CollegeCreateNestedOneWithoutRegistrationInput
  }

  export type RegistrationUncheckedCreateWithoutDepartmentInput = {
    id?: string
    fullName: string
    email: string
    year?: string | null
    branch?: string | null
    academicYear?: string | null
    rollNumber?: string | null
    collegeId: string
    role?: string
    status?: string
    otpHash?: string | null
    otpExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RegistrationCreateOrConnectWithoutDepartmentInput = {
    where: RegistrationWhereUniqueInput
    create: XOR<RegistrationCreateWithoutDepartmentInput, RegistrationUncheckedCreateWithoutDepartmentInput>
  }

  export type RegistrationCreateManyDepartmentInputEnvelope = {
    data: RegistrationCreateManyDepartmentInput | RegistrationCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type CoursesAssignedCreateWithoutDepartmentInput = {
    id?: string
    capacity?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    course: CourseCreateNestedOneWithoutCoursesAssignedInput
    college: CollegeCreateNestedOneWithoutCoursesAssignedInput
  }

  export type CoursesAssignedUncheckedCreateWithoutDepartmentInput = {
    id?: string
    courseId: string
    collegeId: string
    capacity?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoursesAssignedCreateOrConnectWithoutDepartmentInput = {
    where: CoursesAssignedWhereUniqueInput
    create: XOR<CoursesAssignedCreateWithoutDepartmentInput, CoursesAssignedUncheckedCreateWithoutDepartmentInput>
  }

  export type CoursesAssignedCreateManyDepartmentInputEnvelope = {
    data: CoursesAssignedCreateManyDepartmentInput | CoursesAssignedCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type EnrollmentCreateWithoutDepartmentInput = {
    id?: string
    status?: string
    progress?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    duration?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: UserCreateNestedOneWithoutEnrollmentsInput
    course: CourseCreateNestedOneWithoutEnrollmentsInput
  }

  export type EnrollmentUncheckedCreateWithoutDepartmentInput = {
    id?: string
    studentId: string
    courseId: string
    status?: string
    progress?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    duration?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EnrollmentCreateOrConnectWithoutDepartmentInput = {
    where: EnrollmentWhereUniqueInput
    create: XOR<EnrollmentCreateWithoutDepartmentInput, EnrollmentUncheckedCreateWithoutDepartmentInput>
  }

  export type EnrollmentCreateManyDepartmentInputEnvelope = {
    data: EnrollmentCreateManyDepartmentInput | EnrollmentCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type AssessmentAttemptCreateWithoutDepartmentInput = {
    id?: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    status?: string
    score?: number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    assessment: AssessmentCreateNestedOneWithoutAttemptsInput
    student: UserCreateNestedOneWithoutAssessmentAttemptsInput
    course?: CourseCreateNestedOneWithoutAssessmentAttemptInput
    college?: CollegeCreateNestedOneWithoutAssessmentAttemptInput
  }

  export type AssessmentAttemptUncheckedCreateWithoutDepartmentInput = {
    id?: string
    assessmentId: string
    studentId: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    status?: string
    score?: number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    courseId?: string | null
    collegeId?: string | null
  }

  export type AssessmentAttemptCreateOrConnectWithoutDepartmentInput = {
    where: AssessmentAttemptWhereUniqueInput
    create: XOR<AssessmentAttemptCreateWithoutDepartmentInput, AssessmentAttemptUncheckedCreateWithoutDepartmentInput>
  }

  export type AssessmentAttemptCreateManyDepartmentInputEnvelope = {
    data: AssessmentAttemptCreateManyDepartmentInput | AssessmentAttemptCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type CollegeUpsertWithoutDepartmentsInput = {
    update: XOR<CollegeUpdateWithoutDepartmentsInput, CollegeUncheckedUpdateWithoutDepartmentsInput>
    create: XOR<CollegeCreateWithoutDepartmentsInput, CollegeUncheckedCreateWithoutDepartmentsInput>
    where?: CollegeWhereInput
  }

  export type CollegeUpdateToOneWithWhereWithoutDepartmentsInput = {
    where?: CollegeWhereInput
    data: XOR<CollegeUpdateWithoutDepartmentsInput, CollegeUncheckedUpdateWithoutDepartmentsInput>
  }

  export type CollegeUpdateWithoutDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    studentLimit?: IntFieldUpdateOperationsInput | number
    validity?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminLimit?: IntFieldUpdateOperationsInput | number
    instructorLimit?: IntFieldUpdateOperationsInput | number
    Registration?: RegistrationUpdateManyWithoutCollegeNestedInput
    CoursesAssigned?: CoursesAssignedUpdateManyWithoutCollegeNestedInput
    AssessmentAttempt?: AssessmentAttemptUpdateManyWithoutCollegeNestedInput
  }

  export type CollegeUncheckedUpdateWithoutDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    studentLimit?: IntFieldUpdateOperationsInput | number
    validity?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminLimit?: IntFieldUpdateOperationsInput | number
    instructorLimit?: IntFieldUpdateOperationsInput | number
    Registration?: RegistrationUncheckedUpdateManyWithoutCollegeNestedInput
    CoursesAssigned?: CoursesAssignedUncheckedUpdateManyWithoutCollegeNestedInput
    AssessmentAttempt?: AssessmentAttemptUncheckedUpdateManyWithoutCollegeNestedInput
  }

  export type RegistrationUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: RegistrationWhereUniqueInput
    update: XOR<RegistrationUpdateWithoutDepartmentInput, RegistrationUncheckedUpdateWithoutDepartmentInput>
    create: XOR<RegistrationCreateWithoutDepartmentInput, RegistrationUncheckedCreateWithoutDepartmentInput>
  }

  export type RegistrationUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: RegistrationWhereUniqueInput
    data: XOR<RegistrationUpdateWithoutDepartmentInput, RegistrationUncheckedUpdateWithoutDepartmentInput>
  }

  export type RegistrationUpdateManyWithWhereWithoutDepartmentInput = {
    where: RegistrationScalarWhereInput
    data: XOR<RegistrationUpdateManyMutationInput, RegistrationUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type CoursesAssignedUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: CoursesAssignedWhereUniqueInput
    update: XOR<CoursesAssignedUpdateWithoutDepartmentInput, CoursesAssignedUncheckedUpdateWithoutDepartmentInput>
    create: XOR<CoursesAssignedCreateWithoutDepartmentInput, CoursesAssignedUncheckedCreateWithoutDepartmentInput>
  }

  export type CoursesAssignedUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: CoursesAssignedWhereUniqueInput
    data: XOR<CoursesAssignedUpdateWithoutDepartmentInput, CoursesAssignedUncheckedUpdateWithoutDepartmentInput>
  }

  export type CoursesAssignedUpdateManyWithWhereWithoutDepartmentInput = {
    where: CoursesAssignedScalarWhereInput
    data: XOR<CoursesAssignedUpdateManyMutationInput, CoursesAssignedUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type EnrollmentUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: EnrollmentWhereUniqueInput
    update: XOR<EnrollmentUpdateWithoutDepartmentInput, EnrollmentUncheckedUpdateWithoutDepartmentInput>
    create: XOR<EnrollmentCreateWithoutDepartmentInput, EnrollmentUncheckedCreateWithoutDepartmentInput>
  }

  export type EnrollmentUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: EnrollmentWhereUniqueInput
    data: XOR<EnrollmentUpdateWithoutDepartmentInput, EnrollmentUncheckedUpdateWithoutDepartmentInput>
  }

  export type EnrollmentUpdateManyWithWhereWithoutDepartmentInput = {
    where: EnrollmentScalarWhereInput
    data: XOR<EnrollmentUpdateManyMutationInput, EnrollmentUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type AssessmentAttemptUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: AssessmentAttemptWhereUniqueInput
    update: XOR<AssessmentAttemptUpdateWithoutDepartmentInput, AssessmentAttemptUncheckedUpdateWithoutDepartmentInput>
    create: XOR<AssessmentAttemptCreateWithoutDepartmentInput, AssessmentAttemptUncheckedCreateWithoutDepartmentInput>
  }

  export type AssessmentAttemptUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: AssessmentAttemptWhereUniqueInput
    data: XOR<AssessmentAttemptUpdateWithoutDepartmentInput, AssessmentAttemptUncheckedUpdateWithoutDepartmentInput>
  }

  export type AssessmentAttemptUpdateManyWithWhereWithoutDepartmentInput = {
    where: AssessmentAttemptScalarWhereInput
    data: XOR<AssessmentAttemptUpdateManyMutationInput, AssessmentAttemptUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type UserCreateWithoutCreatedCoursesInput = {
    id?: string
    email: string
    password?: string | null
    authProvider?: string
    role?: string
    tokenVersion?: number
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    lastLogin?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    fullName: string
    year?: string | null
    branch?: string | null
    mobile?: string | null
    mustChangePassword?: boolean
    permissions?: JsonNullValueInput | InputJsonValue
    enrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assessmentAttempts?: AssessmentAttemptCreateNestedManyWithoutStudentInput
    chapterProgress?: ChapterProgressCreateNestedManyWithoutStudentInput
    courseReviews?: CourseReviewCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutCreatedCoursesInput = {
    id?: string
    email: string
    password?: string | null
    authProvider?: string
    role?: string
    tokenVersion?: number
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    lastLogin?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    fullName: string
    year?: string | null
    branch?: string | null
    mobile?: string | null
    mustChangePassword?: boolean
    permissions?: JsonNullValueInput | InputJsonValue
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assessmentAttempts?: AssessmentAttemptUncheckedCreateNestedManyWithoutStudentInput
    chapterProgress?: ChapterProgressUncheckedCreateNestedManyWithoutStudentInput
    courseReviews?: CourseReviewUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutCreatedCoursesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedCoursesInput, UserUncheckedCreateWithoutCreatedCoursesInput>
  }

  export type EnrollmentCreateWithoutCourseInput = {
    id?: string
    status?: string
    progress?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    duration?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: UserCreateNestedOneWithoutEnrollmentsInput
    department?: DepartmentCreateNestedOneWithoutEnrollmentInput
  }

  export type EnrollmentUncheckedCreateWithoutCourseInput = {
    id?: string
    studentId: string
    status?: string
    progress?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    duration?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentId?: string | null
  }

  export type EnrollmentCreateOrConnectWithoutCourseInput = {
    where: EnrollmentWhereUniqueInput
    create: XOR<EnrollmentCreateWithoutCourseInput, EnrollmentUncheckedCreateWithoutCourseInput>
  }

  export type EnrollmentCreateManyCourseInputEnvelope = {
    data: EnrollmentCreateManyCourseInput | EnrollmentCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type AssessmentCreateWithoutCourseInput = {
    id?: string
    title: string
    type?: string
    scope?: string
    timeLimitSeconds?: number | null
    maxAttempts?: number
    isPublished?: boolean
    order?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questions?: AssessmentQuestionCreateNestedManyWithoutAssessmentInput
    attempts?: AssessmentAttemptCreateNestedManyWithoutAssessmentInput
    chapter?: ChapterCreateNestedOneWithoutAssessmentsInput
  }

  export type AssessmentUncheckedCreateWithoutCourseInput = {
    id?: string
    title: string
    type?: string
    scope?: string
    timeLimitSeconds?: number | null
    maxAttempts?: number
    isPublished?: boolean
    order?: number | null
    chapterId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questions?: AssessmentQuestionUncheckedCreateNestedManyWithoutAssessmentInput
    attempts?: AssessmentAttemptUncheckedCreateNestedManyWithoutAssessmentInput
  }

  export type AssessmentCreateOrConnectWithoutCourseInput = {
    where: AssessmentWhereUniqueInput
    create: XOR<AssessmentCreateWithoutCourseInput, AssessmentUncheckedCreateWithoutCourseInput>
  }

  export type AssessmentCreateManyCourseInputEnvelope = {
    data: AssessmentCreateManyCourseInput | AssessmentCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type ChapterCreateWithoutCourseInput = {
    id?: string
    title: string
    slug?: string
    description?: string | null
    content?: string | null
    attachments?: ChapterCreateattachmentsInput | string[]
    order: number
    isPreview?: boolean
    isPublished?: boolean
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    assessments?: AssessmentCreateNestedManyWithoutChapterInput
    progress?: ChapterProgressCreateNestedManyWithoutChapterInput
  }

  export type ChapterUncheckedCreateWithoutCourseInput = {
    id?: string
    title: string
    slug?: string
    description?: string | null
    content?: string | null
    attachments?: ChapterCreateattachmentsInput | string[]
    order: number
    isPreview?: boolean
    isPublished?: boolean
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    assessments?: AssessmentUncheckedCreateNestedManyWithoutChapterInput
    progress?: ChapterProgressUncheckedCreateNestedManyWithoutChapterInput
  }

  export type ChapterCreateOrConnectWithoutCourseInput = {
    where: ChapterWhereUniqueInput
    create: XOR<ChapterCreateWithoutCourseInput, ChapterUncheckedCreateWithoutCourseInput>
  }

  export type ChapterCreateManyCourseInputEnvelope = {
    data: ChapterCreateManyCourseInput | ChapterCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type CourseReviewCreateWithoutCourseInput = {
    id?: string
    rating: number
    comment?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    student: UserCreateNestedOneWithoutCourseReviewsInput
  }

  export type CourseReviewUncheckedCreateWithoutCourseInput = {
    id?: string
    rating: number
    comment?: string | null
    isPublic?: boolean
    studentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseReviewCreateOrConnectWithoutCourseInput = {
    where: CourseReviewWhereUniqueInput
    create: XOR<CourseReviewCreateWithoutCourseInput, CourseReviewUncheckedCreateWithoutCourseInput>
  }

  export type CourseReviewCreateManyCourseInputEnvelope = {
    data: CourseReviewCreateManyCourseInput | CourseReviewCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type CoursesAssignedCreateWithoutCourseInput = {
    id?: string
    capacity?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    college: CollegeCreateNestedOneWithoutCoursesAssignedInput
    department?: DepartmentCreateNestedOneWithoutCoursesAssignedInput
  }

  export type CoursesAssignedUncheckedCreateWithoutCourseInput = {
    id?: string
    collegeId: string
    departmentId?: string | null
    capacity?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoursesAssignedCreateOrConnectWithoutCourseInput = {
    where: CoursesAssignedWhereUniqueInput
    create: XOR<CoursesAssignedCreateWithoutCourseInput, CoursesAssignedUncheckedCreateWithoutCourseInput>
  }

  export type CoursesAssignedCreateManyCourseInputEnvelope = {
    data: CoursesAssignedCreateManyCourseInput | CoursesAssignedCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type AssessmentAttemptCreateWithoutCourseInput = {
    id?: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    status?: string
    score?: number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    assessment: AssessmentCreateNestedOneWithoutAttemptsInput
    student: UserCreateNestedOneWithoutAssessmentAttemptsInput
    department?: DepartmentCreateNestedOneWithoutAssessmentAttemptInput
    college?: CollegeCreateNestedOneWithoutAssessmentAttemptInput
  }

  export type AssessmentAttemptUncheckedCreateWithoutCourseInput = {
    id?: string
    assessmentId: string
    studentId: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    status?: string
    score?: number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    departmentId?: string | null
    collegeId?: string | null
  }

  export type AssessmentAttemptCreateOrConnectWithoutCourseInput = {
    where: AssessmentAttemptWhereUniqueInput
    create: XOR<AssessmentAttemptCreateWithoutCourseInput, AssessmentAttemptUncheckedCreateWithoutCourseInput>
  }

  export type AssessmentAttemptCreateManyCourseInputEnvelope = {
    data: AssessmentAttemptCreateManyCourseInput | AssessmentAttemptCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedCoursesInput = {
    update: XOR<UserUpdateWithoutCreatedCoursesInput, UserUncheckedUpdateWithoutCreatedCoursesInput>
    create: XOR<UserCreateWithoutCreatedCoursesInput, UserUncheckedCreateWithoutCreatedCoursesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedCoursesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedCoursesInput, UserUncheckedUpdateWithoutCreatedCoursesInput>
  }

  export type UserUpdateWithoutCreatedCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    tokenVersion?: IntFieldUpdateOperationsInput | number
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fullName?: StringFieldUpdateOperationsInput | string
    year?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    enrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assessmentAttempts?: AssessmentAttemptUpdateManyWithoutStudentNestedInput
    chapterProgress?: ChapterProgressUpdateManyWithoutStudentNestedInput
    courseReviews?: CourseReviewUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    tokenVersion?: IntFieldUpdateOperationsInput | number
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fullName?: StringFieldUpdateOperationsInput | string
    year?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    enrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assessmentAttempts?: AssessmentAttemptUncheckedUpdateManyWithoutStudentNestedInput
    chapterProgress?: ChapterProgressUncheckedUpdateManyWithoutStudentNestedInput
    courseReviews?: CourseReviewUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type EnrollmentUpsertWithWhereUniqueWithoutCourseInput = {
    where: EnrollmentWhereUniqueInput
    update: XOR<EnrollmentUpdateWithoutCourseInput, EnrollmentUncheckedUpdateWithoutCourseInput>
    create: XOR<EnrollmentCreateWithoutCourseInput, EnrollmentUncheckedCreateWithoutCourseInput>
  }

  export type EnrollmentUpdateWithWhereUniqueWithoutCourseInput = {
    where: EnrollmentWhereUniqueInput
    data: XOR<EnrollmentUpdateWithoutCourseInput, EnrollmentUncheckedUpdateWithoutCourseInput>
  }

  export type EnrollmentUpdateManyWithWhereWithoutCourseInput = {
    where: EnrollmentScalarWhereInput
    data: XOR<EnrollmentUpdateManyMutationInput, EnrollmentUncheckedUpdateManyWithoutCourseInput>
  }

  export type AssessmentUpsertWithWhereUniqueWithoutCourseInput = {
    where: AssessmentWhereUniqueInput
    update: XOR<AssessmentUpdateWithoutCourseInput, AssessmentUncheckedUpdateWithoutCourseInput>
    create: XOR<AssessmentCreateWithoutCourseInput, AssessmentUncheckedCreateWithoutCourseInput>
  }

  export type AssessmentUpdateWithWhereUniqueWithoutCourseInput = {
    where: AssessmentWhereUniqueInput
    data: XOR<AssessmentUpdateWithoutCourseInput, AssessmentUncheckedUpdateWithoutCourseInput>
  }

  export type AssessmentUpdateManyWithWhereWithoutCourseInput = {
    where: AssessmentScalarWhereInput
    data: XOR<AssessmentUpdateManyMutationInput, AssessmentUncheckedUpdateManyWithoutCourseInput>
  }

  export type AssessmentScalarWhereInput = {
    AND?: AssessmentScalarWhereInput | AssessmentScalarWhereInput[]
    OR?: AssessmentScalarWhereInput[]
    NOT?: AssessmentScalarWhereInput | AssessmentScalarWhereInput[]
    id?: StringFilter<"Assessment"> | string
    title?: StringFilter<"Assessment"> | string
    type?: StringFilter<"Assessment"> | string
    scope?: StringFilter<"Assessment"> | string
    timeLimitSeconds?: IntNullableFilter<"Assessment"> | number | null
    maxAttempts?: IntFilter<"Assessment"> | number
    isPublished?: BoolFilter<"Assessment"> | boolean
    order?: IntNullableFilter<"Assessment"> | number | null
    courseId?: StringNullableFilter<"Assessment"> | string | null
    chapterId?: StringNullableFilter<"Assessment"> | string | null
    createdAt?: DateTimeFilter<"Assessment"> | Date | string
    updatedAt?: DateTimeFilter<"Assessment"> | Date | string
  }

  export type ChapterUpsertWithWhereUniqueWithoutCourseInput = {
    where: ChapterWhereUniqueInput
    update: XOR<ChapterUpdateWithoutCourseInput, ChapterUncheckedUpdateWithoutCourseInput>
    create: XOR<ChapterCreateWithoutCourseInput, ChapterUncheckedCreateWithoutCourseInput>
  }

  export type ChapterUpdateWithWhereUniqueWithoutCourseInput = {
    where: ChapterWhereUniqueInput
    data: XOR<ChapterUpdateWithoutCourseInput, ChapterUncheckedUpdateWithoutCourseInput>
  }

  export type ChapterUpdateManyWithWhereWithoutCourseInput = {
    where: ChapterScalarWhereInput
    data: XOR<ChapterUpdateManyMutationInput, ChapterUncheckedUpdateManyWithoutCourseInput>
  }

  export type ChapterScalarWhereInput = {
    AND?: ChapterScalarWhereInput | ChapterScalarWhereInput[]
    OR?: ChapterScalarWhereInput[]
    NOT?: ChapterScalarWhereInput | ChapterScalarWhereInput[]
    id?: StringFilter<"Chapter"> | string
    title?: StringFilter<"Chapter"> | string
    slug?: StringFilter<"Chapter"> | string
    description?: StringNullableFilter<"Chapter"> | string | null
    content?: StringNullableFilter<"Chapter"> | string | null
    attachments?: StringNullableListFilter<"Chapter">
    order?: IntFilter<"Chapter"> | number
    isPreview?: BoolFilter<"Chapter"> | boolean
    isPublished?: BoolFilter<"Chapter"> | boolean
    courseId?: StringFilter<"Chapter"> | string
    settings?: JsonFilter<"Chapter">
    createdAt?: DateTimeFilter<"Chapter"> | Date | string
    updatedAt?: DateTimeFilter<"Chapter"> | Date | string
  }

  export type CourseReviewUpsertWithWhereUniqueWithoutCourseInput = {
    where: CourseReviewWhereUniqueInput
    update: XOR<CourseReviewUpdateWithoutCourseInput, CourseReviewUncheckedUpdateWithoutCourseInput>
    create: XOR<CourseReviewCreateWithoutCourseInput, CourseReviewUncheckedCreateWithoutCourseInput>
  }

  export type CourseReviewUpdateWithWhereUniqueWithoutCourseInput = {
    where: CourseReviewWhereUniqueInput
    data: XOR<CourseReviewUpdateWithoutCourseInput, CourseReviewUncheckedUpdateWithoutCourseInput>
  }

  export type CourseReviewUpdateManyWithWhereWithoutCourseInput = {
    where: CourseReviewScalarWhereInput
    data: XOR<CourseReviewUpdateManyMutationInput, CourseReviewUncheckedUpdateManyWithoutCourseInput>
  }

  export type CoursesAssignedUpsertWithWhereUniqueWithoutCourseInput = {
    where: CoursesAssignedWhereUniqueInput
    update: XOR<CoursesAssignedUpdateWithoutCourseInput, CoursesAssignedUncheckedUpdateWithoutCourseInput>
    create: XOR<CoursesAssignedCreateWithoutCourseInput, CoursesAssignedUncheckedCreateWithoutCourseInput>
  }

  export type CoursesAssignedUpdateWithWhereUniqueWithoutCourseInput = {
    where: CoursesAssignedWhereUniqueInput
    data: XOR<CoursesAssignedUpdateWithoutCourseInput, CoursesAssignedUncheckedUpdateWithoutCourseInput>
  }

  export type CoursesAssignedUpdateManyWithWhereWithoutCourseInput = {
    where: CoursesAssignedScalarWhereInput
    data: XOR<CoursesAssignedUpdateManyMutationInput, CoursesAssignedUncheckedUpdateManyWithoutCourseInput>
  }

  export type AssessmentAttemptUpsertWithWhereUniqueWithoutCourseInput = {
    where: AssessmentAttemptWhereUniqueInput
    update: XOR<AssessmentAttemptUpdateWithoutCourseInput, AssessmentAttemptUncheckedUpdateWithoutCourseInput>
    create: XOR<AssessmentAttemptCreateWithoutCourseInput, AssessmentAttemptUncheckedCreateWithoutCourseInput>
  }

  export type AssessmentAttemptUpdateWithWhereUniqueWithoutCourseInput = {
    where: AssessmentAttemptWhereUniqueInput
    data: XOR<AssessmentAttemptUpdateWithoutCourseInput, AssessmentAttemptUncheckedUpdateWithoutCourseInput>
  }

  export type AssessmentAttemptUpdateManyWithWhereWithoutCourseInput = {
    where: AssessmentAttemptScalarWhereInput
    data: XOR<AssessmentAttemptUpdateManyMutationInput, AssessmentAttemptUncheckedUpdateManyWithoutCourseInput>
  }

  export type CourseCreateWithoutCoursesAssignedInput = {
    id?: string
    title: string
    thumbnail?: string | null
    status?: string
    category?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    madeBySuperAdmin?: boolean
    creator: UserCreateNestedOneWithoutCreatedCoursesInput
    enrollments?: EnrollmentCreateNestedManyWithoutCourseInput
    assessments?: AssessmentCreateNestedManyWithoutCourseInput
    chapters?: ChapterCreateNestedManyWithoutCourseInput
    reviews?: CourseReviewCreateNestedManyWithoutCourseInput
    AssessmentAttempt?: AssessmentAttemptCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutCoursesAssignedInput = {
    id?: string
    title: string
    thumbnail?: string | null
    status?: string
    creatorId: string
    category?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    madeBySuperAdmin?: boolean
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutCourseInput
    assessments?: AssessmentUncheckedCreateNestedManyWithoutCourseInput
    chapters?: ChapterUncheckedCreateNestedManyWithoutCourseInput
    reviews?: CourseReviewUncheckedCreateNestedManyWithoutCourseInput
    AssessmentAttempt?: AssessmentAttemptUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutCoursesAssignedInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutCoursesAssignedInput, CourseUncheckedCreateWithoutCoursesAssignedInput>
  }

  export type CollegeCreateWithoutCoursesAssignedInput = {
    id?: string
    contactPerson: string
    name: string
    mobileNumber: string
    studentLimit?: number
    validity: Date | string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminLimit?: number
    instructorLimit?: number
    departments?: DepartmentCreateNestedManyWithoutCollegeInput
    Registration?: RegistrationCreateNestedManyWithoutCollegeInput
    AssessmentAttempt?: AssessmentAttemptCreateNestedManyWithoutCollegeInput
  }

  export type CollegeUncheckedCreateWithoutCoursesAssignedInput = {
    id?: string
    contactPerson: string
    name: string
    mobileNumber: string
    studentLimit?: number
    validity: Date | string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminLimit?: number
    instructorLimit?: number
    departments?: DepartmentUncheckedCreateNestedManyWithoutCollegeInput
    Registration?: RegistrationUncheckedCreateNestedManyWithoutCollegeInput
    AssessmentAttempt?: AssessmentAttemptUncheckedCreateNestedManyWithoutCollegeInput
  }

  export type CollegeCreateOrConnectWithoutCoursesAssignedInput = {
    where: CollegeWhereUniqueInput
    create: XOR<CollegeCreateWithoutCoursesAssignedInput, CollegeUncheckedCreateWithoutCoursesAssignedInput>
  }

  export type DepartmentCreateWithoutCoursesAssignedInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    college: CollegeCreateNestedOneWithoutDepartmentsInput
    Registration?: RegistrationCreateNestedManyWithoutDepartmentInput
    Enrollment?: EnrollmentCreateNestedManyWithoutDepartmentInput
    AssessmentAttempt?: AssessmentAttemptCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutCoursesAssignedInput = {
    id?: string
    name: string
    collegeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Registration?: RegistrationUncheckedCreateNestedManyWithoutDepartmentInput
    Enrollment?: EnrollmentUncheckedCreateNestedManyWithoutDepartmentInput
    AssessmentAttempt?: AssessmentAttemptUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutCoursesAssignedInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutCoursesAssignedInput, DepartmentUncheckedCreateWithoutCoursesAssignedInput>
  }

  export type CourseUpsertWithoutCoursesAssignedInput = {
    update: XOR<CourseUpdateWithoutCoursesAssignedInput, CourseUncheckedUpdateWithoutCoursesAssignedInput>
    create: XOR<CourseCreateWithoutCoursesAssignedInput, CourseUncheckedCreateWithoutCoursesAssignedInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutCoursesAssignedInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutCoursesAssignedInput, CourseUncheckedUpdateWithoutCoursesAssignedInput>
  }

  export type CourseUpdateWithoutCoursesAssignedInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    madeBySuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    creator?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    enrollments?: EnrollmentUpdateManyWithoutCourseNestedInput
    assessments?: AssessmentUpdateManyWithoutCourseNestedInput
    chapters?: ChapterUpdateManyWithoutCourseNestedInput
    reviews?: CourseReviewUpdateManyWithoutCourseNestedInput
    AssessmentAttempt?: AssessmentAttemptUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutCoursesAssignedInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    madeBySuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    enrollments?: EnrollmentUncheckedUpdateManyWithoutCourseNestedInput
    assessments?: AssessmentUncheckedUpdateManyWithoutCourseNestedInput
    chapters?: ChapterUncheckedUpdateManyWithoutCourseNestedInput
    reviews?: CourseReviewUncheckedUpdateManyWithoutCourseNestedInput
    AssessmentAttempt?: AssessmentAttemptUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CollegeUpsertWithoutCoursesAssignedInput = {
    update: XOR<CollegeUpdateWithoutCoursesAssignedInput, CollegeUncheckedUpdateWithoutCoursesAssignedInput>
    create: XOR<CollegeCreateWithoutCoursesAssignedInput, CollegeUncheckedCreateWithoutCoursesAssignedInput>
    where?: CollegeWhereInput
  }

  export type CollegeUpdateToOneWithWhereWithoutCoursesAssignedInput = {
    where?: CollegeWhereInput
    data: XOR<CollegeUpdateWithoutCoursesAssignedInput, CollegeUncheckedUpdateWithoutCoursesAssignedInput>
  }

  export type CollegeUpdateWithoutCoursesAssignedInput = {
    id?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    studentLimit?: IntFieldUpdateOperationsInput | number
    validity?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminLimit?: IntFieldUpdateOperationsInput | number
    instructorLimit?: IntFieldUpdateOperationsInput | number
    departments?: DepartmentUpdateManyWithoutCollegeNestedInput
    Registration?: RegistrationUpdateManyWithoutCollegeNestedInput
    AssessmentAttempt?: AssessmentAttemptUpdateManyWithoutCollegeNestedInput
  }

  export type CollegeUncheckedUpdateWithoutCoursesAssignedInput = {
    id?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    studentLimit?: IntFieldUpdateOperationsInput | number
    validity?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminLimit?: IntFieldUpdateOperationsInput | number
    instructorLimit?: IntFieldUpdateOperationsInput | number
    departments?: DepartmentUncheckedUpdateManyWithoutCollegeNestedInput
    Registration?: RegistrationUncheckedUpdateManyWithoutCollegeNestedInput
    AssessmentAttempt?: AssessmentAttemptUncheckedUpdateManyWithoutCollegeNestedInput
  }

  export type DepartmentUpsertWithoutCoursesAssignedInput = {
    update: XOR<DepartmentUpdateWithoutCoursesAssignedInput, DepartmentUncheckedUpdateWithoutCoursesAssignedInput>
    create: XOR<DepartmentCreateWithoutCoursesAssignedInput, DepartmentUncheckedCreateWithoutCoursesAssignedInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutCoursesAssignedInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutCoursesAssignedInput, DepartmentUncheckedUpdateWithoutCoursesAssignedInput>
  }

  export type DepartmentUpdateWithoutCoursesAssignedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    college?: CollegeUpdateOneRequiredWithoutDepartmentsNestedInput
    Registration?: RegistrationUpdateManyWithoutDepartmentNestedInput
    Enrollment?: EnrollmentUpdateManyWithoutDepartmentNestedInput
    AssessmentAttempt?: AssessmentAttemptUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutCoursesAssignedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    collegeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Registration?: RegistrationUncheckedUpdateManyWithoutDepartmentNestedInput
    Enrollment?: EnrollmentUncheckedUpdateManyWithoutDepartmentNestedInput
    AssessmentAttempt?: AssessmentAttemptUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type UserCreateWithoutEnrollmentsInput = {
    id?: string
    email: string
    password?: string | null
    authProvider?: string
    role?: string
    tokenVersion?: number
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    lastLogin?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    fullName: string
    year?: string | null
    branch?: string | null
    mobile?: string | null
    mustChangePassword?: boolean
    permissions?: JsonNullValueInput | InputJsonValue
    createdCourses?: CourseCreateNestedManyWithoutCreatorInput
    assessmentAttempts?: AssessmentAttemptCreateNestedManyWithoutStudentInput
    chapterProgress?: ChapterProgressCreateNestedManyWithoutStudentInput
    courseReviews?: CourseReviewCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutEnrollmentsInput = {
    id?: string
    email: string
    password?: string | null
    authProvider?: string
    role?: string
    tokenVersion?: number
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    lastLogin?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    fullName: string
    year?: string | null
    branch?: string | null
    mobile?: string | null
    mustChangePassword?: boolean
    permissions?: JsonNullValueInput | InputJsonValue
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatorInput
    assessmentAttempts?: AssessmentAttemptUncheckedCreateNestedManyWithoutStudentInput
    chapterProgress?: ChapterProgressUncheckedCreateNestedManyWithoutStudentInput
    courseReviews?: CourseReviewUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutEnrollmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEnrollmentsInput, UserUncheckedCreateWithoutEnrollmentsInput>
  }

  export type CourseCreateWithoutEnrollmentsInput = {
    id?: string
    title: string
    thumbnail?: string | null
    status?: string
    category?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    madeBySuperAdmin?: boolean
    creator: UserCreateNestedOneWithoutCreatedCoursesInput
    assessments?: AssessmentCreateNestedManyWithoutCourseInput
    chapters?: ChapterCreateNestedManyWithoutCourseInput
    reviews?: CourseReviewCreateNestedManyWithoutCourseInput
    CoursesAssigned?: CoursesAssignedCreateNestedManyWithoutCourseInput
    AssessmentAttempt?: AssessmentAttemptCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutEnrollmentsInput = {
    id?: string
    title: string
    thumbnail?: string | null
    status?: string
    creatorId: string
    category?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    madeBySuperAdmin?: boolean
    assessments?: AssessmentUncheckedCreateNestedManyWithoutCourseInput
    chapters?: ChapterUncheckedCreateNestedManyWithoutCourseInput
    reviews?: CourseReviewUncheckedCreateNestedManyWithoutCourseInput
    CoursesAssigned?: CoursesAssignedUncheckedCreateNestedManyWithoutCourseInput
    AssessmentAttempt?: AssessmentAttemptUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutEnrollmentsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutEnrollmentsInput, CourseUncheckedCreateWithoutEnrollmentsInput>
  }

  export type DepartmentCreateWithoutEnrollmentInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    college: CollegeCreateNestedOneWithoutDepartmentsInput
    Registration?: RegistrationCreateNestedManyWithoutDepartmentInput
    CoursesAssigned?: CoursesAssignedCreateNestedManyWithoutDepartmentInput
    AssessmentAttempt?: AssessmentAttemptCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutEnrollmentInput = {
    id?: string
    name: string
    collegeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Registration?: RegistrationUncheckedCreateNestedManyWithoutDepartmentInput
    CoursesAssigned?: CoursesAssignedUncheckedCreateNestedManyWithoutDepartmentInput
    AssessmentAttempt?: AssessmentAttemptUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutEnrollmentInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutEnrollmentInput, DepartmentUncheckedCreateWithoutEnrollmentInput>
  }

  export type UserUpsertWithoutEnrollmentsInput = {
    update: XOR<UserUpdateWithoutEnrollmentsInput, UserUncheckedUpdateWithoutEnrollmentsInput>
    create: XOR<UserCreateWithoutEnrollmentsInput, UserUncheckedCreateWithoutEnrollmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEnrollmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEnrollmentsInput, UserUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type UserUpdateWithoutEnrollmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    tokenVersion?: IntFieldUpdateOperationsInput | number
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fullName?: StringFieldUpdateOperationsInput | string
    year?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    createdCourses?: CourseUpdateManyWithoutCreatorNestedInput
    assessmentAttempts?: AssessmentAttemptUpdateManyWithoutStudentNestedInput
    chapterProgress?: ChapterProgressUpdateManyWithoutStudentNestedInput
    courseReviews?: CourseReviewUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutEnrollmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    tokenVersion?: IntFieldUpdateOperationsInput | number
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fullName?: StringFieldUpdateOperationsInput | string
    year?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatorNestedInput
    assessmentAttempts?: AssessmentAttemptUncheckedUpdateManyWithoutStudentNestedInput
    chapterProgress?: ChapterProgressUncheckedUpdateManyWithoutStudentNestedInput
    courseReviews?: CourseReviewUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type CourseUpsertWithoutEnrollmentsInput = {
    update: XOR<CourseUpdateWithoutEnrollmentsInput, CourseUncheckedUpdateWithoutEnrollmentsInput>
    create: XOR<CourseCreateWithoutEnrollmentsInput, CourseUncheckedCreateWithoutEnrollmentsInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutEnrollmentsInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutEnrollmentsInput, CourseUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type CourseUpdateWithoutEnrollmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    madeBySuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    creator?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    assessments?: AssessmentUpdateManyWithoutCourseNestedInput
    chapters?: ChapterUpdateManyWithoutCourseNestedInput
    reviews?: CourseReviewUpdateManyWithoutCourseNestedInput
    CoursesAssigned?: CoursesAssignedUpdateManyWithoutCourseNestedInput
    AssessmentAttempt?: AssessmentAttemptUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutEnrollmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    madeBySuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    assessments?: AssessmentUncheckedUpdateManyWithoutCourseNestedInput
    chapters?: ChapterUncheckedUpdateManyWithoutCourseNestedInput
    reviews?: CourseReviewUncheckedUpdateManyWithoutCourseNestedInput
    CoursesAssigned?: CoursesAssignedUncheckedUpdateManyWithoutCourseNestedInput
    AssessmentAttempt?: AssessmentAttemptUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type DepartmentUpsertWithoutEnrollmentInput = {
    update: XOR<DepartmentUpdateWithoutEnrollmentInput, DepartmentUncheckedUpdateWithoutEnrollmentInput>
    create: XOR<DepartmentCreateWithoutEnrollmentInput, DepartmentUncheckedCreateWithoutEnrollmentInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutEnrollmentInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutEnrollmentInput, DepartmentUncheckedUpdateWithoutEnrollmentInput>
  }

  export type DepartmentUpdateWithoutEnrollmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    college?: CollegeUpdateOneRequiredWithoutDepartmentsNestedInput
    Registration?: RegistrationUpdateManyWithoutDepartmentNestedInput
    CoursesAssigned?: CoursesAssignedUpdateManyWithoutDepartmentNestedInput
    AssessmentAttempt?: AssessmentAttemptUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutEnrollmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    collegeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Registration?: RegistrationUncheckedUpdateManyWithoutDepartmentNestedInput
    CoursesAssigned?: CoursesAssignedUncheckedUpdateManyWithoutDepartmentNestedInput
    AssessmentAttempt?: AssessmentAttemptUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type AssessmentCreateWithoutChapterInput = {
    id?: string
    title: string
    type?: string
    scope?: string
    timeLimitSeconds?: number | null
    maxAttempts?: number
    isPublished?: boolean
    order?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questions?: AssessmentQuestionCreateNestedManyWithoutAssessmentInput
    attempts?: AssessmentAttemptCreateNestedManyWithoutAssessmentInput
    course?: CourseCreateNestedOneWithoutAssessmentsInput
  }

  export type AssessmentUncheckedCreateWithoutChapterInput = {
    id?: string
    title: string
    type?: string
    scope?: string
    timeLimitSeconds?: number | null
    maxAttempts?: number
    isPublished?: boolean
    order?: number | null
    courseId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questions?: AssessmentQuestionUncheckedCreateNestedManyWithoutAssessmentInput
    attempts?: AssessmentAttemptUncheckedCreateNestedManyWithoutAssessmentInput
  }

  export type AssessmentCreateOrConnectWithoutChapterInput = {
    where: AssessmentWhereUniqueInput
    create: XOR<AssessmentCreateWithoutChapterInput, AssessmentUncheckedCreateWithoutChapterInput>
  }

  export type AssessmentCreateManyChapterInputEnvelope = {
    data: AssessmentCreateManyChapterInput | AssessmentCreateManyChapterInput[]
    skipDuplicates?: boolean
  }

  export type ChapterProgressCreateWithoutChapterInput = {
    id?: string
    isCompleted?: boolean
    timeSpent?: number
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: UserCreateNestedOneWithoutChapterProgressInput
  }

  export type ChapterProgressUncheckedCreateWithoutChapterInput = {
    id?: string
    isCompleted?: boolean
    timeSpent?: number
    completedAt?: Date | string | null
    studentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChapterProgressCreateOrConnectWithoutChapterInput = {
    where: ChapterProgressWhereUniqueInput
    create: XOR<ChapterProgressCreateWithoutChapterInput, ChapterProgressUncheckedCreateWithoutChapterInput>
  }

  export type ChapterProgressCreateManyChapterInputEnvelope = {
    data: ChapterProgressCreateManyChapterInput | ChapterProgressCreateManyChapterInput[]
    skipDuplicates?: boolean
  }

  export type CourseCreateWithoutChaptersInput = {
    id?: string
    title: string
    thumbnail?: string | null
    status?: string
    category?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    madeBySuperAdmin?: boolean
    creator: UserCreateNestedOneWithoutCreatedCoursesInput
    enrollments?: EnrollmentCreateNestedManyWithoutCourseInput
    assessments?: AssessmentCreateNestedManyWithoutCourseInput
    reviews?: CourseReviewCreateNestedManyWithoutCourseInput
    CoursesAssigned?: CoursesAssignedCreateNestedManyWithoutCourseInput
    AssessmentAttempt?: AssessmentAttemptCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutChaptersInput = {
    id?: string
    title: string
    thumbnail?: string | null
    status?: string
    creatorId: string
    category?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    madeBySuperAdmin?: boolean
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutCourseInput
    assessments?: AssessmentUncheckedCreateNestedManyWithoutCourseInput
    reviews?: CourseReviewUncheckedCreateNestedManyWithoutCourseInput
    CoursesAssigned?: CoursesAssignedUncheckedCreateNestedManyWithoutCourseInput
    AssessmentAttempt?: AssessmentAttemptUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutChaptersInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutChaptersInput, CourseUncheckedCreateWithoutChaptersInput>
  }

  export type AssessmentUpsertWithWhereUniqueWithoutChapterInput = {
    where: AssessmentWhereUniqueInput
    update: XOR<AssessmentUpdateWithoutChapterInput, AssessmentUncheckedUpdateWithoutChapterInput>
    create: XOR<AssessmentCreateWithoutChapterInput, AssessmentUncheckedCreateWithoutChapterInput>
  }

  export type AssessmentUpdateWithWhereUniqueWithoutChapterInput = {
    where: AssessmentWhereUniqueInput
    data: XOR<AssessmentUpdateWithoutChapterInput, AssessmentUncheckedUpdateWithoutChapterInput>
  }

  export type AssessmentUpdateManyWithWhereWithoutChapterInput = {
    where: AssessmentScalarWhereInput
    data: XOR<AssessmentUpdateManyMutationInput, AssessmentUncheckedUpdateManyWithoutChapterInput>
  }

  export type ChapterProgressUpsertWithWhereUniqueWithoutChapterInput = {
    where: ChapterProgressWhereUniqueInput
    update: XOR<ChapterProgressUpdateWithoutChapterInput, ChapterProgressUncheckedUpdateWithoutChapterInput>
    create: XOR<ChapterProgressCreateWithoutChapterInput, ChapterProgressUncheckedCreateWithoutChapterInput>
  }

  export type ChapterProgressUpdateWithWhereUniqueWithoutChapterInput = {
    where: ChapterProgressWhereUniqueInput
    data: XOR<ChapterProgressUpdateWithoutChapterInput, ChapterProgressUncheckedUpdateWithoutChapterInput>
  }

  export type ChapterProgressUpdateManyWithWhereWithoutChapterInput = {
    where: ChapterProgressScalarWhereInput
    data: XOR<ChapterProgressUpdateManyMutationInput, ChapterProgressUncheckedUpdateManyWithoutChapterInput>
  }

  export type CourseUpsertWithoutChaptersInput = {
    update: XOR<CourseUpdateWithoutChaptersInput, CourseUncheckedUpdateWithoutChaptersInput>
    create: XOR<CourseCreateWithoutChaptersInput, CourseUncheckedCreateWithoutChaptersInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutChaptersInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutChaptersInput, CourseUncheckedUpdateWithoutChaptersInput>
  }

  export type CourseUpdateWithoutChaptersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    madeBySuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    creator?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    enrollments?: EnrollmentUpdateManyWithoutCourseNestedInput
    assessments?: AssessmentUpdateManyWithoutCourseNestedInput
    reviews?: CourseReviewUpdateManyWithoutCourseNestedInput
    CoursesAssigned?: CoursesAssignedUpdateManyWithoutCourseNestedInput
    AssessmentAttempt?: AssessmentAttemptUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutChaptersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    madeBySuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    enrollments?: EnrollmentUncheckedUpdateManyWithoutCourseNestedInput
    assessments?: AssessmentUncheckedUpdateManyWithoutCourseNestedInput
    reviews?: CourseReviewUncheckedUpdateManyWithoutCourseNestedInput
    CoursesAssigned?: CoursesAssignedUncheckedUpdateManyWithoutCourseNestedInput
    AssessmentAttempt?: AssessmentAttemptUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type ChapterCreateWithoutProgressInput = {
    id?: string
    title: string
    slug?: string
    description?: string | null
    content?: string | null
    attachments?: ChapterCreateattachmentsInput | string[]
    order: number
    isPreview?: boolean
    isPublished?: boolean
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    assessments?: AssessmentCreateNestedManyWithoutChapterInput
    course: CourseCreateNestedOneWithoutChaptersInput
  }

  export type ChapterUncheckedCreateWithoutProgressInput = {
    id?: string
    title: string
    slug?: string
    description?: string | null
    content?: string | null
    attachments?: ChapterCreateattachmentsInput | string[]
    order: number
    isPreview?: boolean
    isPublished?: boolean
    courseId: string
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    assessments?: AssessmentUncheckedCreateNestedManyWithoutChapterInput
  }

  export type ChapterCreateOrConnectWithoutProgressInput = {
    where: ChapterWhereUniqueInput
    create: XOR<ChapterCreateWithoutProgressInput, ChapterUncheckedCreateWithoutProgressInput>
  }

  export type UserCreateWithoutChapterProgressInput = {
    id?: string
    email: string
    password?: string | null
    authProvider?: string
    role?: string
    tokenVersion?: number
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    lastLogin?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    fullName: string
    year?: string | null
    branch?: string | null
    mobile?: string | null
    mustChangePassword?: boolean
    permissions?: JsonNullValueInput | InputJsonValue
    createdCourses?: CourseCreateNestedManyWithoutCreatorInput
    enrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assessmentAttempts?: AssessmentAttemptCreateNestedManyWithoutStudentInput
    courseReviews?: CourseReviewCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutChapterProgressInput = {
    id?: string
    email: string
    password?: string | null
    authProvider?: string
    role?: string
    tokenVersion?: number
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    lastLogin?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    fullName: string
    year?: string | null
    branch?: string | null
    mobile?: string | null
    mustChangePassword?: boolean
    permissions?: JsonNullValueInput | InputJsonValue
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatorInput
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assessmentAttempts?: AssessmentAttemptUncheckedCreateNestedManyWithoutStudentInput
    courseReviews?: CourseReviewUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutChapterProgressInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChapterProgressInput, UserUncheckedCreateWithoutChapterProgressInput>
  }

  export type ChapterUpsertWithoutProgressInput = {
    update: XOR<ChapterUpdateWithoutProgressInput, ChapterUncheckedUpdateWithoutProgressInput>
    create: XOR<ChapterCreateWithoutProgressInput, ChapterUncheckedCreateWithoutProgressInput>
    where?: ChapterWhereInput
  }

  export type ChapterUpdateToOneWithWhereWithoutProgressInput = {
    where?: ChapterWhereInput
    data: XOR<ChapterUpdateWithoutProgressInput, ChapterUncheckedUpdateWithoutProgressInput>
  }

  export type ChapterUpdateWithoutProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: ChapterUpdateattachmentsInput | string[]
    order?: IntFieldUpdateOperationsInput | number
    isPreview?: BoolFieldUpdateOperationsInput | boolean
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessments?: AssessmentUpdateManyWithoutChapterNestedInput
    course?: CourseUpdateOneRequiredWithoutChaptersNestedInput
  }

  export type ChapterUncheckedUpdateWithoutProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: ChapterUpdateattachmentsInput | string[]
    order?: IntFieldUpdateOperationsInput | number
    isPreview?: BoolFieldUpdateOperationsInput | boolean
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    courseId?: StringFieldUpdateOperationsInput | string
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessments?: AssessmentUncheckedUpdateManyWithoutChapterNestedInput
  }

  export type UserUpsertWithoutChapterProgressInput = {
    update: XOR<UserUpdateWithoutChapterProgressInput, UserUncheckedUpdateWithoutChapterProgressInput>
    create: XOR<UserCreateWithoutChapterProgressInput, UserUncheckedCreateWithoutChapterProgressInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChapterProgressInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChapterProgressInput, UserUncheckedUpdateWithoutChapterProgressInput>
  }

  export type UserUpdateWithoutChapterProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    tokenVersion?: IntFieldUpdateOperationsInput | number
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fullName?: StringFieldUpdateOperationsInput | string
    year?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    createdCourses?: CourseUpdateManyWithoutCreatorNestedInput
    enrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assessmentAttempts?: AssessmentAttemptUpdateManyWithoutStudentNestedInput
    courseReviews?: CourseReviewUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutChapterProgressInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    tokenVersion?: IntFieldUpdateOperationsInput | number
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fullName?: StringFieldUpdateOperationsInput | string
    year?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatorNestedInput
    enrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assessmentAttempts?: AssessmentAttemptUncheckedUpdateManyWithoutStudentNestedInput
    courseReviews?: CourseReviewUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type AssessmentQuestionCreateWithoutAssessmentInput = {
    id?: string
    prompt: string
    type: string
    options?: AssessmentQuestionCreateoptionsInput | string[]
    correctOptionIndex?: number | null
    correctOptionIndexes?: AssessmentQuestionCreatecorrectOptionIndexesInput | number[]
    correctText?: string | null
    pairs?: NullableJsonNullValueInput | InputJsonValue
    sampleAnswer?: string | null
    points?: number
    order?: number
  }

  export type AssessmentQuestionUncheckedCreateWithoutAssessmentInput = {
    id?: string
    prompt: string
    type: string
    options?: AssessmentQuestionCreateoptionsInput | string[]
    correctOptionIndex?: number | null
    correctOptionIndexes?: AssessmentQuestionCreatecorrectOptionIndexesInput | number[]
    correctText?: string | null
    pairs?: NullableJsonNullValueInput | InputJsonValue
    sampleAnswer?: string | null
    points?: number
    order?: number
  }

  export type AssessmentQuestionCreateOrConnectWithoutAssessmentInput = {
    where: AssessmentQuestionWhereUniqueInput
    create: XOR<AssessmentQuestionCreateWithoutAssessmentInput, AssessmentQuestionUncheckedCreateWithoutAssessmentInput>
  }

  export type AssessmentQuestionCreateManyAssessmentInputEnvelope = {
    data: AssessmentQuestionCreateManyAssessmentInput | AssessmentQuestionCreateManyAssessmentInput[]
    skipDuplicates?: boolean
  }

  export type AssessmentAttemptCreateWithoutAssessmentInput = {
    id?: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    status?: string
    score?: number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    student: UserCreateNestedOneWithoutAssessmentAttemptsInput
    department?: DepartmentCreateNestedOneWithoutAssessmentAttemptInput
    course?: CourseCreateNestedOneWithoutAssessmentAttemptInput
    college?: CollegeCreateNestedOneWithoutAssessmentAttemptInput
  }

  export type AssessmentAttemptUncheckedCreateWithoutAssessmentInput = {
    id?: string
    studentId: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    status?: string
    score?: number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    departmentId?: string | null
    courseId?: string | null
    collegeId?: string | null
  }

  export type AssessmentAttemptCreateOrConnectWithoutAssessmentInput = {
    where: AssessmentAttemptWhereUniqueInput
    create: XOR<AssessmentAttemptCreateWithoutAssessmentInput, AssessmentAttemptUncheckedCreateWithoutAssessmentInput>
  }

  export type AssessmentAttemptCreateManyAssessmentInputEnvelope = {
    data: AssessmentAttemptCreateManyAssessmentInput | AssessmentAttemptCreateManyAssessmentInput[]
    skipDuplicates?: boolean
  }

  export type ChapterCreateWithoutAssessmentsInput = {
    id?: string
    title: string
    slug?: string
    description?: string | null
    content?: string | null
    attachments?: ChapterCreateattachmentsInput | string[]
    order: number
    isPreview?: boolean
    isPublished?: boolean
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    progress?: ChapterProgressCreateNestedManyWithoutChapterInput
    course: CourseCreateNestedOneWithoutChaptersInput
  }

  export type ChapterUncheckedCreateWithoutAssessmentsInput = {
    id?: string
    title: string
    slug?: string
    description?: string | null
    content?: string | null
    attachments?: ChapterCreateattachmentsInput | string[]
    order: number
    isPreview?: boolean
    isPublished?: boolean
    courseId: string
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    progress?: ChapterProgressUncheckedCreateNestedManyWithoutChapterInput
  }

  export type ChapterCreateOrConnectWithoutAssessmentsInput = {
    where: ChapterWhereUniqueInput
    create: XOR<ChapterCreateWithoutAssessmentsInput, ChapterUncheckedCreateWithoutAssessmentsInput>
  }

  export type CourseCreateWithoutAssessmentsInput = {
    id?: string
    title: string
    thumbnail?: string | null
    status?: string
    category?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    madeBySuperAdmin?: boolean
    creator: UserCreateNestedOneWithoutCreatedCoursesInput
    enrollments?: EnrollmentCreateNestedManyWithoutCourseInput
    chapters?: ChapterCreateNestedManyWithoutCourseInput
    reviews?: CourseReviewCreateNestedManyWithoutCourseInput
    CoursesAssigned?: CoursesAssignedCreateNestedManyWithoutCourseInput
    AssessmentAttempt?: AssessmentAttemptCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutAssessmentsInput = {
    id?: string
    title: string
    thumbnail?: string | null
    status?: string
    creatorId: string
    category?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    madeBySuperAdmin?: boolean
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutCourseInput
    chapters?: ChapterUncheckedCreateNestedManyWithoutCourseInput
    reviews?: CourseReviewUncheckedCreateNestedManyWithoutCourseInput
    CoursesAssigned?: CoursesAssignedUncheckedCreateNestedManyWithoutCourseInput
    AssessmentAttempt?: AssessmentAttemptUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutAssessmentsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutAssessmentsInput, CourseUncheckedCreateWithoutAssessmentsInput>
  }

  export type AssessmentQuestionUpsertWithWhereUniqueWithoutAssessmentInput = {
    where: AssessmentQuestionWhereUniqueInput
    update: XOR<AssessmentQuestionUpdateWithoutAssessmentInput, AssessmentQuestionUncheckedUpdateWithoutAssessmentInput>
    create: XOR<AssessmentQuestionCreateWithoutAssessmentInput, AssessmentQuestionUncheckedCreateWithoutAssessmentInput>
  }

  export type AssessmentQuestionUpdateWithWhereUniqueWithoutAssessmentInput = {
    where: AssessmentQuestionWhereUniqueInput
    data: XOR<AssessmentQuestionUpdateWithoutAssessmentInput, AssessmentQuestionUncheckedUpdateWithoutAssessmentInput>
  }

  export type AssessmentQuestionUpdateManyWithWhereWithoutAssessmentInput = {
    where: AssessmentQuestionScalarWhereInput
    data: XOR<AssessmentQuestionUpdateManyMutationInput, AssessmentQuestionUncheckedUpdateManyWithoutAssessmentInput>
  }

  export type AssessmentQuestionScalarWhereInput = {
    AND?: AssessmentQuestionScalarWhereInput | AssessmentQuestionScalarWhereInput[]
    OR?: AssessmentQuestionScalarWhereInput[]
    NOT?: AssessmentQuestionScalarWhereInput | AssessmentQuestionScalarWhereInput[]
    id?: StringFilter<"AssessmentQuestion"> | string
    assessmentId?: StringFilter<"AssessmentQuestion"> | string
    prompt?: StringFilter<"AssessmentQuestion"> | string
    type?: StringFilter<"AssessmentQuestion"> | string
    options?: StringNullableListFilter<"AssessmentQuestion">
    correctOptionIndex?: IntNullableFilter<"AssessmentQuestion"> | number | null
    correctOptionIndexes?: IntNullableListFilter<"AssessmentQuestion">
    correctText?: StringNullableFilter<"AssessmentQuestion"> | string | null
    pairs?: JsonNullableFilter<"AssessmentQuestion">
    sampleAnswer?: StringNullableFilter<"AssessmentQuestion"> | string | null
    points?: IntFilter<"AssessmentQuestion"> | number
    order?: IntFilter<"AssessmentQuestion"> | number
  }

  export type AssessmentAttemptUpsertWithWhereUniqueWithoutAssessmentInput = {
    where: AssessmentAttemptWhereUniqueInput
    update: XOR<AssessmentAttemptUpdateWithoutAssessmentInput, AssessmentAttemptUncheckedUpdateWithoutAssessmentInput>
    create: XOR<AssessmentAttemptCreateWithoutAssessmentInput, AssessmentAttemptUncheckedCreateWithoutAssessmentInput>
  }

  export type AssessmentAttemptUpdateWithWhereUniqueWithoutAssessmentInput = {
    where: AssessmentAttemptWhereUniqueInput
    data: XOR<AssessmentAttemptUpdateWithoutAssessmentInput, AssessmentAttemptUncheckedUpdateWithoutAssessmentInput>
  }

  export type AssessmentAttemptUpdateManyWithWhereWithoutAssessmentInput = {
    where: AssessmentAttemptScalarWhereInput
    data: XOR<AssessmentAttemptUpdateManyMutationInput, AssessmentAttemptUncheckedUpdateManyWithoutAssessmentInput>
  }

  export type ChapterUpsertWithoutAssessmentsInput = {
    update: XOR<ChapterUpdateWithoutAssessmentsInput, ChapterUncheckedUpdateWithoutAssessmentsInput>
    create: XOR<ChapterCreateWithoutAssessmentsInput, ChapterUncheckedCreateWithoutAssessmentsInput>
    where?: ChapterWhereInput
  }

  export type ChapterUpdateToOneWithWhereWithoutAssessmentsInput = {
    where?: ChapterWhereInput
    data: XOR<ChapterUpdateWithoutAssessmentsInput, ChapterUncheckedUpdateWithoutAssessmentsInput>
  }

  export type ChapterUpdateWithoutAssessmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: ChapterUpdateattachmentsInput | string[]
    order?: IntFieldUpdateOperationsInput | number
    isPreview?: BoolFieldUpdateOperationsInput | boolean
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: ChapterProgressUpdateManyWithoutChapterNestedInput
    course?: CourseUpdateOneRequiredWithoutChaptersNestedInput
  }

  export type ChapterUncheckedUpdateWithoutAssessmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: ChapterUpdateattachmentsInput | string[]
    order?: IntFieldUpdateOperationsInput | number
    isPreview?: BoolFieldUpdateOperationsInput | boolean
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    courseId?: StringFieldUpdateOperationsInput | string
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: ChapterProgressUncheckedUpdateManyWithoutChapterNestedInput
  }

  export type CourseUpsertWithoutAssessmentsInput = {
    update: XOR<CourseUpdateWithoutAssessmentsInput, CourseUncheckedUpdateWithoutAssessmentsInput>
    create: XOR<CourseCreateWithoutAssessmentsInput, CourseUncheckedCreateWithoutAssessmentsInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutAssessmentsInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutAssessmentsInput, CourseUncheckedUpdateWithoutAssessmentsInput>
  }

  export type CourseUpdateWithoutAssessmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    madeBySuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    creator?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    enrollments?: EnrollmentUpdateManyWithoutCourseNestedInput
    chapters?: ChapterUpdateManyWithoutCourseNestedInput
    reviews?: CourseReviewUpdateManyWithoutCourseNestedInput
    CoursesAssigned?: CoursesAssignedUpdateManyWithoutCourseNestedInput
    AssessmentAttempt?: AssessmentAttemptUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutAssessmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    madeBySuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    enrollments?: EnrollmentUncheckedUpdateManyWithoutCourseNestedInput
    chapters?: ChapterUncheckedUpdateManyWithoutCourseNestedInput
    reviews?: CourseReviewUncheckedUpdateManyWithoutCourseNestedInput
    CoursesAssigned?: CoursesAssignedUncheckedUpdateManyWithoutCourseNestedInput
    AssessmentAttempt?: AssessmentAttemptUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type AssessmentCreateWithoutQuestionsInput = {
    id?: string
    title: string
    type?: string
    scope?: string
    timeLimitSeconds?: number | null
    maxAttempts?: number
    isPublished?: boolean
    order?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attempts?: AssessmentAttemptCreateNestedManyWithoutAssessmentInput
    chapter?: ChapterCreateNestedOneWithoutAssessmentsInput
    course?: CourseCreateNestedOneWithoutAssessmentsInput
  }

  export type AssessmentUncheckedCreateWithoutQuestionsInput = {
    id?: string
    title: string
    type?: string
    scope?: string
    timeLimitSeconds?: number | null
    maxAttempts?: number
    isPublished?: boolean
    order?: number | null
    courseId?: string | null
    chapterId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attempts?: AssessmentAttemptUncheckedCreateNestedManyWithoutAssessmentInput
  }

  export type AssessmentCreateOrConnectWithoutQuestionsInput = {
    where: AssessmentWhereUniqueInput
    create: XOR<AssessmentCreateWithoutQuestionsInput, AssessmentUncheckedCreateWithoutQuestionsInput>
  }

  export type AssessmentUpsertWithoutQuestionsInput = {
    update: XOR<AssessmentUpdateWithoutQuestionsInput, AssessmentUncheckedUpdateWithoutQuestionsInput>
    create: XOR<AssessmentCreateWithoutQuestionsInput, AssessmentUncheckedCreateWithoutQuestionsInput>
    where?: AssessmentWhereInput
  }

  export type AssessmentUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: AssessmentWhereInput
    data: XOR<AssessmentUpdateWithoutQuestionsInput, AssessmentUncheckedUpdateWithoutQuestionsInput>
  }

  export type AssessmentUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    timeLimitSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    maxAttempts?: IntFieldUpdateOperationsInput | number
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    order?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: AssessmentAttemptUpdateManyWithoutAssessmentNestedInput
    chapter?: ChapterUpdateOneWithoutAssessmentsNestedInput
    course?: CourseUpdateOneWithoutAssessmentsNestedInput
  }

  export type AssessmentUncheckedUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    timeLimitSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    maxAttempts?: IntFieldUpdateOperationsInput | number
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    order?: NullableIntFieldUpdateOperationsInput | number | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    chapterId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: AssessmentAttemptUncheckedUpdateManyWithoutAssessmentNestedInput
  }

  export type AssessmentCreateWithoutAttemptsInput = {
    id?: string
    title: string
    type?: string
    scope?: string
    timeLimitSeconds?: number | null
    maxAttempts?: number
    isPublished?: boolean
    order?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questions?: AssessmentQuestionCreateNestedManyWithoutAssessmentInput
    chapter?: ChapterCreateNestedOneWithoutAssessmentsInput
    course?: CourseCreateNestedOneWithoutAssessmentsInput
  }

  export type AssessmentUncheckedCreateWithoutAttemptsInput = {
    id?: string
    title: string
    type?: string
    scope?: string
    timeLimitSeconds?: number | null
    maxAttempts?: number
    isPublished?: boolean
    order?: number | null
    courseId?: string | null
    chapterId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questions?: AssessmentQuestionUncheckedCreateNestedManyWithoutAssessmentInput
  }

  export type AssessmentCreateOrConnectWithoutAttemptsInput = {
    where: AssessmentWhereUniqueInput
    create: XOR<AssessmentCreateWithoutAttemptsInput, AssessmentUncheckedCreateWithoutAttemptsInput>
  }

  export type UserCreateWithoutAssessmentAttemptsInput = {
    id?: string
    email: string
    password?: string | null
    authProvider?: string
    role?: string
    tokenVersion?: number
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    lastLogin?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    fullName: string
    year?: string | null
    branch?: string | null
    mobile?: string | null
    mustChangePassword?: boolean
    permissions?: JsonNullValueInput | InputJsonValue
    createdCourses?: CourseCreateNestedManyWithoutCreatorInput
    enrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    chapterProgress?: ChapterProgressCreateNestedManyWithoutStudentInput
    courseReviews?: CourseReviewCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutAssessmentAttemptsInput = {
    id?: string
    email: string
    password?: string | null
    authProvider?: string
    role?: string
    tokenVersion?: number
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    lastLogin?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    fullName: string
    year?: string | null
    branch?: string | null
    mobile?: string | null
    mustChangePassword?: boolean
    permissions?: JsonNullValueInput | InputJsonValue
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatorInput
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    chapterProgress?: ChapterProgressUncheckedCreateNestedManyWithoutStudentInput
    courseReviews?: CourseReviewUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutAssessmentAttemptsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssessmentAttemptsInput, UserUncheckedCreateWithoutAssessmentAttemptsInput>
  }

  export type DepartmentCreateWithoutAssessmentAttemptInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    college: CollegeCreateNestedOneWithoutDepartmentsInput
    Registration?: RegistrationCreateNestedManyWithoutDepartmentInput
    CoursesAssigned?: CoursesAssignedCreateNestedManyWithoutDepartmentInput
    Enrollment?: EnrollmentCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutAssessmentAttemptInput = {
    id?: string
    name: string
    collegeId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Registration?: RegistrationUncheckedCreateNestedManyWithoutDepartmentInput
    CoursesAssigned?: CoursesAssignedUncheckedCreateNestedManyWithoutDepartmentInput
    Enrollment?: EnrollmentUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutAssessmentAttemptInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutAssessmentAttemptInput, DepartmentUncheckedCreateWithoutAssessmentAttemptInput>
  }

  export type CourseCreateWithoutAssessmentAttemptInput = {
    id?: string
    title: string
    thumbnail?: string | null
    status?: string
    category?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    madeBySuperAdmin?: boolean
    creator: UserCreateNestedOneWithoutCreatedCoursesInput
    enrollments?: EnrollmentCreateNestedManyWithoutCourseInput
    assessments?: AssessmentCreateNestedManyWithoutCourseInput
    chapters?: ChapterCreateNestedManyWithoutCourseInput
    reviews?: CourseReviewCreateNestedManyWithoutCourseInput
    CoursesAssigned?: CoursesAssignedCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutAssessmentAttemptInput = {
    id?: string
    title: string
    thumbnail?: string | null
    status?: string
    creatorId: string
    category?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    madeBySuperAdmin?: boolean
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutCourseInput
    assessments?: AssessmentUncheckedCreateNestedManyWithoutCourseInput
    chapters?: ChapterUncheckedCreateNestedManyWithoutCourseInput
    reviews?: CourseReviewUncheckedCreateNestedManyWithoutCourseInput
    CoursesAssigned?: CoursesAssignedUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutAssessmentAttemptInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutAssessmentAttemptInput, CourseUncheckedCreateWithoutAssessmentAttemptInput>
  }

  export type CollegeCreateWithoutAssessmentAttemptInput = {
    id?: string
    contactPerson: string
    name: string
    mobileNumber: string
    studentLimit?: number
    validity: Date | string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminLimit?: number
    instructorLimit?: number
    departments?: DepartmentCreateNestedManyWithoutCollegeInput
    Registration?: RegistrationCreateNestedManyWithoutCollegeInput
    CoursesAssigned?: CoursesAssignedCreateNestedManyWithoutCollegeInput
  }

  export type CollegeUncheckedCreateWithoutAssessmentAttemptInput = {
    id?: string
    contactPerson: string
    name: string
    mobileNumber: string
    studentLimit?: number
    validity: Date | string
    email: string
    createdAt?: Date | string
    updatedAt?: Date | string
    adminLimit?: number
    instructorLimit?: number
    departments?: DepartmentUncheckedCreateNestedManyWithoutCollegeInput
    Registration?: RegistrationUncheckedCreateNestedManyWithoutCollegeInput
    CoursesAssigned?: CoursesAssignedUncheckedCreateNestedManyWithoutCollegeInput
  }

  export type CollegeCreateOrConnectWithoutAssessmentAttemptInput = {
    where: CollegeWhereUniqueInput
    create: XOR<CollegeCreateWithoutAssessmentAttemptInput, CollegeUncheckedCreateWithoutAssessmentAttemptInput>
  }

  export type AssessmentUpsertWithoutAttemptsInput = {
    update: XOR<AssessmentUpdateWithoutAttemptsInput, AssessmentUncheckedUpdateWithoutAttemptsInput>
    create: XOR<AssessmentCreateWithoutAttemptsInput, AssessmentUncheckedCreateWithoutAttemptsInput>
    where?: AssessmentWhereInput
  }

  export type AssessmentUpdateToOneWithWhereWithoutAttemptsInput = {
    where?: AssessmentWhereInput
    data: XOR<AssessmentUpdateWithoutAttemptsInput, AssessmentUncheckedUpdateWithoutAttemptsInput>
  }

  export type AssessmentUpdateWithoutAttemptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    timeLimitSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    maxAttempts?: IntFieldUpdateOperationsInput | number
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    order?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: AssessmentQuestionUpdateManyWithoutAssessmentNestedInput
    chapter?: ChapterUpdateOneWithoutAssessmentsNestedInput
    course?: CourseUpdateOneWithoutAssessmentsNestedInput
  }

  export type AssessmentUncheckedUpdateWithoutAttemptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    timeLimitSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    maxAttempts?: IntFieldUpdateOperationsInput | number
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    order?: NullableIntFieldUpdateOperationsInput | number | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    chapterId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: AssessmentQuestionUncheckedUpdateManyWithoutAssessmentNestedInput
  }

  export type UserUpsertWithoutAssessmentAttemptsInput = {
    update: XOR<UserUpdateWithoutAssessmentAttemptsInput, UserUncheckedUpdateWithoutAssessmentAttemptsInput>
    create: XOR<UserCreateWithoutAssessmentAttemptsInput, UserUncheckedCreateWithoutAssessmentAttemptsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssessmentAttemptsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssessmentAttemptsInput, UserUncheckedUpdateWithoutAssessmentAttemptsInput>
  }

  export type UserUpdateWithoutAssessmentAttemptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    tokenVersion?: IntFieldUpdateOperationsInput | number
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fullName?: StringFieldUpdateOperationsInput | string
    year?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    createdCourses?: CourseUpdateManyWithoutCreatorNestedInput
    enrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    chapterProgress?: ChapterProgressUpdateManyWithoutStudentNestedInput
    courseReviews?: CourseReviewUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutAssessmentAttemptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    tokenVersion?: IntFieldUpdateOperationsInput | number
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fullName?: StringFieldUpdateOperationsInput | string
    year?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatorNestedInput
    enrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    chapterProgress?: ChapterProgressUncheckedUpdateManyWithoutStudentNestedInput
    courseReviews?: CourseReviewUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type DepartmentUpsertWithoutAssessmentAttemptInput = {
    update: XOR<DepartmentUpdateWithoutAssessmentAttemptInput, DepartmentUncheckedUpdateWithoutAssessmentAttemptInput>
    create: XOR<DepartmentCreateWithoutAssessmentAttemptInput, DepartmentUncheckedCreateWithoutAssessmentAttemptInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutAssessmentAttemptInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutAssessmentAttemptInput, DepartmentUncheckedUpdateWithoutAssessmentAttemptInput>
  }

  export type DepartmentUpdateWithoutAssessmentAttemptInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    college?: CollegeUpdateOneRequiredWithoutDepartmentsNestedInput
    Registration?: RegistrationUpdateManyWithoutDepartmentNestedInput
    CoursesAssigned?: CoursesAssignedUpdateManyWithoutDepartmentNestedInput
    Enrollment?: EnrollmentUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutAssessmentAttemptInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    collegeId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Registration?: RegistrationUncheckedUpdateManyWithoutDepartmentNestedInput
    CoursesAssigned?: CoursesAssignedUncheckedUpdateManyWithoutDepartmentNestedInput
    Enrollment?: EnrollmentUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type CourseUpsertWithoutAssessmentAttemptInput = {
    update: XOR<CourseUpdateWithoutAssessmentAttemptInput, CourseUncheckedUpdateWithoutAssessmentAttemptInput>
    create: XOR<CourseCreateWithoutAssessmentAttemptInput, CourseUncheckedCreateWithoutAssessmentAttemptInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutAssessmentAttemptInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutAssessmentAttemptInput, CourseUncheckedUpdateWithoutAssessmentAttemptInput>
  }

  export type CourseUpdateWithoutAssessmentAttemptInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    madeBySuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    creator?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    enrollments?: EnrollmentUpdateManyWithoutCourseNestedInput
    assessments?: AssessmentUpdateManyWithoutCourseNestedInput
    chapters?: ChapterUpdateManyWithoutCourseNestedInput
    reviews?: CourseReviewUpdateManyWithoutCourseNestedInput
    CoursesAssigned?: CoursesAssignedUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutAssessmentAttemptInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    madeBySuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    enrollments?: EnrollmentUncheckedUpdateManyWithoutCourseNestedInput
    assessments?: AssessmentUncheckedUpdateManyWithoutCourseNestedInput
    chapters?: ChapterUncheckedUpdateManyWithoutCourseNestedInput
    reviews?: CourseReviewUncheckedUpdateManyWithoutCourseNestedInput
    CoursesAssigned?: CoursesAssignedUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CollegeUpsertWithoutAssessmentAttemptInput = {
    update: XOR<CollegeUpdateWithoutAssessmentAttemptInput, CollegeUncheckedUpdateWithoutAssessmentAttemptInput>
    create: XOR<CollegeCreateWithoutAssessmentAttemptInput, CollegeUncheckedCreateWithoutAssessmentAttemptInput>
    where?: CollegeWhereInput
  }

  export type CollegeUpdateToOneWithWhereWithoutAssessmentAttemptInput = {
    where?: CollegeWhereInput
    data: XOR<CollegeUpdateWithoutAssessmentAttemptInput, CollegeUncheckedUpdateWithoutAssessmentAttemptInput>
  }

  export type CollegeUpdateWithoutAssessmentAttemptInput = {
    id?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    studentLimit?: IntFieldUpdateOperationsInput | number
    validity?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminLimit?: IntFieldUpdateOperationsInput | number
    instructorLimit?: IntFieldUpdateOperationsInput | number
    departments?: DepartmentUpdateManyWithoutCollegeNestedInput
    Registration?: RegistrationUpdateManyWithoutCollegeNestedInput
    CoursesAssigned?: CoursesAssignedUpdateManyWithoutCollegeNestedInput
  }

  export type CollegeUncheckedUpdateWithoutAssessmentAttemptInput = {
    id?: StringFieldUpdateOperationsInput | string
    contactPerson?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    studentLimit?: IntFieldUpdateOperationsInput | number
    validity?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adminLimit?: IntFieldUpdateOperationsInput | number
    instructorLimit?: IntFieldUpdateOperationsInput | number
    departments?: DepartmentUncheckedUpdateManyWithoutCollegeNestedInput
    Registration?: RegistrationUncheckedUpdateManyWithoutCollegeNestedInput
    CoursesAssigned?: CoursesAssignedUncheckedUpdateManyWithoutCollegeNestedInput
  }

  export type CourseCreateWithoutReviewsInput = {
    id?: string
    title: string
    thumbnail?: string | null
    status?: string
    category?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    madeBySuperAdmin?: boolean
    creator: UserCreateNestedOneWithoutCreatedCoursesInput
    enrollments?: EnrollmentCreateNestedManyWithoutCourseInput
    assessments?: AssessmentCreateNestedManyWithoutCourseInput
    chapters?: ChapterCreateNestedManyWithoutCourseInput
    CoursesAssigned?: CoursesAssignedCreateNestedManyWithoutCourseInput
    AssessmentAttempt?: AssessmentAttemptCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutReviewsInput = {
    id?: string
    title: string
    thumbnail?: string | null
    status?: string
    creatorId: string
    category?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    madeBySuperAdmin?: boolean
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutCourseInput
    assessments?: AssessmentUncheckedCreateNestedManyWithoutCourseInput
    chapters?: ChapterUncheckedCreateNestedManyWithoutCourseInput
    CoursesAssigned?: CoursesAssignedUncheckedCreateNestedManyWithoutCourseInput
    AssessmentAttempt?: AssessmentAttemptUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutReviewsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutReviewsInput, CourseUncheckedCreateWithoutReviewsInput>
  }

  export type UserCreateWithoutCourseReviewsInput = {
    id?: string
    email: string
    password?: string | null
    authProvider?: string
    role?: string
    tokenVersion?: number
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    lastLogin?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    fullName: string
    year?: string | null
    branch?: string | null
    mobile?: string | null
    mustChangePassword?: boolean
    permissions?: JsonNullValueInput | InputJsonValue
    createdCourses?: CourseCreateNestedManyWithoutCreatorInput
    enrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assessmentAttempts?: AssessmentAttemptCreateNestedManyWithoutStudentInput
    chapterProgress?: ChapterProgressCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutCourseReviewsInput = {
    id?: string
    email: string
    password?: string | null
    authProvider?: string
    role?: string
    tokenVersion?: number
    isEmailVerified?: boolean
    emailVerificationToken?: string | null
    emailVerificationExpires?: Date | string | null
    passwordResetToken?: string | null
    passwordResetExpires?: Date | string | null
    lastLogin?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    fullName: string
    year?: string | null
    branch?: string | null
    mobile?: string | null
    mustChangePassword?: boolean
    permissions?: JsonNullValueInput | InputJsonValue
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatorInput
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assessmentAttempts?: AssessmentAttemptUncheckedCreateNestedManyWithoutStudentInput
    chapterProgress?: ChapterProgressUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutCourseReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCourseReviewsInput, UserUncheckedCreateWithoutCourseReviewsInput>
  }

  export type CourseUpsertWithoutReviewsInput = {
    update: XOR<CourseUpdateWithoutReviewsInput, CourseUncheckedUpdateWithoutReviewsInput>
    create: XOR<CourseCreateWithoutReviewsInput, CourseUncheckedCreateWithoutReviewsInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutReviewsInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutReviewsInput, CourseUncheckedUpdateWithoutReviewsInput>
  }

  export type CourseUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    madeBySuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    creator?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    enrollments?: EnrollmentUpdateManyWithoutCourseNestedInput
    assessments?: AssessmentUpdateManyWithoutCourseNestedInput
    chapters?: ChapterUpdateManyWithoutCourseNestedInput
    CoursesAssigned?: CoursesAssignedUpdateManyWithoutCourseNestedInput
    AssessmentAttempt?: AssessmentAttemptUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    madeBySuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    enrollments?: EnrollmentUncheckedUpdateManyWithoutCourseNestedInput
    assessments?: AssessmentUncheckedUpdateManyWithoutCourseNestedInput
    chapters?: ChapterUncheckedUpdateManyWithoutCourseNestedInput
    CoursesAssigned?: CoursesAssignedUncheckedUpdateManyWithoutCourseNestedInput
    AssessmentAttempt?: AssessmentAttemptUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type UserUpsertWithoutCourseReviewsInput = {
    update: XOR<UserUpdateWithoutCourseReviewsInput, UserUncheckedUpdateWithoutCourseReviewsInput>
    create: XOR<UserCreateWithoutCourseReviewsInput, UserUncheckedCreateWithoutCourseReviewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCourseReviewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCourseReviewsInput, UserUncheckedUpdateWithoutCourseReviewsInput>
  }

  export type UserUpdateWithoutCourseReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    tokenVersion?: IntFieldUpdateOperationsInput | number
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fullName?: StringFieldUpdateOperationsInput | string
    year?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    createdCourses?: CourseUpdateManyWithoutCreatorNestedInput
    enrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assessmentAttempts?: AssessmentAttemptUpdateManyWithoutStudentNestedInput
    chapterProgress?: ChapterProgressUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutCourseReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    authProvider?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    tokenVersion?: IntFieldUpdateOperationsInput | number
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerificationExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fullName?: StringFieldUpdateOperationsInput | string
    year?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    mustChangePassword?: BoolFieldUpdateOperationsInput | boolean
    permissions?: JsonNullValueInput | InputJsonValue
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatorNestedInput
    enrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assessmentAttempts?: AssessmentAttemptUncheckedUpdateManyWithoutStudentNestedInput
    chapterProgress?: ChapterProgressUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type CourseCreateManyCreatorInput = {
    id?: string
    title: string
    thumbnail?: string | null
    status?: string
    category?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    madeBySuperAdmin?: boolean
  }

  export type EnrollmentCreateManyStudentInput = {
    id?: string
    courseId: string
    status?: string
    progress?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    duration?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentId?: string | null
  }

  export type AssessmentAttemptCreateManyStudentInput = {
    id?: string
    assessmentId: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    status?: string
    score?: number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    departmentId?: string | null
    courseId?: string | null
    collegeId?: string | null
  }

  export type ChapterProgressCreateManyStudentInput = {
    id?: string
    isCompleted?: boolean
    timeSpent?: number
    completedAt?: Date | string | null
    chapterId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseReviewCreateManyStudentInput = {
    id?: string
    rating: number
    comment?: string | null
    isPublic?: boolean
    courseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    madeBySuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    enrollments?: EnrollmentUpdateManyWithoutCourseNestedInput
    assessments?: AssessmentUpdateManyWithoutCourseNestedInput
    chapters?: ChapterUpdateManyWithoutCourseNestedInput
    reviews?: CourseReviewUpdateManyWithoutCourseNestedInput
    CoursesAssigned?: CoursesAssignedUpdateManyWithoutCourseNestedInput
    AssessmentAttempt?: AssessmentAttemptUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    madeBySuperAdmin?: BoolFieldUpdateOperationsInput | boolean
    enrollments?: EnrollmentUncheckedUpdateManyWithoutCourseNestedInput
    assessments?: AssessmentUncheckedUpdateManyWithoutCourseNestedInput
    chapters?: ChapterUncheckedUpdateManyWithoutCourseNestedInput
    reviews?: CourseReviewUncheckedUpdateManyWithoutCourseNestedInput
    CoursesAssigned?: CoursesAssignedUncheckedUpdateManyWithoutCourseNestedInput
    AssessmentAttempt?: AssessmentAttemptUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    madeBySuperAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EnrollmentUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutEnrollmentsNestedInput
    department?: DepartmentUpdateOneWithoutEnrollmentNestedInput
  }

  export type EnrollmentUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EnrollmentUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssessmentAttemptUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    assessment?: AssessmentUpdateOneRequiredWithoutAttemptsNestedInput
    department?: DepartmentUpdateOneWithoutAssessmentAttemptNestedInput
    course?: CourseUpdateOneWithoutAssessmentAttemptNestedInput
    college?: CollegeUpdateOneWithoutAssessmentAttemptNestedInput
  }

  export type AssessmentAttemptUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    assessmentId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    collegeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssessmentAttemptUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    assessmentId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    collegeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChapterProgressUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    timeSpent?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chapter?: ChapterUpdateOneRequiredWithoutProgressNestedInput
  }

  export type ChapterProgressUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    timeSpent?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    chapterId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChapterProgressUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    timeSpent?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    chapterId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseReviewUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type CourseReviewUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    courseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseReviewUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    courseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentCreateManyCollegeInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RegistrationCreateManyCollegeInput = {
    id?: string
    fullName: string
    email: string
    year?: string | null
    branch?: string | null
    academicYear?: string | null
    rollNumber?: string | null
    departmentId?: string | null
    role?: string
    status?: string
    otpHash?: string | null
    otpExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoursesAssignedCreateManyCollegeInput = {
    id?: string
    courseId: string
    departmentId?: string | null
    capacity?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssessmentAttemptCreateManyCollegeInput = {
    id?: string
    assessmentId: string
    studentId: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    status?: string
    score?: number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    departmentId?: string | null
    courseId?: string | null
  }

  export type DepartmentUpdateWithoutCollegeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Registration?: RegistrationUpdateManyWithoutDepartmentNestedInput
    CoursesAssigned?: CoursesAssignedUpdateManyWithoutDepartmentNestedInput
    Enrollment?: EnrollmentUpdateManyWithoutDepartmentNestedInput
    AssessmentAttempt?: AssessmentAttemptUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutCollegeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Registration?: RegistrationUncheckedUpdateManyWithoutDepartmentNestedInput
    CoursesAssigned?: CoursesAssignedUncheckedUpdateManyWithoutDepartmentNestedInput
    Enrollment?: EnrollmentUncheckedUpdateManyWithoutDepartmentNestedInput
    AssessmentAttempt?: AssessmentAttemptUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateManyWithoutCollegeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistrationUpdateWithoutCollegeInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    year?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    rollNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    otpHash?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneWithoutRegistrationNestedInput
  }

  export type RegistrationUncheckedUpdateWithoutCollegeInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    year?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    rollNumber?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    otpHash?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistrationUncheckedUpdateManyWithoutCollegeInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    year?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    rollNumber?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    otpHash?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoursesAssignedUpdateWithoutCollegeInput = {
    id?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutCoursesAssignedNestedInput
    department?: DepartmentUpdateOneWithoutCoursesAssignedNestedInput
  }

  export type CoursesAssignedUncheckedUpdateWithoutCollegeInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoursesAssignedUncheckedUpdateManyWithoutCollegeInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssessmentAttemptUpdateWithoutCollegeInput = {
    id?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    assessment?: AssessmentUpdateOneRequiredWithoutAttemptsNestedInput
    student?: UserUpdateOneRequiredWithoutAssessmentAttemptsNestedInput
    department?: DepartmentUpdateOneWithoutAssessmentAttemptNestedInput
    course?: CourseUpdateOneWithoutAssessmentAttemptNestedInput
  }

  export type AssessmentAttemptUncheckedUpdateWithoutCollegeInput = {
    id?: StringFieldUpdateOperationsInput | string
    assessmentId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssessmentAttemptUncheckedUpdateManyWithoutCollegeInput = {
    id?: StringFieldUpdateOperationsInput | string
    assessmentId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RegistrationCreateManyDepartmentInput = {
    id?: string
    fullName: string
    email: string
    year?: string | null
    branch?: string | null
    academicYear?: string | null
    rollNumber?: string | null
    collegeId: string
    role?: string
    status?: string
    otpHash?: string | null
    otpExpires?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoursesAssignedCreateManyDepartmentInput = {
    id?: string
    courseId: string
    collegeId: string
    capacity?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EnrollmentCreateManyDepartmentInput = {
    id?: string
    studentId: string
    courseId: string
    status?: string
    progress?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    duration?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssessmentAttemptCreateManyDepartmentInput = {
    id?: string
    assessmentId: string
    studentId: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    status?: string
    score?: number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    courseId?: string | null
    collegeId?: string | null
  }

  export type RegistrationUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    year?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    rollNumber?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    otpHash?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    college?: CollegeUpdateOneRequiredWithoutRegistrationNestedInput
  }

  export type RegistrationUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    year?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    rollNumber?: NullableStringFieldUpdateOperationsInput | string | null
    collegeId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    otpHash?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegistrationUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    year?: NullableStringFieldUpdateOperationsInput | string | null
    branch?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: NullableStringFieldUpdateOperationsInput | string | null
    rollNumber?: NullableStringFieldUpdateOperationsInput | string | null
    collegeId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    otpHash?: NullableStringFieldUpdateOperationsInput | string | null
    otpExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoursesAssignedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutCoursesAssignedNestedInput
    college?: CollegeUpdateOneRequiredWithoutCoursesAssignedNestedInput
  }

  export type CoursesAssignedUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    collegeId?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoursesAssignedUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    collegeId?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutEnrollmentsNestedInput
    course?: CourseUpdateOneRequiredWithoutEnrollmentsNestedInput
  }

  export type EnrollmentUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssessmentAttemptUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    assessment?: AssessmentUpdateOneRequiredWithoutAttemptsNestedInput
    student?: UserUpdateOneRequiredWithoutAssessmentAttemptsNestedInput
    course?: CourseUpdateOneWithoutAssessmentAttemptNestedInput
    college?: CollegeUpdateOneWithoutAssessmentAttemptNestedInput
  }

  export type AssessmentAttemptUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    assessmentId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    collegeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssessmentAttemptUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    assessmentId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    collegeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EnrollmentCreateManyCourseInput = {
    id?: string
    studentId: string
    status?: string
    progress?: number
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    duration?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentId?: string | null
  }

  export type AssessmentCreateManyCourseInput = {
    id?: string
    title: string
    type?: string
    scope?: string
    timeLimitSeconds?: number | null
    maxAttempts?: number
    isPublished?: boolean
    order?: number | null
    chapterId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChapterCreateManyCourseInput = {
    id?: string
    title: string
    slug?: string
    description?: string | null
    content?: string | null
    attachments?: ChapterCreateattachmentsInput | string[]
    order: number
    isPreview?: boolean
    isPublished?: boolean
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseReviewCreateManyCourseInput = {
    id?: string
    rating: number
    comment?: string | null
    isPublic?: boolean
    studentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoursesAssignedCreateManyCourseInput = {
    id?: string
    collegeId: string
    departmentId?: string | null
    capacity?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssessmentAttemptCreateManyCourseInput = {
    id?: string
    assessmentId: string
    studentId: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    status?: string
    score?: number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    departmentId?: string | null
    collegeId?: string | null
  }

  export type EnrollmentUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutEnrollmentsNestedInput
    department?: DepartmentUpdateOneWithoutEnrollmentNestedInput
  }

  export type EnrollmentUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EnrollmentUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: IntFieldUpdateOperationsInput | number
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssessmentUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    timeLimitSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    maxAttempts?: IntFieldUpdateOperationsInput | number
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    order?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: AssessmentQuestionUpdateManyWithoutAssessmentNestedInput
    attempts?: AssessmentAttemptUpdateManyWithoutAssessmentNestedInput
    chapter?: ChapterUpdateOneWithoutAssessmentsNestedInput
  }

  export type AssessmentUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    timeLimitSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    maxAttempts?: IntFieldUpdateOperationsInput | number
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    order?: NullableIntFieldUpdateOperationsInput | number | null
    chapterId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: AssessmentQuestionUncheckedUpdateManyWithoutAssessmentNestedInput
    attempts?: AssessmentAttemptUncheckedUpdateManyWithoutAssessmentNestedInput
  }

  export type AssessmentUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    timeLimitSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    maxAttempts?: IntFieldUpdateOperationsInput | number
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    order?: NullableIntFieldUpdateOperationsInput | number | null
    chapterId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChapterUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: ChapterUpdateattachmentsInput | string[]
    order?: IntFieldUpdateOperationsInput | number
    isPreview?: BoolFieldUpdateOperationsInput | boolean
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessments?: AssessmentUpdateManyWithoutChapterNestedInput
    progress?: ChapterProgressUpdateManyWithoutChapterNestedInput
  }

  export type ChapterUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: ChapterUpdateattachmentsInput | string[]
    order?: IntFieldUpdateOperationsInput | number
    isPreview?: BoolFieldUpdateOperationsInput | boolean
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assessments?: AssessmentUncheckedUpdateManyWithoutChapterNestedInput
    progress?: ChapterProgressUncheckedUpdateManyWithoutChapterNestedInput
  }

  export type ChapterUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: ChapterUpdateattachmentsInput | string[]
    order?: IntFieldUpdateOperationsInput | number
    isPreview?: BoolFieldUpdateOperationsInput | boolean
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    settings?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseReviewUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutCourseReviewsNestedInput
  }

  export type CourseReviewUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    studentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseReviewUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    studentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoursesAssignedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    college?: CollegeUpdateOneRequiredWithoutCoursesAssignedNestedInput
    department?: DepartmentUpdateOneWithoutCoursesAssignedNestedInput
  }

  export type CoursesAssignedUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    collegeId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoursesAssignedUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    collegeId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssessmentAttemptUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    assessment?: AssessmentUpdateOneRequiredWithoutAttemptsNestedInput
    student?: UserUpdateOneRequiredWithoutAssessmentAttemptsNestedInput
    department?: DepartmentUpdateOneWithoutAssessmentAttemptNestedInput
    college?: CollegeUpdateOneWithoutAssessmentAttemptNestedInput
  }

  export type AssessmentAttemptUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    assessmentId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    collegeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssessmentAttemptUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    assessmentId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    collegeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssessmentCreateManyChapterInput = {
    id?: string
    title: string
    type?: string
    scope?: string
    timeLimitSeconds?: number | null
    maxAttempts?: number
    isPublished?: boolean
    order?: number | null
    courseId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChapterProgressCreateManyChapterInput = {
    id?: string
    isCompleted?: boolean
    timeSpent?: number
    completedAt?: Date | string | null
    studentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssessmentUpdateWithoutChapterInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    timeLimitSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    maxAttempts?: IntFieldUpdateOperationsInput | number
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    order?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: AssessmentQuestionUpdateManyWithoutAssessmentNestedInput
    attempts?: AssessmentAttemptUpdateManyWithoutAssessmentNestedInput
    course?: CourseUpdateOneWithoutAssessmentsNestedInput
  }

  export type AssessmentUncheckedUpdateWithoutChapterInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    timeLimitSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    maxAttempts?: IntFieldUpdateOperationsInput | number
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    order?: NullableIntFieldUpdateOperationsInput | number | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: AssessmentQuestionUncheckedUpdateManyWithoutAssessmentNestedInput
    attempts?: AssessmentAttemptUncheckedUpdateManyWithoutAssessmentNestedInput
  }

  export type AssessmentUncheckedUpdateManyWithoutChapterInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    timeLimitSeconds?: NullableIntFieldUpdateOperationsInput | number | null
    maxAttempts?: IntFieldUpdateOperationsInput | number
    isPublished?: BoolFieldUpdateOperationsInput | boolean
    order?: NullableIntFieldUpdateOperationsInput | number | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChapterProgressUpdateWithoutChapterInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    timeSpent?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutChapterProgressNestedInput
  }

  export type ChapterProgressUncheckedUpdateWithoutChapterInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    timeSpent?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChapterProgressUncheckedUpdateManyWithoutChapterInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    timeSpent?: IntFieldUpdateOperationsInput | number
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    studentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssessmentQuestionCreateManyAssessmentInput = {
    id?: string
    prompt: string
    type: string
    options?: AssessmentQuestionCreateoptionsInput | string[]
    correctOptionIndex?: number | null
    correctOptionIndexes?: AssessmentQuestionCreatecorrectOptionIndexesInput | number[]
    correctText?: string | null
    pairs?: NullableJsonNullValueInput | InputJsonValue
    sampleAnswer?: string | null
    points?: number
    order?: number
  }

  export type AssessmentAttemptCreateManyAssessmentInput = {
    id?: string
    studentId: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    status?: string
    score?: number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    departmentId?: string | null
    courseId?: string | null
    collegeId?: string | null
  }

  export type AssessmentQuestionUpdateWithoutAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    options?: AssessmentQuestionUpdateoptionsInput | string[]
    correctOptionIndex?: NullableIntFieldUpdateOperationsInput | number | null
    correctOptionIndexes?: AssessmentQuestionUpdatecorrectOptionIndexesInput | number[]
    correctText?: NullableStringFieldUpdateOperationsInput | string | null
    pairs?: NullableJsonNullValueInput | InputJsonValue
    sampleAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
  }

  export type AssessmentQuestionUncheckedUpdateWithoutAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    options?: AssessmentQuestionUpdateoptionsInput | string[]
    correctOptionIndex?: NullableIntFieldUpdateOperationsInput | number | null
    correctOptionIndexes?: AssessmentQuestionUpdatecorrectOptionIndexesInput | number[]
    correctText?: NullableStringFieldUpdateOperationsInput | string | null
    pairs?: NullableJsonNullValueInput | InputJsonValue
    sampleAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
  }

  export type AssessmentQuestionUncheckedUpdateManyWithoutAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    prompt?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    options?: AssessmentQuestionUpdateoptionsInput | string[]
    correctOptionIndex?: NullableIntFieldUpdateOperationsInput | number | null
    correctOptionIndexes?: AssessmentQuestionUpdatecorrectOptionIndexesInput | number[]
    correctText?: NullableStringFieldUpdateOperationsInput | string | null
    pairs?: NullableJsonNullValueInput | InputJsonValue
    sampleAnswer?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    order?: IntFieldUpdateOperationsInput | number
  }

  export type AssessmentAttemptUpdateWithoutAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    student?: UserUpdateOneRequiredWithoutAssessmentAttemptsNestedInput
    department?: DepartmentUpdateOneWithoutAssessmentAttemptNestedInput
    course?: CourseUpdateOneWithoutAssessmentAttemptNestedInput
    college?: CollegeUpdateOneWithoutAssessmentAttemptNestedInput
  }

  export type AssessmentAttemptUncheckedUpdateWithoutAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    collegeId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssessmentAttemptUncheckedUpdateManyWithoutAssessmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    score?: NullableIntFieldUpdateOperationsInput | number | null
    answers?: NullableJsonNullValueInput | InputJsonValue
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    collegeId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CollegeCountOutputTypeDefaultArgs instead
     */
    export type CollegeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CollegeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepartmentCountOutputTypeDefaultArgs instead
     */
    export type DepartmentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepartmentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CourseCountOutputTypeDefaultArgs instead
     */
    export type CourseCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CourseCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChapterCountOutputTypeDefaultArgs instead
     */
    export type ChapterCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChapterCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssessmentCountOutputTypeDefaultArgs instead
     */
    export type AssessmentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssessmentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RegistrationDefaultArgs instead
     */
    export type RegistrationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RegistrationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CollegeDefaultArgs instead
     */
    export type CollegeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CollegeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepartmentDefaultArgs instead
     */
    export type DepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepartmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CourseDefaultArgs instead
     */
    export type CourseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CourseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CoursesAssignedDefaultArgs instead
     */
    export type CoursesAssignedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CoursesAssignedDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EnrollmentDefaultArgs instead
     */
    export type EnrollmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EnrollmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChapterDefaultArgs instead
     */
    export type ChapterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChapterDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChapterProgressDefaultArgs instead
     */
    export type ChapterProgressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChapterProgressDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssessmentDefaultArgs instead
     */
    export type AssessmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssessmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssessmentQuestionDefaultArgs instead
     */
    export type AssessmentQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssessmentQuestionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssessmentAttemptDefaultArgs instead
     */
    export type AssessmentAttemptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssessmentAttemptDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SettingDefaultArgs instead
     */
    export type SettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SettingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CourseReviewDefaultArgs instead
     */
    export type CourseReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CourseReviewDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}